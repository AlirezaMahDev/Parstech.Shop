// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop.Persistence.Context;

#nullable disable

namespace Shop.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IuserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_IUserRoles_RoleId");

                    b.ToTable("IUserRoles", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandImage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BrandTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ChangeByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatinBrandTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("BrandId")
                        .HasName("PK_Brandses");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.Categury", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("Alt")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("BackImage")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ChangeByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParnet")
                        .HasColumnType("bit")
                        .HasColumnName("isParnet");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatinGroupTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("Row")
                        .HasColumnType("int");

                    b.Property<bool>("Show")
                        .HasColumnType("bit");

                    b.HasKey("GroupId")
                        .HasName("PK_ProductGroups");

                    b.HasIndex("ParentId");

                    b.ToTable("Categury", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Categury")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CouponTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("JustNewUser")
                        .HasColumnType("bit");

                    b.Property<int?>("LimitEachUser")
                        .HasColumnType("int");

                    b.Property<int?>("LimitUse")
                        .HasColumnType("int");

                    b.Property<long?>("MaxPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("MinPrice")
                        .HasColumnType("bigint");

                    b.Property<int>("Persent")
                        .HasColumnType("int");

                    b.Property<string>("Products")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoUseSameTime")
                        .HasColumnType("bit");

                    b.Property<string>("Users")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CouponTypeId");

                    b.ToTable("Coupon", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.CouponPcu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<int>("FkId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("YesOrNo")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_CouponProductCatgury");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponPCU", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.CouponType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CouponType", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.FormCredit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InternationalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PersonalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FormCredit", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.Irole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PersianName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("IRoles", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.IroleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_IRoleClaims_RoleId");

                    b.ToTable("IRoleClaims", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.Iuser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("IUsers", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.IuserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_IUserClaims_UserId");

                    b.ToTable("IUserClaims", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.IuserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_IUserLogins_UserId");

                    b.ToTable("IUserLogins", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.IuserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IUserTokens", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateDate")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LogCateguryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LogCateguryId");

                    b.HasIndex("UserId");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.LogCategury", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("LogCategury", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<bool?>("ConfirmPayment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("Discount")
                        .HasColumnType("bigint");

                    b.Property<string>("FactorFile")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IntroCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IntroCoin")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinaly")
                        .HasColumnType("bit");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<long>("OrderSum")
                        .HasColumnType("bigint");

                    b.Property<long>("Shipping")
                        .HasColumnType("bigint");

                    b.Property<long>("Tax")
                        .HasColumnType("bigint");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.Property<long>("Total")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("TaxId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Shop.Domain.Models.OrderCoupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<long>("DiscountPrice")
                        .HasColumnType("bigint");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderCoupon", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<long>("DetailSum")
                        .HasColumnType("bigint");

                    b.Property<long>("Discount")
                        .HasColumnType("bigint");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductStockPriceId")
                        .HasColumnType("int");

                    b.Property<long>("Tax")
                        .HasColumnType("bigint");

                    b.Property<long>("Total")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK_WooOrderDetail");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductStockPriceId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.OrderPay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DepositCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PayStatusTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PayTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PayStatusTypeId");

                    b.HasIndex("PayTypeId");

                    b.ToTable("OrderPay", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.OrderShipping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ShippingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserShippingId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShippingTypeId");

                    b.ToTable("OrderShipping", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.OrderStatus", b =>
                {
                    b.Property<int>("Osid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OSId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Osid"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Osid")
                        .HasName("PK_AllOrderStatus");

                    b.HasIndex("OrderId");

                    b.HasIndex("StatusId");

                    b.ToTable("OrderStatus", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.OrdersAction", b =>
                {
                    b.Property<string>("Caption")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Description")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("OrderCode")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.ToTable("OrdersActions");
                });

            modelBuilder.Entity("Shop.Domain.Models.PayStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PayStatusType", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.PayType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PayType", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LatinName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("ShortLink")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("SingleSale")
                        .HasColumnType("bit");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("VariationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Visit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TaxId");

                    b.HasIndex("TypeId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductCategury", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CateguryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CateguryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategury", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductComment", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_productGalleries");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductGallery", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductLogTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductStockPriceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductLogTypeId");

                    b.HasIndex("ProductStockPriceId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductLog", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductLogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductLogType", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PropertyId");

                    b.ToTable("ProductProperty", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_productRatings");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductRating", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductRelated", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FkProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FkProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductRelated", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductRepresentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductStockPriceId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RepresntationId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("UniqeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductStockPriceId");

                    b.HasIndex("RepresntationId");

                    b.HasIndex("TypeId");

                    b.ToTable("ProductRepresentation", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductStockPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("BasePrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DiscountDate")
                        .HasColumnType("datetime");

                    b.Property<long>("DiscountPrice")
                        .HasColumnType("bigint");

                    b.Property<int>("MaximumSaleInOrder")
                        .HasColumnType("int");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityPerBundle")
                        .HasColumnType("int");

                    b.Property<int>("RepId")
                        .HasColumnType("int");

                    b.Property<long>("SalePrice")
                        .HasColumnType("bigint");

                    b.Property<bool>("StockStatus")
                        .HasColumnType("bit");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RepId");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductStockPrice", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProductType", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int>("CateguryId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyCateguryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CateguryId");

                    b.HasIndex("PropertyCateguryId");

                    b.ToTable("Property", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.PropertyCategury", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PropertyCategury", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.Representation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Representation", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.RepresentationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RepresentationType", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CateguryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("SectionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionTypeId");

                    b.ToTable("Section", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.SectionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alt")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BackgroundColor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackgroundImage")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ColSpace")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Link")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ResponsiveSize")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("SectionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SlideNavName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SubCaption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("SectionTypeId");

                    b.ToTable("SectionDetail", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.SectionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SectionType", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.ShippingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("ShippingType", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.SiteSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Canonical")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Enamad")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EtaemadElectronic")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Keywords")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LogoAlt")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OgDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Og_Description");

                    b.Property<string>("OgImage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Og_Image");

                    b.Property<string>("OgSiteName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Og_SiteName");

                    b.Property<string>("OgTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Og_Title");

                    b.Property<string>("OgType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Og_Type");

                    b.Property<string>("OgUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Og_Url");

                    b.Property<string>("Owner")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RobotsFollow")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Robots_Follow");

                    b.Property<string>("RobotsIndex")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Robots_Index");

                    b.Property<string>("SiteName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)");

                    b.HasKey("Id");

                    b.ToTable("SiteSetting", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.SocialSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("image");

                    b.Property<string>("Site")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("site");

                    b.Property<int>("SiteSettingId")
                        .HasColumnType("int");

                    b.Property<string>("SocialName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("SiteSettingId");

                    b.ToTable("SocialSetting", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.Property<string>("StateTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Shop.Domain.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Olaviyat")
                        .HasColumnType("int");

                    b.Property<string>("StatusLatinName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TaxName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tax", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("departmentId");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TicketCaption")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Shop.Domain.Models.TicketDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"));

                    b.Property<string>("TicketFile")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("TicketText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("DetailId");

                    b.HasIndex("TicketId");

                    b.HasIndex("TypeId");

                    b.ToTable("TicketDetails");
                });

            modelBuilder.Entity("Shop.Domain.Models.TicketStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("TicketStatuses");
                });

            modelBuilder.Entity("Shop.Domain.Models.TicketType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("Shop.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsDelete")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SendSms")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK_Users");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.UserBilling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Company")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EconomicCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_WooOrderBilling");

                    b.HasIndex("UserId");

                    b.ToTable("UserBilling", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.UserProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserProduct", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.UserShipping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("City")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Country")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LastName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("State")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_WooOrderShipping");

                    b.HasIndex("UserId");

                    b.ToTable("UserShipping", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.UserStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LatinStoreName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PersentOfSale")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("RepId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_WooStore");

                    b.HasIndex("RepId");

                    b.HasIndex("UserId");

                    b.ToTable("UserStore", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.VersionSetting", b =>
                {
                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("VersionSetting", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int>("Coin")
                        .HasColumnType("int");

                    b.Property<long>("Fecilities")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<long>("OrgCredit")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Shop.Domain.Models.WalletTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<int?>("ParentFecilitiesId")
                        .HasColumnType("int");

                    b.Property<int?>("Persent")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<bool?>("Start")
                        .HasColumnType("bit");

                    b.Property<string>("TrackingCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransaction", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Models.WalletType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("TypeId");

                    b.ToTable("WalletTypes");
                });

            modelBuilder.Entity("IuserRole", b =>
                {
                    b.HasOne("Shop.Domain.Models.Irole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.Domain.Models.Iuser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shop.Domain.Models.Categury", b =>
                {
                    b.HasOne("Shop.Domain.Models.Categury", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Categury_Categury");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Shop.Domain.Models.Coupon", b =>
                {
                    b.HasOne("Shop.Domain.Models.CouponType", "CouponType")
                        .WithMany("Coupons")
                        .HasForeignKey("CouponTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Coupon_CouponType");

                    b.Navigation("CouponType");
                });

            modelBuilder.Entity("Shop.Domain.Models.CouponPcu", b =>
                {
                    b.HasOne("Shop.Domain.Models.Coupon", "Coupon")
                        .WithMany("CouponPcus")
                        .HasForeignKey("CouponId")
                        .IsRequired()
                        .HasConstraintName("FK_CouponProductCatgury_Coupon");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("Shop.Domain.Models.IroleClaim", b =>
                {
                    b.HasOne("Shop.Domain.Models.Irole", "Role")
                        .WithMany("IroleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Shop.Domain.Models.IuserClaim", b =>
                {
                    b.HasOne("Shop.Domain.Models.Iuser", "User")
                        .WithMany("IuserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Domain.Models.IuserLogin", b =>
                {
                    b.HasOne("Shop.Domain.Models.Iuser", "User")
                        .WithMany("IuserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Domain.Models.IuserToken", b =>
                {
                    b.HasOne("Shop.Domain.Models.Iuser", "User")
                        .WithMany("IuserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Domain.Models.Log", b =>
                {
                    b.HasOne("Shop.Domain.Models.LogCategury", "LogCategury")
                        .WithMany("Logs")
                        .HasForeignKey("LogCateguryId")
                        .IsRequired()
                        .HasConstraintName("FK_Log_LogCategury");

                    b.HasOne("Shop.Domain.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Log_User");

                    b.Navigation("LogCategury");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Domain.Models.Order", b =>
                {
                    b.HasOne("Shop.Domain.Models.Tax", "TaxNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("TaxId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Tax");

                    b.HasOne("Shop.Domain.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_User");

                    b.Navigation("TaxNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Domain.Models.OrderCoupon", b =>
                {
                    b.HasOne("Shop.Domain.Models.Coupon", "Coupon")
                        .WithMany("OrderCoupons")
                        .HasForeignKey("CouponId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderCoupon_Coupon");

                    b.HasOne("Shop.Domain.Models.Order", "Order")
                        .WithMany("OrderCoupons")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderCoupon_Orders");

                    b.Navigation("Coupon");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Shop.Domain.Models.OrderDetail", b =>
                {
                    b.HasOne("Shop.Domain.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Orders");

                    b.HasOne("Shop.Domain.Models.ProductStockPrice", "ProductStockPrice")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductStockPriceId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_ProductStockPrice");

                    b.Navigation("Order");

                    b.Navigation("ProductStockPrice");
                });

            modelBuilder.Entity("Shop.Domain.Models.OrderPay", b =>
                {
                    b.HasOne("Shop.Domain.Models.Order", "Order")
                        .WithMany("OrderPays")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderPay_Orders");

                    b.HasOne("Shop.Domain.Models.PayStatusType", "PayStatusType")
                        .WithMany("OrderPays")
                        .HasForeignKey("PayStatusTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderPay_PayStatusType");

                    b.HasOne("Shop.Domain.Models.PayType", "PayType")
                        .WithMany("OrderPays")
                        .HasForeignKey("PayTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderPay_PayType");

                    b.Navigation("Order");

                    b.Navigation("PayStatusType");

                    b.Navigation("PayType");
                });

            modelBuilder.Entity("Shop.Domain.Models.OrderShipping", b =>
                {
                    b.HasOne("Shop.Domain.Models.Order", "Order")
                        .WithMany("OrderShippings")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderShipping_Orders");

                    b.HasOne("Shop.Domain.Models.ShippingType", "ShippingType")
                        .WithMany("OrderShippings")
                        .HasForeignKey("ShippingTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderShipping_ShippingType");

                    b.Navigation("Order");

                    b.Navigation("ShippingType");
                });

            modelBuilder.Entity("Shop.Domain.Models.OrderStatus", b =>
                {
                    b.HasOne("Shop.Domain.Models.Order", "Order")
                        .WithMany("OrderStatuses")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderStatus_Orders");

                    b.HasOne("Shop.Domain.Models.Status", "Status")
                        .WithMany("OrderStatuses")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderStatus_Status");

                    b.Navigation("Order");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Shop.Domain.Models.Product", b =>
                {
                    b.HasOne("Shop.Domain.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Brand");

                    b.HasOne("Shop.Domain.Models.Product", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Product_Product");

                    b.HasOne("Shop.Domain.Models.Tax", "Tax")
                        .WithMany("Products")
                        .HasForeignKey("TaxId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Tax");

                    b.HasOne("Shop.Domain.Models.ProductType", "Type")
                        .WithMany("Products")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_ProductType");

                    b.Navigation("Brand");

                    b.Navigation("Parent");

                    b.Navigation("Tax");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductCategury", b =>
                {
                    b.HasOne("Shop.Domain.Models.Categury", "Categury")
                        .WithMany("ProductCateguries")
                        .HasForeignKey("CateguryId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategury_Categury1");

                    b.HasOne("Shop.Domain.Models.Product", "Product")
                        .WithMany("ProductCateguries")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategury_Product");

                    b.Navigation("Categury");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductComment", b =>
                {
                    b.HasOne("Shop.Domain.Models.Product", "Product")
                        .WithMany("ProductComments")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductComment_Product");

                    b.HasOne("Shop.Domain.Models.User", "User")
                        .WithMany("ProductComments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductComment_User");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductGallery", b =>
                {
                    b.HasOne("Shop.Domain.Models.Product", "Product")
                        .WithMany("ProductGalleries")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductGallery_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductLog", b =>
                {
                    b.HasOne("Shop.Domain.Models.ProductLogType", "ProductLogType")
                        .WithMany("ProductLogs")
                        .HasForeignKey("ProductLogTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductLog_ProductLogType");

                    b.HasOne("Shop.Domain.Models.ProductStockPrice", "ProductStockPrice")
                        .WithMany("ProductLogs")
                        .HasForeignKey("ProductStockPriceId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductLog_ProductStockPrice");

                    b.HasOne("Shop.Domain.Models.User", "User")
                        .WithMany("ProductLogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductLog_User");

                    b.Navigation("ProductLogType");

                    b.Navigation("ProductStockPrice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductProperty", b =>
                {
                    b.HasOne("Shop.Domain.Models.Product", "Product")
                        .WithMany("ProductProperties")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductProperty_Product");

                    b.HasOne("Shop.Domain.Models.Property", "Property")
                        .WithMany("ProductProperties")
                        .HasForeignKey("PropertyId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductProperty_Property");

                    b.Navigation("Product");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductRating", b =>
                {
                    b.HasOne("Shop.Domain.Models.Product", "Product")
                        .WithMany("ProductRatings")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductRating_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductRelated", b =>
                {
                    b.HasOne("Shop.Domain.Models.Product", "FkProduct")
                        .WithMany("ProductRelatedFkProducts")
                        .HasForeignKey("FkProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductRelated_Product1");

                    b.HasOne("Shop.Domain.Models.Product", "Product")
                        .WithMany("ProductRelatedProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductRelated_Product");

                    b.Navigation("FkProduct");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductRepresentation", b =>
                {
                    b.HasOne("Shop.Domain.Models.ProductStockPrice", "ProductStockPrice")
                        .WithMany("ProductRepresentations")
                        .HasForeignKey("ProductStockPriceId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductRepresentation_ProductStockPrice");

                    b.HasOne("Shop.Domain.Models.Representation", "Represntation")
                        .WithMany("ProductRepresentations")
                        .HasForeignKey("RepresntationId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductRepresentation_Representation");

                    b.HasOne("Shop.Domain.Models.RepresentationType", "Type")
                        .WithMany("ProductRepresentations")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductRepresentation_RepresentationType");

                    b.Navigation("ProductStockPrice");

                    b.Navigation("Represntation");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductStockPrice", b =>
                {
                    b.HasOne("Shop.Domain.Models.Product", "Product")
                        .WithMany("ProductStockPrices")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductStockPrice_Product");

                    b.HasOne("Shop.Domain.Models.Representation", "Rep")
                        .WithMany("ProductStockPrices")
                        .HasForeignKey("RepId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductStockPrice_Representation");

                    b.HasOne("Shop.Domain.Models.UserStore", "Store")
                        .WithMany("ProductStockPrices")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductStockPrice_UserStore");

                    b.Navigation("Product");

                    b.Navigation("Rep");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Shop.Domain.Models.Property", b =>
                {
                    b.HasOne("Shop.Domain.Models.Categury", "Categury")
                        .WithMany("Properties")
                        .HasForeignKey("CateguryId")
                        .IsRequired()
                        .HasConstraintName("FK_Property_Categury");

                    b.HasOne("Shop.Domain.Models.PropertyCategury", "PropertyCategury")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyCateguryId")
                        .IsRequired()
                        .HasConstraintName("FK_Property_PropertyCategury");

                    b.Navigation("Categury");

                    b.Navigation("PropertyCategury");
                });

            modelBuilder.Entity("Shop.Domain.Models.Representation", b =>
                {
                    b.HasOne("Shop.Domain.Models.State", "State")
                        .WithMany("Representations")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Representation_States");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Shop.Domain.Models.Section", b =>
                {
                    b.HasOne("Shop.Domain.Models.SectionType", "SectionType")
                        .WithMany("Sections")
                        .HasForeignKey("SectionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Section_SectionType");

                    b.Navigation("SectionType");
                });

            modelBuilder.Entity("Shop.Domain.Models.SectionDetail", b =>
                {
                    b.HasOne("Shop.Domain.Models.Section", "Section")
                        .WithMany("SectionDetails")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("FK_SectionDetail_Section");

                    b.HasOne("Shop.Domain.Models.SectionType", "SectionType")
                        .WithMany("SectionDetails")
                        .HasForeignKey("SectionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_SectionDetail_SectionType");

                    b.Navigation("Section");

                    b.Navigation("SectionType");
                });

            modelBuilder.Entity("Shop.Domain.Models.SocialSetting", b =>
                {
                    b.HasOne("Shop.Domain.Models.SiteSetting", "SiteSetting")
                        .WithMany("SocialSettings")
                        .HasForeignKey("SiteSettingId")
                        .IsRequired()
                        .HasConstraintName("FK_SocialSetting_SiteSetting");

                    b.Navigation("SiteSetting");
                });

            modelBuilder.Entity("Shop.Domain.Models.Ticket", b =>
                {
                    b.HasOne("Shop.Domain.Models.TicketStatus", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_TicketStatuses");

                    b.HasOne("Shop.Domain.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_User");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Domain.Models.TicketDetail", b =>
                {
                    b.HasOne("Shop.Domain.Models.Ticket", "Ticket")
                        .WithMany("TicketDetails")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketDetails_Tickets");

                    b.HasOne("Shop.Domain.Models.TicketType", "Type")
                        .WithMany("TicketDetails")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketDetails_TicketTypes");

                    b.Navigation("Ticket");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Shop.Domain.Models.UserBilling", b =>
                {
                    b.HasOne("Shop.Domain.Models.User", "User")
                        .WithMany("UserBillings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserBilling_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Domain.Models.UserShipping", b =>
                {
                    b.HasOne("Shop.Domain.Models.User", "User")
                        .WithMany("UserShippings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserShipping_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Domain.Models.UserStore", b =>
                {
                    b.HasOne("Shop.Domain.Models.Representation", "Rep")
                        .WithMany("UserStores")
                        .HasForeignKey("RepId")
                        .IsRequired()
                        .HasConstraintName("FK_UserStore_Representation");

                    b.HasOne("Shop.Domain.Models.User", "User")
                        .WithMany("UserStores")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserStore_User1");

                    b.Navigation("Rep");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Domain.Models.Wallet", b =>
                {
                    b.HasOne("Shop.Domain.Models.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Wallets_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Domain.Models.WalletTransaction", b =>
                {
                    b.HasOne("Shop.Domain.Models.WalletType", "TypeNavigation")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_WalletTransaction_WalletTypes");

                    b.HasOne("Shop.Domain.Models.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK_WalletTransaction_Wallets");

                    b.Navigation("TypeNavigation");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Shop.Domain.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shop.Domain.Models.Categury", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("ProductCateguries");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Shop.Domain.Models.Coupon", b =>
                {
                    b.Navigation("CouponPcus");

                    b.Navigation("OrderCoupons");
                });

            modelBuilder.Entity("Shop.Domain.Models.CouponType", b =>
                {
                    b.Navigation("Coupons");
                });

            modelBuilder.Entity("Shop.Domain.Models.Irole", b =>
                {
                    b.Navigation("IroleClaims");
                });

            modelBuilder.Entity("Shop.Domain.Models.Iuser", b =>
                {
                    b.Navigation("IuserClaims");

                    b.Navigation("IuserLogins");

                    b.Navigation("IuserTokens");
                });

            modelBuilder.Entity("Shop.Domain.Models.LogCategury", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Shop.Domain.Models.Order", b =>
                {
                    b.Navigation("OrderCoupons");

                    b.Navigation("OrderDetails");

                    b.Navigation("OrderPays");

                    b.Navigation("OrderShippings");

                    b.Navigation("OrderStatuses");
                });

            modelBuilder.Entity("Shop.Domain.Models.PayStatusType", b =>
                {
                    b.Navigation("OrderPays");
                });

            modelBuilder.Entity("Shop.Domain.Models.PayType", b =>
                {
                    b.Navigation("OrderPays");
                });

            modelBuilder.Entity("Shop.Domain.Models.Product", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("ProductCateguries");

                    b.Navigation("ProductComments");

                    b.Navigation("ProductGalleries");

                    b.Navigation("ProductProperties");

                    b.Navigation("ProductRatings");

                    b.Navigation("ProductRelatedFkProducts");

                    b.Navigation("ProductRelatedProducts");

                    b.Navigation("ProductStockPrices");
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductLogType", b =>
                {
                    b.Navigation("ProductLogs");
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductStockPrice", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductLogs");

                    b.Navigation("ProductRepresentations");
                });

            modelBuilder.Entity("Shop.Domain.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shop.Domain.Models.Property", b =>
                {
                    b.Navigation("ProductProperties");
                });

            modelBuilder.Entity("Shop.Domain.Models.PropertyCategury", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Shop.Domain.Models.Representation", b =>
                {
                    b.Navigation("ProductRepresentations");

                    b.Navigation("ProductStockPrices");

                    b.Navigation("UserStores");
                });

            modelBuilder.Entity("Shop.Domain.Models.RepresentationType", b =>
                {
                    b.Navigation("ProductRepresentations");
                });

            modelBuilder.Entity("Shop.Domain.Models.Section", b =>
                {
                    b.Navigation("SectionDetails");
                });

            modelBuilder.Entity("Shop.Domain.Models.SectionType", b =>
                {
                    b.Navigation("SectionDetails");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Shop.Domain.Models.ShippingType", b =>
                {
                    b.Navigation("OrderShippings");
                });

            modelBuilder.Entity("Shop.Domain.Models.SiteSetting", b =>
                {
                    b.Navigation("SocialSettings");
                });

            modelBuilder.Entity("Shop.Domain.Models.State", b =>
                {
                    b.Navigation("Representations");
                });

            modelBuilder.Entity("Shop.Domain.Models.Status", b =>
                {
                    b.Navigation("OrderStatuses");
                });

            modelBuilder.Entity("Shop.Domain.Models.Tax", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shop.Domain.Models.Ticket", b =>
                {
                    b.Navigation("TicketDetails");
                });

            modelBuilder.Entity("Shop.Domain.Models.TicketStatus", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Shop.Domain.Models.TicketType", b =>
                {
                    b.Navigation("TicketDetails");
                });

            modelBuilder.Entity("Shop.Domain.Models.User", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Orders");

                    b.Navigation("ProductComments");

                    b.Navigation("ProductLogs");

                    b.Navigation("Tickets");

                    b.Navigation("UserBillings");

                    b.Navigation("UserShippings");

                    b.Navigation("UserStores");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Shop.Domain.Models.UserStore", b =>
                {
                    b.Navigation("ProductStockPrices");
                });

            modelBuilder.Entity("Shop.Domain.Models.Wallet", b =>
                {
                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("Shop.Domain.Models.WalletType", b =>
                {
                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}

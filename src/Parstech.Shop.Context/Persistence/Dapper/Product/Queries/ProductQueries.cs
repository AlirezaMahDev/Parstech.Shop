using Parstech.Shop.Context.Application.Dapper.Product.Queries;

namespace Parstech.Shop.Context.Persistence.Dapper.Product.Queries;

public class ProductQueries : IProductQueries
{
    public string GetListPagingByGroup => "SELECT dbo.Product.Name,dbo.Product.SingleSale, dbo.Product.LatinName, dbo.Product.Code, dbo.Product.ShortDescription, dbo.Product.ShortLink, dbo.Product.TypeId, dbo.ProductStockPrice.Id, dbo.ProductStockPrice.ProductId, dbo.ProductStockPrice.SalePrice,dbo.ProductStockPrice.DiscountPrice, dbo.ProductStockPrice.StockStatus, dbo.ProductStockPrice.Quantity, dbo.ProductStockPrice.MaximumSaleInOrder,dbo.Brand.BrandId,dbo.Brand.BrandTitle,dbo.Brand.LatinBrandTitle,dbo.UserStore.LatinStoreName, dbo.ProductStockPrice.StoreId, dbo.ProductStockPrice.RepId,dbo.Categury.GroupTitle,dbo.UserStore.StoreName FROM dbo.Product INNER JOIN dbo.ProductStockPrice ON dbo.Product.Id = dbo.ProductStockPrice.ProductId INNER JOIN dbo.UserStore ON dbo.ProductStockPrice.StoreId = dbo.UserStore.Id INNER JOIN dbo.ProductCategury ON dbo.Product.Id = dbo.ProductCategury.ProductId INNER JOIN dbo.Categury ON dbo.ProductCategury.CateguryId = dbo.Categury.GroupId INNER JOIN dbo.Brand ON dbo.Product.BrandId = dbo.Brand.BrandId where Categury.LatinGroupTitle=@categuryLatinName and TypeId!=3 and dbo.Product.IsActive=1 ORDER BY CreateDate Desc OFFSET @skip ROWS FETCH NEXT @take ROWS ONLY";
    public string GetListByGroup => "SELECT dbo.Product.Name,dbo.Product.SingleSale, dbo.Product.LatinName, dbo.Product.Code, dbo.Product.ShortDescription, dbo.Product.ShortLink, dbo.Product.TypeId, dbo.ProductStockPrice.Id, dbo.ProductStockPrice.ProductId, dbo.ProductStockPrice.SalePrice,dbo.ProductStockPrice.DiscountPrice, dbo.ProductStockPrice.StockStatus, dbo.ProductStockPrice.Quantity, dbo.ProductStockPrice.MaximumSaleInOrder, dbo.ProductStockPrice.StoreId, dbo.ProductStockPrice.RepId,dbo.Categury.GroupTitle,dbo.UserStore.StoreName FROM dbo.Product INNER JOIN dbo.ProductStockPrice ON dbo.Product.Id = dbo.ProductStockPrice.ProductId INNER JOIN dbo.UserStore ON dbo.ProductStockPrice.StoreId = dbo.UserStore.Id INNER JOIN dbo.ProductCategury ON dbo.Product.Id = dbo.ProductCategury.ProductId INNER JOIN dbo.Categury ON dbo.ProductCategury.CateguryId = dbo.Categury.GroupId where Categury.LatinGroupTitle=@categuryLatinName and TypeId!=3 ORDER BY CreateDate Desc";
    public string GetLastListByGroup => "SELECT dbo.Product.Name,dbo.Product.SingleSale, dbo.Product.LatinName, dbo.Product.Code, dbo.Product.ShortDescription, dbo.Product.ShortLink, dbo.Product.TypeId, dbo.ProductStockPrice.Id, dbo.ProductStockPrice.ProductId, dbo.ProductStockPrice.SalePrice,dbo.ProductStockPrice.DiscountPrice,dbo.ProductStockPrice.DiscountDate, dbo.ProductStockPrice.StockStatus, dbo.ProductStockPrice.Quantity, dbo.ProductStockPrice.MaximumSaleInOrder, dbo.ProductStockPrice.StoreId, dbo.ProductStockPrice.RepId,dbo.Categury.GroupTitle,dbo.UserStore.StoreName FROM dbo.Product INNER JOIN dbo.ProductStockPrice ON dbo.Product.Id = dbo.ProductStockPrice.ProductId INNER JOIN dbo.UserStore ON dbo.ProductStockPrice.StoreId = dbo.UserStore.Id INNER JOIN dbo.ProductCategury ON dbo.Product.Id = dbo.ProductCategury.ProductId INNER JOIN dbo.Categury ON dbo.ProductCategury.CateguryId = dbo.Categury.GroupId where Categury.LatinGroupTitle=@categuryLatinName and TypeId!=3 ORDER BY CreateDate Desc OFFSET 0 ROWS FETCH NEXT 15 ROWS ONLY";
    public string GetLastListDiscountByGroup => "SELECT dbo.Product.Name,dbo.Product.SingleSale, dbo.Product.LatinName, dbo.Product.Code, dbo.Product.ShortDescription, dbo.Product.ShortLink, dbo.Product.TypeId, dbo.ProductStockPrice.Id, dbo.ProductStockPrice.ProductId, dbo.ProductStockPrice.SalePrice,dbo.ProductStockPrice.DiscountPrice,dbo.ProductStockPrice.DiscountDate, dbo.ProductStockPrice.StockStatus, dbo.ProductStockPrice.Quantity, dbo.ProductStockPrice.MaximumSaleInOrder, dbo.ProductStockPrice.StoreId, dbo.ProductStockPrice.RepId,dbo.UserStore.StoreName FROM dbo.Product INNER JOIN dbo.ProductStockPrice ON dbo.Product.Id = dbo.ProductStockPrice.ProductId INNER JOIN dbo.UserStore ON dbo.ProductStockPrice.StoreId = dbo.UserStore.Id where ProductStockPrice.DiscountPrice!=0 and TypeId!=3 and dbo.Product.IsActive=1 ORDER BY CreateDate Desc OFFSET 0 ROWS FETCH NEXT 20 ROWS ONLY";
    public string GetMainImage => "select*from ProductGallery where ProductId=@productId order by IsMain desc";
    public string GetAllStoreForProduct => "SELECT dbo.Product.Name,dbo.Product.SingleSale, dbo.Product.LatinName, dbo.Product.Code, dbo.Product.ShortDescription, dbo.Product.ShortLink, dbo.Product.TypeId, dbo.ProductStockPrice.Id, dbo.ProductStockPrice.ProductId, dbo.ProductStockPrice.SalePrice,dbo.ProductStockPrice.DiscountPrice, dbo.ProductStockPrice.StockStatus, dbo.ProductStockPrice.Quantity, dbo.ProductStockPrice.MaximumSaleInOrder, dbo.ProductStockPrice.StoreId, dbo.ProductStockPrice.RepId,dbo.Categury.GroupTitle,dbo.UserStore.StoreName FROM dbo.Product INNER JOIN dbo.ProductStockPrice ON dbo.Product.Id = dbo.ProductStockPrice.ProductId INNER JOIN dbo.UserStore ON dbo.ProductStockPrice.StoreId = dbo.UserStore.Id INNER JOIN dbo.ProductCategury ON dbo.Product.Id = dbo.ProductCategury.ProductId INNER JOIN dbo.Categury ON dbo.ProductCategury.CateguryId = dbo.Categury.GroupId where Code LIKE '%@code%' and TypeId!=3";

    public string GetFirstVariation => "SELECT Product.Name,dbo.Product.SingleSale, Product.LatinName, Product.Code, Product.ShortDescription, Product.ShortLink, Product.TypeId, ProductStockPrice.Id, ProductStockPrice.ProductId, ProductStockPrice.SalePrice, ProductStockPrice.DiscountPrice, ProductStockPrice.StockStatus, ProductStockPrice.Quantity, ProductStockPrice.MaximumSaleInOrder, ProductStockPrice.StoreId, ProductStockPrice.RepId,ProductStockPrice.CateguryOfUserId,ProductStockPrice.CateguryOfUserType FROM Product INNER JOIN  ProductStockPrice ON Product.Id = ProductStockPrice.ProductId where ParentId=@parentId ";
    public string GetOneProduct => "SELECT dbo.Product.*, dbo.ProductStockPrice.* FROM dbo.Product INNER JOIN dbo.ProductStockPrice ON dbo.Product.Id = dbo.ProductStockPrice.ProductId where Product.Id=@productId ";
    public string GetListPagingByRep => "SELECT dbo.Product.Name,dbo.Product.SingleSale, dbo.Product.LatinName, dbo.Product.Code, dbo.Product.ShortDescription, dbo.Product.ShortLink, dbo.Product.TypeId, dbo.ProductStockPrice.Id, dbo.ProductStockPrice.ProductId, dbo.ProductStockPrice.SalePrice,dbo.ProductStockPrice.DiscountPrice, dbo.ProductStockPrice.StockStatus, dbo.ProductStockPrice.Quantity, dbo.ProductStockPrice.MaximumSaleInOrder,dbo.Brand.BrandId,dbo.Brand.BrandTitle,dbo.Brand.LatinBrandTitle,dbo.UserStore.LatinStoreName, dbo.ProductStockPrice.StoreId, dbo.ProductStockPrice.RepId ,dbo.UserStore.StoreName FROM dbo.Product INNER JOIN dbo.ProductStockPrice ON dbo.Product.Id = dbo.ProductStockPrice.ProductId INNER JOIN dbo.UserStore ON dbo.ProductStockPrice.StoreId = dbo.UserStore.Id  INNER JOIN dbo.Brand ON dbo.Product.BrandId = dbo.Brand.BrandId where ProductStockPrice.RepId=@rep and TypeId!=3  ORDER BY CreateDate Desc OFFSET @skip ROWS FETCH NEXT @take ROWS ONLY";
    public string GetListPagingByStore => "SELECT dbo.Product.Name,dbo.Product.SingleSale, dbo.Product.LatinName, dbo.Product.Code, dbo.Product.ShortDescription, dbo.Product.ShortLink, dbo.Product.TypeId, dbo.ProductStockPrice.Id, dbo.ProductStockPrice.ProductId, dbo.ProductStockPrice.SalePrice,dbo.ProductStockPrice.DiscountPrice, dbo.ProductStockPrice.StockStatus, dbo.ProductStockPrice.Quantity, dbo.ProductStockPrice.MaximumSaleInOrder,dbo.Brand.BrandId,dbo.Brand.BrandTitle,dbo.Brand.LatinBrandTitle,dbo.UserStore.LatinStoreName, dbo.ProductStockPrice.StoreId, dbo.ProductStockPrice.RepId,dbo.UserStore.StoreName FROM dbo.Product INNER JOIN dbo.ProductStockPrice ON dbo.Product.Id = dbo.ProductStockPrice.ProductId INNER JOIN dbo.UserStore ON dbo.ProductStockPrice.StoreId = dbo.UserStore.Id INNER JOIN dbo.Brand ON dbo.Product.BrandId = dbo.Brand.BrandId where ProductStockPrice.StoreId=@store and TypeId!=3  ORDER BY CreateDate Desc OFFSET @skip ROWS FETCH NEXT @take ROWS ONLY";
    public string GetAllListPaging => "SELECT dbo.Product.Name,dbo.Product.SingleSale, dbo.Product.LatinName, dbo.Product.Code, dbo.Product.ShortDescription, dbo.Product.ShortLink, dbo.Product.TypeId, dbo.ProductStockPrice.Id, dbo.ProductStockPrice.ProductId, dbo.ProductStockPrice.SalePrice,dbo.ProductStockPrice.DiscountPrice, dbo.ProductStockPrice.StockStatus, dbo.ProductStockPrice.Quantity, dbo.ProductStockPrice.MaximumSaleInOrder,dbo.Brand.BrandId,dbo.Brand.BrandTitle,dbo.Brand.LatinBrandTitle,dbo.UserStore.LatinStoreName, dbo.ProductStockPrice.StoreId, dbo.ProductStockPrice.RepId,dbo.UserStore.StoreName FROM dbo.Product INNER JOIN dbo.ProductStockPrice ON dbo.Product.Id = dbo.ProductStockPrice.ProductId INNER JOIN dbo.UserStore ON dbo.ProductStockPrice.StoreId = dbo.UserStore.Id INNER JOIN dbo.Brand ON dbo.Product.BrandId = dbo.Brand.BrandId where TypeId!=3 and dbo.Product.IsActive=1 ORDER BY CreateDate Desc OFFSET @skip ROWS FETCH NEXT @take ROWS ONLY";
    public string GetListByRep => "SELECT dbo.Product.Name,dbo.Product.SingleSale, dbo.Product.LatinName, dbo.Product.Code, dbo.Product.ShortDescription, dbo.Product.ShortLink, dbo.Product.TypeId, dbo.ProductStockPrice.Id, dbo.ProductStockPrice.ProductId, dbo.ProductStockPrice.SalePrice,dbo.ProductStockPrice.DiscountPrice, dbo.ProductStockPrice.StockStatus, dbo.ProductStockPrice.Quantity, dbo.ProductStockPrice.MaximumSaleInOrder,dbo.Brand.BrandId,dbo.Brand.BrandTitle,dbo.Brand.LatinBrandTitle,dbo.UserStore.LatinStoreName, dbo.ProductStockPrice.StoreId, dbo.ProductStockPrice.RepId,dbo.UserStore.StoreName FROM dbo.Product INNER JOIN dbo.ProductStockPrice ON dbo.Product.Id = dbo.ProductStockPrice.ProductId INNER JOIN dbo.UserStore ON dbo.ProductStockPrice.StoreId = dbo.UserStore.Id INNER JOIN dbo.Brand ON dbo.Product.BrandId = dbo.Brand.BrandId where ProductStockPrice.RepId=@Rep AND dbo.Product.TypeId!=3 ORDER BY CreateDate Desc ";
    public string GetListByStore => "SELECT dbo.Product.Name,dbo.Product.SingleSale, dbo.Product.LatinName, dbo.Product.Code, dbo.Product.ShortDescription, dbo.Product.ShortLink, dbo.Product.TypeId, dbo.ProductStockPrice.Id, dbo.ProductStockPrice.ProductId, dbo.ProductStockPrice.SalePrice,dbo.ProductStockPrice.DiscountPrice, dbo.ProductStockPrice.StockStatus, dbo.ProductStockPrice.Quantity, dbo.ProductStockPrice.MaximumSaleInOrder,dbo.Brand.BrandId,dbo.Brand.BrandTitle,dbo.Brand.LatinBrandTitle,dbo.UserStore.LatinStoreName, dbo.ProductStockPrice.StoreId, dbo.ProductStockPrice.RepId,dbo.Categury.GroupTitle,dbo.UserStore.StoreName FROM dbo.Product INNER JOIN dbo.ProductStockPrice ON dbo.Product.Id = dbo.ProductStockPrice.ProductId INNER JOIN dbo.UserStore ON dbo.ProductStockPrice.StoreId = dbo.UserStore.Id INNER JOIN dbo.ProductCategury ON dbo.Product.Id = dbo.ProductCategury.ProductId INNER JOIN dbo.Categury ON dbo.ProductCategury.CateguryId = dbo.Categury.GroupId INNER JOIN dbo.Brand ON dbo.Product.BrandId = dbo.Brand.BrandId where ProductStockPrice.StoreId=@store ORDER BY CreateDate Desc ";
    public string GetListVariationByParentId => "SELECT dbo.Product.Name,dbo.Product.SingleSale, dbo.Product.LatinName, dbo.Product.Code, dbo.Product.ShortDescription, dbo.Product.ShortLink, dbo.Product.TypeId, dbo.ProductStockPrice.Id, dbo.ProductStockPrice.ProductId, dbo.ProductStockPrice.SalePrice,dbo.ProductStockPrice.DiscountPrice, dbo.ProductStockPrice.StockStatus, dbo.ProductStockPrice.Quantity, dbo.ProductStockPrice.MaximumSaleInOrder,dbo.UserStore.LatinStoreName, dbo.ProductStockPrice.StoreId, dbo.ProductStockPrice.RepId,dbo.UserStore.StoreName FROM dbo.Product INNER JOIN dbo.ProductStockPrice ON dbo.Product.Id = dbo.ProductStockPrice.ProductId INNER JOIN dbo.UserStore ON dbo.ProductStockPrice.StoreId = dbo.UserStore.Id  where ProductStockPrice.RepId=@rep and  Product.ParentId=@parentId ";
    public string GetProductStockPriceById => "SELECT* from ProductStockPrice where Id=@id ";
    public string GetOneProductFull => "SELECT* from Product where Id=@id";
        
    public string GetProductForAdmin => "SELECT * FROM dbo.Product where Id=@productId ";
    public string GetChildsForAdmin => "SELECT dbo.Product.Name,dbo.Product.SingleSale, dbo.Product.LatinName, dbo.Product.Code, dbo.Product.ShortDescription, dbo.Product.ShortLink, dbo.Product.TypeId, dbo.ProductStockPrice.Id, dbo.Product.Id AS ProductId, dbo.ProductStockPrice.SalePrice,dbo.ProductStockPrice.DiscountPrice, dbo.ProductStockPrice.StockStatus, dbo.ProductStockPrice.Quantity, dbo.ProductStockPrice.MaximumSaleInOrder,dbo.UserStore.LatinStoreName, dbo.ProductStockPrice.StoreId, dbo.ProductStockPrice.RepId,dbo.UserStore.StoreName FROM dbo.Product LEFT JOIN dbo.ProductStockPrice ON dbo.Product.Id = dbo.ProductStockPrice.ProductId LEFT JOIN dbo.UserStore ON dbo.ProductStockPrice.StoreId = dbo.UserStore.Id  where  Product.ParentId=@productId ";
    public string GetProductStocksByProductIdForAdmin => "SELECT * FROM dbo.ProductStockPrice where ProductId=@productId ";
    public string GetProductStockPriceByRepId => "SELECT * FROM dbo.ProductStockPrice where RepId=@repId ";


    public string GetProductsPagingForAdmin => "SELECT dbo.Product.Id,dbo.Product.IsActive,dbo.Product.CreateDate, dbo.Product.Name,dbo.Product.SingleSale, dbo.Product.LatinName, dbo.Product.Code, dbo.Product.ShortDescription, dbo.Product.ShortLink, dbo.Product.TypeId FROM dbo.Product where TypeId!=3  ORDER BY CreateDate Desc OFFSET @skip ROWS FETCH NEXT @take ROWS ONLY";
    public string GetAllList => "SELECT dbo.Product.Id,dbo.Product.IsActive,dbo.Product.CreateDate, dbo.Product.Name,dbo.Product.SingleSale, dbo.Product.LatinName, dbo.Product.Code, dbo.Product.ShortDescription, dbo.Product.ShortLink, dbo.Product.TypeId FROM dbo.Product where dbo.Product.IsActive=1 ORDER BY CreateDate Desc";


}
"use strict";var Ds=Object.defineProperty;var Vs=(e,s,t)=>s in e?Ds(e,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[s]=t;var h=(e,s,t)=>Vs(e,typeof s!="symbol"?s+"":s,t);var jn=typeof global=="object"&&global&&global.Object===Object&&global,qs=typeof self=="object"&&self&&self.Object===Object&&self,J=jn||qs||Function("return this")(),j=J.Symbol,Jn=Object.prototype,js=Jn.hasOwnProperty,Js=Jn.toString,Tt=j?j.toStringTag:void 0;function zs(e){var s=js.call(e,Tt),t=e[Tt];try{e[Tt]=void 0;var n=!0}catch{}var r=Js.call(e);return n&&(s?e[Tt]=t:delete e[Tt]),r}var Us=Object.prototype,Ws=Us.toString;function Gs(e){return Ws.call(e)}var Ks="[object Null]",Hs="[object Undefined]",Ke=j?j.toStringTag:void 0;function bt(e){return e==null?e===void 0?Hs:Ks:Ke&&Ke in Object(e)?zs(e):Gs(e)}function et(e){return e!=null&&typeof e=="object"}var Ys="[object Symbol]";function Fe(e){return typeof e=="symbol"||et(e)&&bt(e)==Ys}function Xs(e,s){for(var t=-1,n=e==null?0:e.length,r=Array(n);++t<n;)r[t]=s(e[t],t,e);return r}var nt=Array.isArray,He=j?j.prototype:void 0,Ye=He?He.toString:void 0;function zn(e){if(typeof e=="string")return e;if(nt(e))return Xs(e,zn)+"";if(Fe(e))return Ye?Ye.call(e):"";var s=e+"";return s=="0"&&1/e==-1/0?"-0":s}function st(e){var s=typeof e;return e!=null&&(s=="object"||s=="function")}var Zs="[object AsyncFunction]",Qs="[object Function]",tr="[object GeneratorFunction]",er="[object Proxy]";function Un(e){if(!st(e))return!1;var s=bt(e);return s==Qs||s==tr||s==Zs||s==er}var ae=J["__core-js_shared__"],Xe=function(){var e=/[^.]+$/.exec(ae&&ae.keys&&ae.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();function nr(e){return!!Xe&&Xe in e}var sr=Function.prototype,rr=sr.toString;function ht(e){if(e!=null){try{return rr.call(e)}catch{}try{return e+""}catch{}}return""}var ir=/[\\^$.*+?()[\]{}|]/g,or=/^\[object .+?Constructor\]$/,ar=Function.prototype,lr=Object.prototype,cr=ar.toString,ur=lr.hasOwnProperty,hr=RegExp("^"+cr.call(ur).replace(ir,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function fr(e){if(!st(e)||nr(e))return!1;var s=Un(e)?hr:or;return s.test(ht(e))}function dr(e,s){return e==null?void 0:e[s]}function ft(e,s){var t=dr(e,s);return fr(t)?t:void 0}var Ae=ft(J,"WeakMap"),Ze=Object.create,gr=function(){function e(){}return function(s){if(!st(s))return{};if(Ze)return Ze(s);e.prototype=s;var t=new e;return e.prototype=void 0,t}}();function pr(e,s){var t=-1,n=e.length;for(s||(s=Array(n));++t<n;)s[t]=e[t];return s}var Qe=function(){try{var e=ft(Object,"defineProperty");return e({},"",{}),e}catch{}}();function mr(e,s){for(var t=-1,n=e==null?0:e.length;++t<n&&s(e[t],t,e)!==!1;);return e}var _r=9007199254740991,yr=/^(?:0|[1-9]\d*)$/;function wr(e,s){var t=typeof e;return s=s??_r,!!s&&(t=="number"||t!="symbol"&&yr.test(e))&&e>-1&&e%1==0&&e<s}function Wn(e,s,t){s=="__proto__"&&Qe?Qe(e,s,{configurable:!0,enumerable:!0,value:t,writable:!0}):e[s]=t}function Ie(e,s){return e===s||e!==e&&s!==s}var Pr=Object.prototype,vr=Pr.hasOwnProperty;function Gn(e,s,t){var n=e[s];(!(vr.call(e,s)&&Ie(n,t))||t===void 0&&!(s in e))&&Wn(e,s,t)}function ee(e,s,t,n){var r=!t;t||(t={});for(var i=-1,o=s.length;++i<o;){var a=s[i],l=void 0;l===void 0&&(l=e[a]),r?Wn(t,a,l):Gn(t,a,l)}return t}var br=9007199254740991;function Kn(e){return typeof e=="number"&&e>-1&&e%1==0&&e<=br}function Hn(e){return e!=null&&Kn(e.length)&&!Un(e)}var Ar=Object.prototype;function $e(e){var s=e&&e.constructor,t=typeof s=="function"&&s.prototype||Ar;return e===t}function Sr(e,s){for(var t=-1,n=Array(e);++t<e;)n[t]=s(t);return n}var Tr="[object Arguments]";function tn(e){return et(e)&&bt(e)==Tr}var Yn=Object.prototype,Er=Yn.hasOwnProperty,xr=Yn.propertyIsEnumerable,Or=tn(function(){return arguments}())?tn:function(e){return et(e)&&Er.call(e,"callee")&&!xr.call(e,"callee")};function Rr(){return!1}var Xn=typeof exports=="object"&&exports&&!exports.nodeType&&exports,en=Xn&&typeof module=="object"&&module&&!module.nodeType&&module,Mr=en&&en.exports===Xn,nn=Mr?J.Buffer:void 0,kr=nn?nn.isBuffer:void 0,Yt=kr||Rr,Cr="[object Arguments]",Nr="[object Array]",Br="[object Boolean]",Fr="[object Date]",Ir="[object Error]",$r="[object Function]",Lr="[object Map]",Dr="[object Number]",Vr="[object Object]",qr="[object RegExp]",jr="[object Set]",Jr="[object String]",zr="[object WeakMap]",Ur="[object ArrayBuffer]",Wr="[object DataView]",Gr="[object Float32Array]",Kr="[object Float64Array]",Hr="[object Int8Array]",Yr="[object Int16Array]",Xr="[object Int32Array]",Zr="[object Uint8Array]",Qr="[object Uint8ClampedArray]",ti="[object Uint16Array]",ei="[object Uint32Array]",S={};S[Gr]=S[Kr]=S[Hr]=S[Yr]=S[Xr]=S[Zr]=S[Qr]=S[ti]=S[ei]=!0;S[Cr]=S[Nr]=S[Ur]=S[Br]=S[Wr]=S[Fr]=S[Ir]=S[$r]=S[Lr]=S[Dr]=S[Vr]=S[qr]=S[jr]=S[Jr]=S[zr]=!1;function ni(e){return et(e)&&Kn(e.length)&&!!S[bt(e)]}function Le(e){return function(s){return e(s)}}var Zn=typeof exports=="object"&&exports&&!exports.nodeType&&exports,Mt=Zn&&typeof module=="object"&&module&&!module.nodeType&&module,si=Mt&&Mt.exports===Zn,le=si&&jn.process,Pt=function(){try{var e=Mt&&Mt.require&&Mt.require("util").types;return e||le&&le.binding&&le.binding("util")}catch{}}(),sn=Pt&&Pt.isTypedArray,Qn=sn?Le(sn):ni,ri=Object.prototype,ii=ri.hasOwnProperty;function ts(e,s){var t=nt(e),n=!t&&Or(e),r=!t&&!n&&Yt(e),i=!t&&!n&&!r&&Qn(e),o=t||n||r||i,a=o?Sr(e.length,String):[],l=a.length;for(var c in e)(s||ii.call(e,c))&&!(o&&(c=="length"||r&&(c=="offset"||c=="parent")||i&&(c=="buffer"||c=="byteLength"||c=="byteOffset")||wr(c,l)))&&a.push(c);return a}function es(e,s){return function(t){return e(s(t))}}var oi=es(Object.keys,Object),ai=Object.prototype,li=ai.hasOwnProperty;function ci(e){if(!$e(e))return oi(e);var s=[];for(var t in Object(e))li.call(e,t)&&t!="constructor"&&s.push(t);return s}function ns(e){return Hn(e)?ts(e):ci(e)}function ui(e){var s=[];if(e!=null)for(var t in Object(e))s.push(t);return s}var hi=Object.prototype,fi=hi.hasOwnProperty;function di(e){if(!st(e))return ui(e);var s=$e(e),t=[];for(var n in e)n=="constructor"&&(s||!fi.call(e,n))||t.push(n);return t}function gi(e){return Hn(e)?ts(e,!0):di(e)}var pi=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,mi=/^\w*$/;function _i(e,s){if(nt(e))return!1;var t=typeof e;return t=="number"||t=="symbol"||t=="boolean"||e==null||Fe(e)?!0:mi.test(e)||!pi.test(e)||s!=null&&e in Object(s)}var It=ft(Object,"create");function yi(){this.__data__=It?It(null):{},this.size=0}function wi(e){var s=this.has(e)&&delete this.__data__[e];return this.size-=s?1:0,s}var Pi="__lodash_hash_undefined__",vi=Object.prototype,bi=vi.hasOwnProperty;function Ai(e){var s=this.__data__;if(It){var t=s[e];return t===Pi?void 0:t}return bi.call(s,e)?s[e]:void 0}var Si=Object.prototype,Ti=Si.hasOwnProperty;function Ei(e){var s=this.__data__;return It?s[e]!==void 0:Ti.call(s,e)}var xi="__lodash_hash_undefined__";function Oi(e,s){var t=this.__data__;return this.size+=this.has(e)?0:1,t[e]=It&&s===void 0?xi:s,this}function ct(e){var s=-1,t=e==null?0:e.length;for(this.clear();++s<t;){var n=e[s];this.set(n[0],n[1])}}ct.prototype.clear=yi;ct.prototype.delete=wi;ct.prototype.get=Ai;ct.prototype.has=Ei;ct.prototype.set=Oi;function Ri(){this.__data__=[],this.size=0}function ne(e,s){for(var t=e.length;t--;)if(Ie(e[t][0],s))return t;return-1}var Mi=Array.prototype,ki=Mi.splice;function Ci(e){var s=this.__data__,t=ne(s,e);if(t<0)return!1;var n=s.length-1;return t==n?s.pop():ki.call(s,t,1),--this.size,!0}function Ni(e){var s=this.__data__,t=ne(s,e);return t<0?void 0:s[t][1]}function Bi(e){return ne(this.__data__,e)>-1}function Fi(e,s){var t=this.__data__,n=ne(t,e);return n<0?(++this.size,t.push([e,s])):t[n][1]=s,this}function H(e){var s=-1,t=e==null?0:e.length;for(this.clear();++s<t;){var n=e[s];this.set(n[0],n[1])}}H.prototype.clear=Ri;H.prototype.delete=Ci;H.prototype.get=Ni;H.prototype.has=Bi;H.prototype.set=Fi;var $t=ft(J,"Map");function Ii(){this.size=0,this.__data__={hash:new ct,map:new($t||H),string:new ct}}function $i(e){var s=typeof e;return s=="string"||s=="number"||s=="symbol"||s=="boolean"?e!=="__proto__":e===null}function se(e,s){var t=e.__data__;return $i(s)?t[typeof s=="string"?"string":"hash"]:t.map}function Li(e){var s=se(this,e).delete(e);return this.size-=s?1:0,s}function Di(e){return se(this,e).get(e)}function Vi(e){return se(this,e).has(e)}function qi(e,s){var t=se(this,e),n=t.size;return t.set(e,s),this.size+=t.size==n?0:1,this}function Y(e){var s=-1,t=e==null?0:e.length;for(this.clear();++s<t;){var n=e[s];this.set(n[0],n[1])}}Y.prototype.clear=Ii;Y.prototype.delete=Li;Y.prototype.get=Di;Y.prototype.has=Vi;Y.prototype.set=qi;var ji="Expected a function";function De(e,s){if(typeof e!="function"||s!=null&&typeof s!="function")throw new TypeError(ji);var t=function(){var n=arguments,r=s?s.apply(this,n):n[0],i=t.cache;if(i.has(r))return i.get(r);var o=e.apply(this,n);return t.cache=i.set(r,o)||i,o};return t.cache=new(De.Cache||Y),t}De.Cache=Y;var Ji=500;function zi(e){var s=De(e,function(n){return t.size===Ji&&t.clear(),n}),t=s.cache;return s}var Ui=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Wi=/\\(\\)?/g,Gi=zi(function(e){var s=[];return e.charCodeAt(0)===46&&s.push(""),e.replace(Ui,function(t,n,r,i){s.push(r?i.replace(Wi,"$1"):n||t)}),s});function Ki(e){return e==null?"":zn(e)}function ss(e,s){return nt(e)?e:_i(e,s)?[e]:Gi(Ki(e))}function rs(e){if(typeof e=="string"||Fe(e))return e;var s=e+"";return s=="0"&&1/e==-1/0?"-0":s}function is(e,s){s=ss(s,e);for(var t=0,n=s.length;e!=null&&t<n;)e=e[rs(s[t++])];return t&&t==n?e:void 0}function Hi(e,s,t){var n=e==null?void 0:is(e,s);return n===void 0?t:n}function os(e,s){for(var t=-1,n=s.length,r=e.length;++t<n;)e[r+t]=s[t];return e}var as=es(Object.getPrototypeOf,Object);function Yi(e,s,t){var n=-1,r=e.length;s<0&&(s=-s>r?0:r+s),t=t>r?r:t,t<0&&(t+=r),r=s>t?0:t-s>>>0,s>>>=0;for(var i=Array(r);++n<r;)i[n]=e[n+s];return i}function Xi(){this.__data__=new H,this.size=0}function Zi(e){var s=this.__data__,t=s.delete(e);return this.size=s.size,t}function Qi(e){return this.__data__.get(e)}function to(e){return this.__data__.has(e)}var eo=200;function no(e,s){var t=this.__data__;if(t instanceof H){var n=t.__data__;if(!$t||n.length<eo-1)return n.push([e,s]),this.size=++t.size,this;t=this.__data__=new Y(n)}return t.set(e,s),this.size=t.size,this}function G(e){var s=this.__data__=new H(e);this.size=s.size}G.prototype.clear=Xi;G.prototype.delete=Zi;G.prototype.get=Qi;G.prototype.has=to;G.prototype.set=no;function so(e,s){return e&&ee(s,ns(s),e)}function ro(e,s){return e&&ee(s,gi(s),e)}var ls=typeof exports=="object"&&exports&&!exports.nodeType&&exports,rn=ls&&typeof module=="object"&&module&&!module.nodeType&&module,io=rn&&rn.exports===ls,on=io?J.Buffer:void 0,an=on?on.allocUnsafe:void 0;function oo(e,s){var t=e.length,n=an?an(t):new e.constructor(t);return e.copy(n),n}function ao(e,s){for(var t=-1,n=e==null?0:e.length,r=0,i=[];++t<n;){var o=e[t];s(o,t,e)&&(i[r++]=o)}return i}function cs(){return[]}var lo=Object.prototype,co=lo.propertyIsEnumerable,ln=Object.getOwnPropertySymbols,Ve=ln?function(e){return e==null?[]:(e=Object(e),ao(ln(e),function(s){return co.call(e,s)}))}:cs;function uo(e,s){return ee(e,Ve(e),s)}var ho=Object.getOwnPropertySymbols,fo=ho?function(e){for(var s=[];e;)os(s,Ve(e)),e=as(e);return s}:cs;function go(e,s){return ee(e,fo(e),s)}function po(e,s,t){var n=s(e);return nt(e)?n:os(n,t(e))}function Se(e){return po(e,ns,Ve)}var Te=ft(J,"DataView"),Ee=ft(J,"Promise"),xe=ft(J,"Set"),cn="[object Map]",mo="[object Object]",un="[object Promise]",hn="[object Set]",fn="[object WeakMap]",dn="[object DataView]",_o=ht(Te),yo=ht($t),wo=ht(Ee),Po=ht(xe),vo=ht(Ae),L=bt;(Te&&L(new Te(new ArrayBuffer(1)))!=dn||$t&&L(new $t)!=cn||Ee&&L(Ee.resolve())!=un||xe&&L(new xe)!=hn||Ae&&L(new Ae)!=fn)&&(L=function(e){var s=bt(e),t=s==mo?e.constructor:void 0,n=t?ht(t):"";if(n)switch(n){case _o:return dn;case yo:return cn;case wo:return un;case Po:return hn;case vo:return fn}return s});var bo=Object.prototype,Ao=bo.hasOwnProperty;function So(e){var s=e.length,t=new e.constructor(s);return s&&typeof e[0]=="string"&&Ao.call(e,"index")&&(t.index=e.index,t.input=e.input),t}var Xt=J.Uint8Array;function To(e){var s=new e.constructor(e.byteLength);return new Xt(s).set(new Xt(e)),s}function Eo(e,s){var t=e.buffer;return new e.constructor(t,e.byteOffset,e.byteLength)}var xo=/\w*$/;function Oo(e){var s=new e.constructor(e.source,xo.exec(e));return s.lastIndex=e.lastIndex,s}var gn=j?j.prototype:void 0,pn=gn?gn.valueOf:void 0;function Ro(e){return pn?Object(pn.call(e)):{}}function Mo(e,s){var t=e.buffer;return new e.constructor(t,e.byteOffset,e.length)}var ko="[object Boolean]",Co="[object Date]",No="[object Map]",Bo="[object Number]",Fo="[object RegExp]",Io="[object Set]",$o="[object String]",Lo="[object Symbol]",Do="[object ArrayBuffer]",Vo="[object DataView]",qo="[object Float32Array]",jo="[object Float64Array]",Jo="[object Int8Array]",zo="[object Int16Array]",Uo="[object Int32Array]",Wo="[object Uint8Array]",Go="[object Uint8ClampedArray]",Ko="[object Uint16Array]",Ho="[object Uint32Array]";function Yo(e,s,t){var n=e.constructor;switch(s){case Do:return To(e);case ko:case Co:return new n(+e);case Vo:return Eo(e);case qo:case jo:case Jo:case zo:case Uo:case Wo:case Go:case Ko:case Ho:return Mo(e);case No:return new n;case Bo:case $o:return new n(e);case Fo:return Oo(e);case Io:return new n;case Lo:return Ro(e)}}function Xo(e){return typeof e.constructor=="function"&&!$e(e)?gr(as(e)):{}}var Zo="[object Map]";function Qo(e){return et(e)&&L(e)==Zo}var mn=Pt&&Pt.isMap,ta=mn?Le(mn):Qo,ea="[object Set]";function na(e){return et(e)&&L(e)==ea}var _n=Pt&&Pt.isSet,sa=_n?Le(_n):na,ra=2,us="[object Arguments]",ia="[object Array]",oa="[object Boolean]",aa="[object Date]",la="[object Error]",hs="[object Function]",ca="[object GeneratorFunction]",ua="[object Map]",ha="[object Number]",fs="[object Object]",fa="[object RegExp]",da="[object Set]",ga="[object String]",pa="[object Symbol]",ma="[object WeakMap]",_a="[object ArrayBuffer]",ya="[object DataView]",wa="[object Float32Array]",Pa="[object Float64Array]",va="[object Int8Array]",ba="[object Int16Array]",Aa="[object Int32Array]",Sa="[object Uint8Array]",Ta="[object Uint8ClampedArray]",Ea="[object Uint16Array]",xa="[object Uint32Array]",b={};b[us]=b[ia]=b[_a]=b[ya]=b[oa]=b[aa]=b[wa]=b[Pa]=b[va]=b[ba]=b[Aa]=b[ua]=b[ha]=b[fs]=b[fa]=b[da]=b[ga]=b[pa]=b[Sa]=b[Ta]=b[Ea]=b[xa]=!0;b[la]=b[hs]=b[ma]=!1;function Ht(e,s,t,n,r,i){var o,a=s&ra;if(o!==void 0)return o;if(!st(e))return e;var l=nt(e);if(l)return o=So(e),pr(e,o);var c=L(e),u=c==hs||c==ca;if(Yt(e))return oo(e);if(c==fs||c==us||u&&!r)return o=u?{}:Xo(e),a?go(e,ro(o,e)):uo(e,so(o,e));if(!b[c])return r?e:{};o=Yo(e,c),i||(i=new G);var f=i.get(e);if(f)return f;i.set(e,o),sa(e)?e.forEach(function(y){o.add(Ht(y,s,t,y,e,i))}):ta(e)&&e.forEach(function(y,w){o.set(w,Ht(y,s,t,w,e,i))});var d=Se,m=l?void 0:d(e);return mr(m||e,function(y,w){m&&(w=y,y=e[w]),Gn(o,w,Ht(y,s,t,w,e,i))}),o}var Oa=4;function Ra(e){return Ht(e,Oa)}var Ma="__lodash_hash_undefined__";function ka(e){return this.__data__.set(e,Ma),this}function Ca(e){return this.__data__.has(e)}function Zt(e){var s=-1,t=e==null?0:e.length;for(this.__data__=new Y;++s<t;)this.add(e[s])}Zt.prototype.add=Zt.prototype.push=ka;Zt.prototype.has=Ca;function Na(e,s){for(var t=-1,n=e==null?0:e.length;++t<n;)if(s(e[t],t,e))return!0;return!1}function Ba(e,s){return e.has(s)}var Fa=1,Ia=2;function ds(e,s,t,n,r,i){var o=t&Fa,a=e.length,l=s.length;if(a!=l&&!(o&&l>a))return!1;var c=i.get(e),u=i.get(s);if(c&&u)return c==s&&u==e;var f=-1,d=!0,m=t&Ia?new Zt:void 0;for(i.set(e,s),i.set(s,e);++f<a;){var y=e[f],w=s[f];if(n)var k=o?n(w,y,f,s,e,i):n(y,w,f,e,s,i);if(k!==void 0){if(k)continue;d=!1;break}if(m){if(!Na(s,function(V,it){if(!Ba(m,it)&&(y===V||r(y,V,t,n,i)))return m.push(it)})){d=!1;break}}else if(!(y===w||r(y,w,t,n,i))){d=!1;break}}return i.delete(e),i.delete(s),d}function $a(e){var s=-1,t=Array(e.size);return e.forEach(function(n,r){t[++s]=[r,n]}),t}function La(e){var s=-1,t=Array(e.size);return e.forEach(function(n){t[++s]=n}),t}var Da=1,Va=2,qa="[object Boolean]",ja="[object Date]",Ja="[object Error]",za="[object Map]",Ua="[object Number]",Wa="[object RegExp]",Ga="[object Set]",Ka="[object String]",Ha="[object Symbol]",Ya="[object ArrayBuffer]",Xa="[object DataView]",yn=j?j.prototype:void 0,ce=yn?yn.valueOf:void 0;function Za(e,s,t,n,r,i,o){switch(t){case Xa:if(e.byteLength!=s.byteLength||e.byteOffset!=s.byteOffset)return!1;e=e.buffer,s=s.buffer;case Ya:return!(e.byteLength!=s.byteLength||!i(new Xt(e),new Xt(s)));case qa:case ja:case Ua:return Ie(+e,+s);case Ja:return e.name==s.name&&e.message==s.message;case Wa:case Ka:return e==s+"";case za:var a=$a;case Ga:var l=n&Da;if(a||(a=La),e.size!=s.size&&!l)return!1;var c=o.get(e);if(c)return c==s;n|=Va,o.set(e,s);var u=ds(a(e),a(s),n,r,i,o);return o.delete(e),u;case Ha:if(ce)return ce.call(e)==ce.call(s)}return!1}var Qa=1,tl=Object.prototype,el=tl.hasOwnProperty;function nl(e,s,t,n,r,i){var o=t&Qa,a=Se(e),l=a.length,c=Se(s),u=c.length;if(l!=u&&!o)return!1;for(var f=l;f--;){var d=a[f];if(!(o?d in s:el.call(s,d)))return!1}var m=i.get(e),y=i.get(s);if(m&&y)return m==s&&y==e;var w=!0;i.set(e,s),i.set(s,e);for(var k=o;++f<l;){d=a[f];var V=e[d],it=s[d];if(n)var Ge=o?n(it,V,d,s,e,i):n(V,it,d,e,s,i);if(!(Ge===void 0?V===it||r(V,it,t,n,i):Ge)){w=!1;break}k||(k=d=="constructor")}if(w&&!k){var Ut=e.constructor,Wt=s.constructor;Ut!=Wt&&"constructor"in e&&"constructor"in s&&!(typeof Ut=="function"&&Ut instanceof Ut&&typeof Wt=="function"&&Wt instanceof Wt)&&(w=!1)}return i.delete(e),i.delete(s),w}var sl=1,wn="[object Arguments]",Pn="[object Array]",Gt="[object Object]",rl=Object.prototype,vn=rl.hasOwnProperty;function il(e,s,t,n,r,i){var o=nt(e),a=nt(s),l=o?Pn:L(e),c=a?Pn:L(s);l=l==wn?Gt:l,c=c==wn?Gt:c;var u=l==Gt,f=c==Gt,d=l==c;if(d&&Yt(e)){if(!Yt(s))return!1;o=!0,u=!1}if(d&&!u)return i||(i=new G),o||Qn(e)?ds(e,s,t,n,r,i):Za(e,s,l,t,n,r,i);if(!(t&sl)){var m=u&&vn.call(e,"__wrapped__"),y=f&&vn.call(s,"__wrapped__");if(m||y){var w=m?e.value():e,k=y?s.value():s;return i||(i=new G),r(w,k,t,n,i)}}return d?(i||(i=new G),nl(e,s,t,n,r,i)):!1}function gs(e,s,t,n,r){return e===s?!0:e==null||s==null||!et(e)&&!et(s)?e!==e&&s!==s:il(e,s,t,n,gs,r)}function ol(e){var s=e==null?0:e.length;return s?e[s-1]:void 0}function al(e,s){return s.length<2?e:is(e,Yi(s,0,-1))}function bn(e,s){return gs(e,s)}function ll(e,s){return s=ss(s,e),e=al(e,s),e==null||delete e[rs(ol(s))]}function cl(e,s){return e==null?!0:ll(e,s)}/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 *//**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */let Oe;try{Oe={window,document}}catch{/* istanbul ignore next -- @preserve */Oe={window:{},document:{}}}var Lt=Oe;/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */function An(){return function e(){e.called=!0}}class vt{constructor(s,t){h(this,"source");h(this,"name");h(this,"path");h(this,"stop");h(this,"off");h(this,"return");this.source=s,this.name=t,this.path=[],this.stop=An(),this.off=An()}}/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */const C=new Array(256).fill("").map((e,s)=>("0"+s.toString(16)).slice(-2));function re(){const[e,s,t,n]=crypto.getRandomValues(new Uint32Array(4));return"e"+C[e>>0&255]+C[e>>8&255]+C[e>>16&255]+C[e>>24&255]+C[s>>0&255]+C[s>>8&255]+C[s>>16&255]+C[s>>24&255]+C[t>>0&255]+C[t>>8&255]+C[t>>16&255]+C[t>>24&255]+C[n>>0&255]+C[n>>8&255]+C[n>>16&255]+C[n>>24&255]}/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */const Re={get(e="normal"){return typeof e!="number"?this[e]||this.normal:e},highest:1e5,high:1e3,normal:0,low:-1e3,lowest:-1e5};function ul(e,s){const t=Re.get(s.priority);let n=0,r=e.length;for(;n<r;){const i=n+r>>1;Re.get(e[i].priority)<t?r=i:n=i+1}e.splice(n,0,s)}/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */const hl="https://ckeditor.com/docs/ckeditor5/latest/support/error-codes.html";class g extends Error{constructor(t,n,r){super(fl(t,r));h(this,"context");h(this,"data");this.name="CKEditorError",this.context=n,this.data=r}is(t){return t==="CKEditorError"}static rethrowUnexpectedError(t,n){if(t.is&&t.is("CKEditorError"))throw t;const r=new g(t.message,n);throw r.stack=t.stack,r}}function Me(e,s){console.warn(...dl(e,s))}function ps(e){return`
Read more: ${hl}#error-${e}`}function fl(e,s){const t=new WeakSet,r=s?` ${JSON.stringify(s,(o,a)=>{if(typeof a=="object"&&a!==null){if(t.has(a))return`[object ${a.constructor.name}]`;t.add(a)}return a})}`:"",i=ps(e);return e+r+i}function dl(e,s){const t=ps(e);return s?[e,s,t]:[e,t]}const gl="44.3.0";/* istanbul ignore next -- @preserve */if(globalThis.CKEDITOR_VERSION)throw new g("ckeditor-duplicated-modules",null);globalThis.CKEDITOR_VERSION=gl;const _t=Symbol("listeningTo"),ke=Symbol("emitterId"),z=Symbol("delegations"),ms=O(Object);function O(e){if(!e)return ms;class s extends e{on(n,r,i){this.listenTo(this,n,r,i)}once(n,r,i){let o=!1;const a=(l,...c)=>{o||(o=!0,l.off(),r.call(this,l,...c))};this.listenTo(this,n,a,i)}off(n,r){this.stopListening(this,n,r)}listenTo(n,r,i,o={}){let a,l;this[_t]||(this[_t]={});const c=this[_t];ue(n)||_s(n);const u=ue(n);(a=c[u])||(a=c[u]={emitter:n,callbacks:{}}),(l=a.callbacks[r])||(l=a.callbacks[r]=[]),l.push(i),wl(this,n,r,i,o)}stopListening(n,r,i){const o=this[_t];let a=n&&ue(n);const l=o&&a?o[a]:void 0,c=l&&r?l.callbacks[r]:void 0;if(!(!o||n&&!l||r&&!c))if(i)he(this,n,r,i),c.indexOf(i)!==-1&&(c.length===1?delete l.callbacks[r]:he(this,n,r,i));else if(c){for(;i=c.pop();)he(this,n,r,i);delete l.callbacks[r]}else if(l){for(r in l.callbacks)this.stopListening(n,r);delete o[a]}else{for(a in o)this.stopListening(o[a].emitter);delete this[_t]}}fire(n,...r){try{const i=n instanceof vt?n:new vt(this,n),o=i.name;let a=yl(this,o);if(i.path.push(this),a){a=a.slice();for(let c=0;c<a.length;c++){const u=a[c].callback;if(u.call(this,i,...r),i.off.called&&(delete i.off.called,this._removeEventListener(o,u)),i.stop.called)break}}const l=this[z];if(l){const c=l.get(o),u=l.get("*");c&&Sn(c,i,r),u&&Sn(u,i,r)}return i.return}catch(i){/* istanbul ignore next -- @preserve */g.rethrowUnexpectedError(i,this)}}delegate(...n){return{to:(r,i)=>{this[z]||(this[z]=new Map),n.forEach(o=>{const a=this[z].get(o);a?a.set(r,i):this[z].set(o,new Map([[r,i]]))})}}}stopDelegating(n,r){if(this[z])if(!n)this[z].clear();else if(!r)this[z].delete(n);else{const i=this[z].get(n);i&&i.delete(r)}}_addEventListener(n,r,i){_l(this,n);const o=Ce(this,n),a=Re.get(i.priority),l={callback:r,priority:a};for(const c of o)ul(c,l)}_removeEventListener(n,r){const i=Ce(this,n);for(const o of i)for(let a=0;a<o.length;a++)o[a].callback==r&&(o.splice(a,1),a--)}}return s}["on","once","off","listenTo","stopListening","fire","delegate","stopDelegating","_addEventListener","_removeEventListener"].forEach(e=>{O[e]=ms.prototype[e]});function pl(e,s){const t=e[_t];return t&&t[s]?t[s].emitter:null}function _s(e,s){e[ke]||(e[ke]=s||re())}function ue(e){return e[ke]}function ys(e){return e._events||Object.defineProperty(e,"_events",{value:{}}),e._events}function ml(){return{callbacks:[],childEvents:[]}}function _l(e,s){const t=ys(e);if(t[s])return;let n=s,r=null;const i=[];for(;n!==""&&!t[n];)t[n]=ml(),i.push(t[n]),r&&t[n].childEvents.push(r),r=n,n=n.substr(0,n.lastIndexOf(":"));if(n!==""){for(const o of i)o.callbacks=t[n].callbacks.slice();t[n].childEvents.push(r)}}function Ce(e,s){const t=ys(e)[s];if(!t)return[];let n=[t.callbacks];for(let r=0;r<t.childEvents.length;r++){const i=Ce(e,t.childEvents[r]);n=n.concat(i)}return n}function yl(e,s){if(!e._events)return null;let t=s;do{const n=e._events[t];if(n&&n.callbacks&&n.callbacks.length)return n.callbacks;const r=t.lastIndexOf(":");t=r>-1?t.substring(0,r):""}while(t);return null}function Sn(e,s,t){for(let[n,r]of e){r?typeof r=="function"&&(r=r(s.name)):r=s.name;const i=new vt(s.source,r);i.path=[...s.path],n.fire(i,...t)}}function wl(e,s,t,n,r){s._addEventListener?s._addEventListener(t,n,r):e._addEventListener.call(s,t,n,r)}function he(e,s,t,n){s._removeEventListener?s._removeEventListener(t,n):e._removeEventListener.call(s,t,n)}const kt=Symbol("observableProperties"),Dt=Symbol("boundObservables"),Ct=Symbol("boundProperties"),ot=Symbol("decoratedMethods"),Tn=Symbol("decoratedOriginal"),ws=qe(O());function qe(e){var t,n,r,i,o;if(!e)return ws;class s extends(o=e,i=kt,r=ot,n=Ct,t=Dt,o){constructor(){super(...arguments);h(this,i);h(this,r);h(this,n);h(this,t)}set(c,u){if(st(c)){Object.keys(c).forEach(d=>{this.set(d,c[d])},this);return}fe(this);const f=this[kt];if(c in this&&!f.has(c))throw new g("observable-set-cannot-override",this);Object.defineProperty(this,c,{enumerable:!0,configurable:!0,get(){return f.get(c)},set(d){const m=f.get(c);let y=this.fire(`set:${c}`,c,d,m);y===void 0&&(y=d),(m!==y||!f.has(c))&&(f.set(c,y),this.fire(`change:${c}`,c,y,m))}}),this[c]=u}bind(...c){if(!c.length||!En(c))throw new g("observable-bind-wrong-properties",this);if(new Set(c).size!==c.length)throw new g("observable-bind-duplicate-properties",this);fe(this);const u=this[Ct];c.forEach(d=>{if(u.has(d))throw new g("observable-bind-rebind",this)});const f=new Map;return c.forEach(d=>{const m={property:d,to:[]};u.set(d,m),f.set(d,m)}),{to:Pl,toMany:vl,_observable:this,_bindProperties:c,_to:[],_bindings:f}}unbind(...c){if(!this[kt])return;const u=this[Ct],f=this[Dt];if(c.length){if(!En(c))throw new g("observable-unbind-wrong-properties",this);c.forEach(d=>{const m=u.get(d);m&&(m.to.forEach(([y,w])=>{const k=f.get(y),V=k[w];V.delete(m),V.size||delete k[w],Object.keys(k).length||(f.delete(y),this.stopListening(y,"change"))}),u.delete(d))})}else f.forEach((d,m)=>{this.stopListening(m,"change")}),f.clear(),u.clear()}decorate(c){fe(this);const u=this[c];if(!u)throw new g("observablemixin-cannot-decorate-undefined",this,{object:this,methodName:c});this.on(c,(f,d)=>{f.return=u.apply(this,d)}),this[c]=function(...f){return this.fire(c,f)},this[c][Tn]=u,this[ot]||(this[ot]=[]),this[ot].push(c)}stopListening(c,u,f){if(!c&&this[ot]){for(const d of this[ot])this[d]=this[d][Tn];delete this[ot]}super.stopListening(c,u,f)}}return s}["set","bind","unbind","decorate","on","once","off","listenTo","stopListening","fire","delegate","stopDelegating","_addEventListener","_removeEventListener"].forEach(e=>{qe[e]=ws.prototype[e]});function fe(e){e[kt]||(Object.defineProperty(e,kt,{value:new Map}),Object.defineProperty(e,Dt,{value:new Map}),Object.defineProperty(e,Ct,{value:new Map}))}function Pl(...e){const s=Al(...e),t=Array.from(this._bindings.keys()),n=t.length;if(!s.callback&&s.to.length>1)throw new g("observable-bind-to-no-callback",this);if(n>1&&s.callback)throw new g("observable-bind-to-extra-callback",this);s.to.forEach(r=>{if(r.properties.length&&r.properties.length!==n)throw new g("observable-bind-to-properties-length",this);r.properties.length||(r.properties=this._bindProperties)}),this._to=s.to,s.callback&&(this._bindings.get(t[0]).callback=s.callback),El(this._observable,this._to),Tl(this),this._bindProperties.forEach(r=>{Ps(this._observable,r)})}function vl(e,s,t){if(this._bindings.size>1)throw new g("observable-bind-to-many-not-one-binding",this);this.to(...bl(e,s),t)}function bl(e,s){const t=e.map(n=>[n,s]);return Array.prototype.concat.apply([],t)}function En(e){return e.every(s=>typeof s=="string")}function Al(...e){if(!e.length)throw new g("observable-bind-to-parse-error",null);const s={to:[]};let t;return typeof e[e.length-1]=="function"&&(s.callback=e.pop()),e.forEach(n=>{if(typeof n=="string")t.properties.push(n);else if(typeof n=="object")t={observable:n,properties:[]},s.to.push(t);else throw new g("observable-bind-to-parse-error",null)}),s}function Sl(e,s,t,n){const r=e[Dt],i=r.get(t),o=i||{};o[n]||(o[n]=new Set),o[n].add(s),i||r.set(t,o)}function Tl(e){let s;e._bindings.forEach((t,n)=>{e._to.forEach(r=>{s=r.properties[t.callback?0:e._bindProperties.indexOf(n)],t.to.push([r.observable,s]),Sl(e._observable,t,r.observable,s)})})}function Ps(e,s){const n=e[Ct].get(s);let r;n.callback?r=n.callback.apply(e,n.to.map(i=>i[0][i[1]])):(r=n.to[0],r=r[0][r[1]]),Object.prototype.hasOwnProperty.call(e,s)?e[s]=r:e.set(s,r)}function El(e,s){s.forEach(t=>{const n=e[Dt];let r;n.get(t.observable)||e.listenTo(t.observable,"change",(i,o)=>{r=n.get(t.observable)[o],r&&r.forEach(a=>{Ps(e,a.property)})})})}/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */function xn(e){let s=0;for(const t of e)s++;return s}/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */function B(e,s){const t=Math.min(e.length,s.length);for(let n=0;n<t;n++)if(e[n]!=s[n])return n;return e.length==s.length?"same":e.length<s.length?"prefix":"extension"}/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */function X(e){return!!(e&&e[Symbol.iterator])}/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */function On(e){if(e){if(e.defaultView)return e instanceof e.defaultView.Document;if(e.ownerDocument&&e.ownerDocument.defaultView)return e instanceof e.ownerDocument.defaultView.Node}return!1}/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */function Rn(e){const s=Object.prototype.toString.apply(e);return s=="[object Window]"||s=="[object global]"}const vs=bs(O());function bs(e){if(!e)return vs;class s extends e{listenTo(n,r,i,o={}){if(On(n)||Rn(n)){const a={capture:!!o.useCapture,passive:!!o.usePassive},l=this._getProxyEmitter(n,a)||new xl(n,a);this.listenTo(l,r,i,o)}else super.listenTo(n,r,i,o)}stopListening(n,r,i){if(On(n)||Rn(n)){const o=this._getAllProxyEmitters(n);for(const a of o)this.stopListening(a,r,i)}else super.stopListening(n,r,i)}_getProxyEmitter(n,r){return pl(this,As(n,r))}_getAllProxyEmitters(n){return[{capture:!1,passive:!1},{capture:!1,passive:!0},{capture:!0,passive:!1},{capture:!0,passive:!0}].map(r=>this._getProxyEmitter(n,r)).filter(r=>!!r)}}return s}["_getProxyEmitter","_getAllProxyEmitters","on","once","off","listenTo","stopListening","fire","delegate","stopDelegating","_addEventListener","_removeEventListener"].forEach(e=>{bs[e]=vs.prototype[e]});class xl extends O(){constructor(t,n){super();h(this,"_domNode");h(this,"_options");h(this,"_domListeners");_s(this,As(t,n)),this._domNode=t,this._options=n}attach(t){if(this._domListeners&&this._domListeners[t])return;const n=this._createDomListener(t);this._domNode.addEventListener(t,n,this._options),this._domListeners||(this._domListeners={}),this._domListeners[t]=n}detach(t){let n;this._domListeners[t]&&(!(n=this._events[t])||!n.callbacks.length)&&this._domListeners[t].removeListener()}_addEventListener(t,n,r){this.attach(t),O().prototype._addEventListener.call(this,t,n,r)}_removeEventListener(t,n){O().prototype._removeEventListener.call(this,t,n),this.detach(t)}_createDomListener(t){const n=r=>{this.fire(t,r)};return n.removeListener=()=>{this._domNode.removeEventListener(t,n,this._options),delete this._domListeners[t]},n}}function Ol(e){return e["data-ck-expando"]||(e["data-ck-expando"]=re())}function As(e,s){let t=Ol(e);for(const n of Object.keys(s).sort())s[n]&&(t+="-"+n);return t}const Nt=Rl();function Rl(){const e={pageup:33,pagedown:34,end:35,home:36,arrowleft:37,arrowup:38,arrowright:39,arrowdown:40,backspace:8,delete:46,enter:13,space:32,esc:27,tab:9,ctrl:1114112,shift:2228224,alt:4456448,cmd:8912896};for(let s=65;s<=90;s++){const t=String.fromCharCode(s);e[t.toLowerCase()]=s}for(let s=48;s<=57;s++)e[s-48]=s;for(let s=112;s<=123;s++)e["f"+(s-111)]=s;return Object.assign(e,{"'":222,",":108,"-":109,".":110,"/":111,";":186,"=":187,"[":219,"\\":220,"]":221,"`":223}),e}/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */function Qt(e){return Array.isArray(e)?e:[e]}/* istanbul ignore else -- @preserve */Lt.window.CKEDITOR_TRANSLATIONS||(Lt.window.CKEDITOR_TRANSLATIONS={});class Ml extends O(){constructor(t={},n={}){super();h(this,"_items");h(this,"_itemMap");h(this,"_idProperty");h(this,"_bindToCollection");h(this,"_bindToExternalToInternalMap");h(this,"_bindToInternalToExternalMap");h(this,"_skippedIndexesFromExternal");const r=X(t);if(r||(n=t),this._items=[],this._itemMap=new Map,this._idProperty=n.idProperty||"id",this._bindToExternalToInternalMap=new WeakMap,this._bindToInternalToExternalMap=new WeakMap,this._skippedIndexesFromExternal=[],r)for(const i of t)this._items.push(i),this._itemMap.set(this._getItemIdBeforeAdding(i),i)}get length(){return this._items.length}get first(){return this._items[0]||null}get last(){return this._items[this.length-1]||null}add(t,n){return this.addMany([t],n)}addMany(t,n){if(n===void 0)n=this._items.length;else if(n>this._items.length||n<0)throw new g("collection-add-item-invalid-index",this);let r=0;for(const i of t){const o=this._getItemIdBeforeAdding(i),a=n+r;this._items.splice(a,0,i),this._itemMap.set(o,i),this.fire("add",i,a),r++}return this.fire("change",{added:t,removed:[],index:n}),this}get(t){let n;if(typeof t=="string")n=this._itemMap.get(t);else if(typeof t=="number")n=this._items[t];else throw new g("collection-get-invalid-arg",this);return n||null}has(t){if(typeof t=="string")return this._itemMap.has(t);{const n=this._idProperty,r=t[n];return r&&this._itemMap.has(r)}}getIndex(t){let n;return typeof t=="string"?n=this._itemMap.get(t):n=t,n?this._items.indexOf(n):-1}remove(t){const[n,r]=this._remove(t);return this.fire("change",{added:[],removed:[n],index:r}),n}map(t,n){return this._items.map(t,n)}forEach(t,n){this._items.forEach(t,n)}find(t,n){return this._items.find(t,n)}filter(t,n){return this._items.filter(t,n)}clear(){this._bindToCollection&&(this.stopListening(this._bindToCollection),this._bindToCollection=null);const t=Array.from(this._items);for(;this.length;)this._remove(0);this.fire("change",{added:[],removed:t,index:0})}bindTo(t){if(this._bindToCollection)throw new g("collection-bind-to-rebind",this);return this._bindToCollection=t,{as:n=>{this._setUpBindToBinding(r=>new n(r))},using:n=>{typeof n=="function"?this._setUpBindToBinding(n):this._setUpBindToBinding(r=>r[n])}}}_setUpBindToBinding(t){const n=this._bindToCollection,r=(i,o,a)=>{const l=n._bindToCollection==this,c=n._bindToInternalToExternalMap.get(o);if(l&&c)this._bindToExternalToInternalMap.set(o,c),this._bindToInternalToExternalMap.set(c,o);else{const u=t(o);if(!u){this._skippedIndexesFromExternal.push(a);return}let f=a;for(const d of this._skippedIndexesFromExternal)a>d&&f--;for(const d of n._skippedIndexesFromExternal)f>=d&&f++;this._bindToExternalToInternalMap.set(o,u),this._bindToInternalToExternalMap.set(u,o),this.add(u,f);for(let d=0;d<n._skippedIndexesFromExternal.length;d++)f<=n._skippedIndexesFromExternal[d]&&n._skippedIndexesFromExternal[d]++}};for(const i of n)r(null,i,n.getIndex(i));this.listenTo(n,"add",r),this.listenTo(n,"remove",(i,o,a)=>{const l=this._bindToExternalToInternalMap.get(o);l&&this.remove(l),this._skippedIndexesFromExternal=this._skippedIndexesFromExternal.reduce((c,u)=>(a<u&&c.push(u-1),a>u&&c.push(u),c),[])})}_getItemIdBeforeAdding(t){const n=this._idProperty;let r;if(n in t){if(r=t[n],typeof r!="string")throw new g("collection-add-invalid-id",this);if(this.get(r))throw new g("collection-add-item-already-exists",this)}else t[n]=r=re();return r}_remove(t){let n,r,i,o=!1;const a=this._idProperty;if(typeof t=="string"?(r=t,i=this._itemMap.get(r),o=!i,i&&(n=this._items.indexOf(i))):typeof t=="number"?(n=t,i=this._items[n],o=!i,i&&(r=i[a])):(i=t,r=i[a],n=this._items.indexOf(i),o=n==-1||!this._itemMap.get(r)),o)throw new g("collection-remove-404",this);this._items.splice(n,1),this._itemMap.delete(r);const l=this._bindToInternalToExternalMap.get(i);return this._bindToInternalToExternalMap.delete(i),this._bindToExternalToInternalMap.delete(l),this.fire("remove",i,n),[i,n]}[Symbol.iterator](){return this._items[Symbol.iterator]()}}/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */function kl(e){const s=new Map;for(const t in e)s.set(t,e[t]);return s}function Vt(e){return X(e)?new Map(e):kl(e)}/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */function Mn(e,s,t){const n=e.length,r=s.length;for(let i=n-1;i>=t;i--)e[i+r]=e[i];for(let i=0;i<r;i++)e[t+i]=s[i]}/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 *//**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */let dt=class{is(){throw new Error("is() method is abstract")}},gt=class extends O(dt){constructor(t){super();h(this,"document");h(this,"parent");this.document=t,this.parent=null}get index(){let t;if(!this.parent)return null;if((t=this.parent.getChildIndex(this))==-1)throw new g("view-node-not-found-in-parent",this);return t}get nextSibling(){const t=this.index;return t!==null&&this.parent.getChild(t+1)||null}get previousSibling(){const t=this.index;return t!==null&&this.parent.getChild(t-1)||null}get root(){let t=this;for(;t.parent;)t=t.parent;return t}isAttached(){return this.root.is("rootElement")}getPath(){const t=[];let n=this;for(;n.parent;)t.unshift(n.index),n=n.parent;return t}getAncestors(t={}){const n=[];let r=t.includeSelf?this:this.parent;for(;r;)n[t.parentFirst?"push":"unshift"](r),r=r.parent;return n}getCommonAncestor(t,n={}){const r=this.getAncestors(n),i=t.getAncestors(n);let o=0;for(;r[o]==i[o]&&r[o];)o++;return o===0?null:r[o-1]}isBefore(t){if(this==t||this.root!==t.root)return!1;const n=this.getPath(),r=t.getPath(),i=B(n,r);switch(i){case"prefix":return!0;case"extension":return!1;default:return n[i]<r[i]}}isAfter(t){return this==t||this.root!==t.root?!1:!this.isBefore(t)}_remove(){this.parent._removeChildren(this.index)}_fireChange(t,n,r){this.fire(`change:${t}`,n,r),this.parent&&this.parent._fireChange(t,n,r)}toJSON(){const t=Ra(this);return delete t.parent,t}};gt.prototype.is=function(e){return e==="node"||e==="view:node"};let lt=class Ne extends gt{constructor(t,n){super(t);h(this,"_textData");this._textData=n}get data(){return this._textData}get _data(){return this.data}set _data(t){this._fireChange("text",this),this._textData=t}isSimilar(t){return t instanceof Ne?this===t||this.data===t.data:!1}_clone(){return new Ne(this.document,this.data)}};lt.prototype.is=function(e){return e==="$text"||e==="view:$text"||e==="text"||e==="view:text"||e==="node"||e==="view:node"};let W=class extends dt{constructor(t,n,r){super();h(this,"textNode");h(this,"data");h(this,"offsetInText");if(this.textNode=t,n<0||n>t.data.length)throw new g("view-textproxy-wrong-offsetintext",this);if(r<0||n+r>t.data.length)throw new g("view-textproxy-wrong-length",this);this.data=t.data.substring(n,n+r),this.offsetInText=n}get offsetSize(){return this.data.length}get isPartial(){return this.data.length!==this.textNode.data.length}get parent(){return this.textNode.parent}get root(){return this.textNode.root}get document(){return this.textNode.document}getAncestors(t={}){const n=[];let r=t.includeSelf?this.textNode:this.parent;for(;r!==null;)n[t.parentFirst?"push":"unshift"](r),r=r.parent;return n}};W.prototype.is=function(e){return e==="$textProxy"||e==="view:$textProxy"||e==="textProxy"||e==="view:textProxy"};function Cl(e){const s=[];return"attributes"in e&&e.attributes&&de(s,e.attributes),"classes"in e&&e.classes&&de(s,e.classes,"class"),"styles"in e&&e.styles&&de(s,e.styles,"style"),{name:e.name||!1,attributes:s}}function de(e,s,t){if(typeof s=="string"){e.push(t?[t,s]:[s]);return}for(const n of s)Array.isArray(n)?e.push(n):e.push(t?[t,n]:[n])}class Nl{constructor(...s){h(this,"_patterns",[]);this.add(...s)}add(...s){for(let t of s)(typeof t=="string"||t instanceof RegExp)&&(t={name:t}),this._patterns.push(t)}match(...s){for(const t of s)for(const n of this._patterns){const r=this._isElementMatching(t,n);if(r)return{element:t,pattern:n,match:r}}return null}matchAll(...s){const t=[];for(const n of s)for(const r of this._patterns){const i=this._isElementMatching(n,r);i&&t.push({element:n,pattern:r,match:i})}return t.length>0?t:null}getElementName(){if(this._patterns.length!==1)return null;const s=this._patterns[0],t=s.name;return typeof s!="function"&&t&&!(t instanceof RegExp)?t:null}_isElementMatching(s,t){if(typeof t=="function"){const i=t(s);return!i||typeof i!="object"?i:Cl(i)}const n={};if(t.name&&(n.name=Bl(t.name,s.name),!n.name))return null;const r=[];return t.attributes&&!Fl(t.attributes,s,r)||t.classes&&!Il(t.classes,s,r)||t.styles&&!$l(t.styles,s,r)?null:(r.length&&(n.attributes=r),n)}}function te(e,s){return e===!0||e===s||e instanceof RegExp&&!!String(s).match(e)}function Bl(e,s){return e instanceof RegExp?!!s.match(e):e===s}function je(e,s){if(Array.isArray(e))return e.map(n=>typeof n!="object"||n instanceof RegExp?s?[s,n,!0]:[n,!0]:((n.key===void 0||n.value===void 0)&&Me("matcher-pattern-missing-key-or-value",n),s?[s,n.key,n.value]:[n.key,n.value]));if(typeof e!="object"||e instanceof RegExp)return[s?[s,e,!0]:[e,!0]];const t=[];for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(s?[s,n,e[n]]:[n,e[n]]);return t}function Fl(e,s,t){let n;return typeof e=="object"&&!(e instanceof RegExp)&&!Array.isArray(e)?(e.style!==void 0&&Me("matcher-pattern-deprecated-attributes-style-key",e),e.class!==void 0&&Me("matcher-pattern-deprecated-attributes-class-key",e)):n=["class","style"],s._collectAttributesMatch(je(e),t,n)}function Il(e,s,t){return s._collectAttributesMatch(je(e,"class"),t)}function $l(e,s,t){return s._collectAttributesMatch(je(e,"style"),t)}class ge{constructor(s){h(this,"_styles");h(this,"_cachedStyleNames",null);h(this,"_cachedExpandedStyleNames",null);h(this,"_styleProcessor");this._styles={},this._styleProcessor=s}get isEmpty(){return!Object.entries(this._styles).length}get size(){return this.isEmpty?0:this.getStyleNames().length}setTo(s){this.clear();const t=Ll(s);for(const[n,r]of t)this._styleProcessor.toNormalizedForm(n,r,this._styles);return this}has(s){if(this.isEmpty)return!1;const n=this._styleProcessor.getReducedForm(s,this._styles).find(([r])=>r===s);return Array.isArray(n)}set(s,t){if(this._cachedStyleNames=null,this._cachedExpandedStyleNames=null,st(s))for(const[n,r]of Object.entries(s))this._styleProcessor.toNormalizedForm(n,r,this._styles);else this._styleProcessor.toNormalizedForm(s,t,this._styles)}remove(s){for(const t of Qt(s)){this._cachedStyleNames=null,this._cachedExpandedStyleNames=null;const n=Dl(t);cl(this._styles,n),delete this._styles[t],this._cleanEmptyObjectsOnPath(n)}}getNormalized(s){return this._styleProcessor.getNormalized(s,this._styles)}toString(){return this.isEmpty?"":this.getStylesEntries().map(s=>s.join(":")).sort().join(";")+";"}getAsString(s){if(this.isEmpty)return;if(this._styles[s]&&!st(this._styles[s]))return this._styles[s];const n=this._styleProcessor.getReducedForm(s,this._styles).find(([r])=>r===s);if(Array.isArray(n))return n[1]}getStyleNames(s=!1){return this.isEmpty?[]:s?(this._cachedExpandedStyleNames=this._cachedExpandedStyleNames||this._styleProcessor.getStyleNames(this._styles),this._cachedExpandedStyleNames):(this._cachedStyleNames=this._cachedStyleNames||this.getStylesEntries().map(([t])=>t),this._cachedStyleNames)}keys(){return this.getStyleNames()}clear(){this._styles={},this._cachedStyleNames=null,this._cachedExpandedStyleNames=null}isSimilar(s){if(this.size!==s.size)return!1;for(const t of this.getStyleNames())if(!s.has(t)||s.getAsString(t)!==this.getAsString(t))return!1;return!0}getStylesEntries(){const s=[],t=Object.keys(this._styles);for(const n of t)s.push(...this._styleProcessor.getReducedForm(n,this._styles));return s}_clone(){const s=new this.constructor(this._styleProcessor);return s.set(this.getNormalized()),s}_getTokensMatch(s,t){const n=[];for(const r of this.getStyleNames(!0))if(te(s,r)){if(t===!0){n.push(r);continue}const i=this.getAsString(r);te(t,i)&&n.push(r)}return n.length?n:void 0}_getConsumables(s){const t=[];if(s){t.push(s);for(const n of this._styleProcessor.getRelatedStyles(s))t.push(n)}else for(const n of this.getStyleNames()){for(const r of this._styleProcessor.getRelatedStyles(n))t.push(r);t.push(n)}return t}_canMergeFrom(s){for(const t of s.getStyleNames())if(this.has(t)&&this.getAsString(t)!==s.getAsString(t))return!1;return!0}_mergeFrom(s){for(const t of s.getStyleNames())this.has(t)||this.set(t,s.getAsString(t))}_isMatching(s){for(const t of s.getStyleNames())if(!this.has(t)||this.getAsString(t)!==s.getAsString(t))return!1;return!0}_cleanEmptyObjectsOnPath(s){const t=s.split(".");if(!(t.length>1))return;const r=t.splice(0,t.length-1).join("."),i=Hi(this._styles,r);if(!i)return;!Object.keys(i).length&&this.remove(r)}}function Ll(e){let s=null,t=0,n=0,r=null;const i=new Map;if(e==="")return i;e.charAt(e.length-1)!=";"&&(e=e+";");for(let o=0;o<e.length;o++){const a=e.charAt(o);if(s===null)switch(a){case":":r||(r=e.substr(t,o-t),n=o+1);break;case'"':case"'":s=a;break;case";":{const l=e.substr(n,o-n);r&&i.set(r.trim(),l.trim()),r=null,t=o+1;break}}else a===s&&(s=null)}return i}function Dl(e){return e.replace("-",".")}class pe{constructor(){h(this,"_set",new Set)}get isEmpty(){return this._set.size==0}get size(){return this._set.size}has(s){return this._set.has(s)}keys(){return Array.from(this._set.keys())}setTo(s){this.clear();for(const t of s.split(/\s+/))t&&this._set.add(t);return this}set(s){for(const t of Qt(s))t&&this._set.add(t)}remove(s){for(const t of Qt(s))this._set.delete(t)}clear(){this._set.clear()}toString(){return Array.from(this._set).join(" ")}isSimilar(s){if(this.size!==s.size)return!1;for(const t of this.keys())if(!s.has(t))return!1;return!0}_clone(){const s=new this.constructor;return s._set=new Set(this._set),s}_getTokensMatch(s){const t=[];if(s===!0){for(const n of this._set.keys())t.push(n);return t}if(typeof s=="string"){for(const n of s.split(/\s+/))if(this._set.has(n))t.push(n);else return;return t}for(const n of this._set.keys())n.match(s)&&t.push(n);return t.length?t:void 0}_getConsumables(s){return s?[s]:this.keys()}_canMergeFrom(){return!0}_mergeFrom(s){for(const t of s._set.keys())this._set.has(t)||this._set.add(t)}_isMatching(s){for(const t of s._set.keys())if(!this._set.has(t))return!1;return!0}}let At=class Ss extends gt{constructor(t,n,r,i){super(t);h(this,"name");h(this,"_unsafeAttributesToRender",[]);h(this,"_attrs");h(this,"_children");h(this,"_customProperties",new Map);this.name=n,this._attrs=this._parseAttributes(r),this._children=[],i&&this._insertChild(0,i)}get _classes(){return this._attrs.get("class")}get _styles(){return this._attrs.get("style")}get childCount(){return this._children.length}get isEmpty(){return this._children.length===0}getChild(t){return this._children[t]}getChildIndex(t){return this._children.indexOf(t)}getChildren(){return this._children[Symbol.iterator]()}*getAttributeKeys(){this._classes&&(yield"class"),this._styles&&(yield"style");for(const t of this._attrs.keys())t!="class"&&t!="style"&&(yield t)}*getAttributes(){for(const[t,n]of this._attrs.entries())yield[t,String(n)]}getAttribute(t){return this._attrs.has(t)?String(this._attrs.get(t)):void 0}hasAttribute(t,n){return this._attrs.has(t)?n!==void 0?pt(this.name,t)||Et(this.name,t)?this._attrs.get(t).has(n):this._attrs.get(t)===n:!0:!1}isSimilar(t){if(!(t instanceof Ss))return!1;if(this===t)return!0;if(this.name!=t.name||this._attrs.size!==t._attrs.size)return!1;for(const[n,r]of this._attrs){const i=t._attrs.get(n);if(i===void 0)return!1;if(typeof r=="string"||typeof i=="string"){if(i!==r)return!1}else if(!r.isSimilar(i))return!1}return!0}hasClass(...t){for(const n of t)if(!this._classes||!this._classes.has(n))return!1;return!0}getClassNames(){const t=this._classes?this._classes.keys():[],n=t[Symbol.iterator]();return Object.assign(t,{next:n.next.bind(n)})}getStyle(t){return this._styles&&this._styles.getAsString(t)}getNormalizedStyle(t){return this._styles&&this._styles.getNormalized(t)}getStyleNames(t){return this._styles?this._styles.getStyleNames(t):[]}hasStyle(...t){for(const n of t)if(!this._styles||!this._styles.has(n))return!1;return!0}findAncestor(...t){const n=new Nl(...t);let r=this.parent;for(;r&&!r.is("documentFragment");){if(n.match(r))return r;r=r.parent}return null}getCustomProperty(t){return this._customProperties.get(t)}*getCustomProperties(){yield*this._customProperties.entries()}getIdentity(){const t=this._classes?this._classes.keys().sort().join(","):"",n=this._styles&&String(this._styles),r=Array.from(this._attrs).filter(([i])=>i!="style"&&i!="class").map(i=>`${i[0]}="${i[1]}"`).sort().join(" ");return this.name+(t==""?"":` class="${t}"`)+(n?` style="${n}"`:"")+(r==""?"":` ${r}`)}shouldRenderUnsafeAttribute(t){return this._unsafeAttributesToRender.includes(t)}_clone(t=!1){const n=[];if(t)for(const i of this.getChildren())n.push(i._clone(t));const r=new this.constructor(this.document,this.name,this._attrs,n);return r._customProperties=new Map(this._customProperties),r.getFillerOffset=this.getFillerOffset,r._unsafeAttributesToRender=this._unsafeAttributesToRender,r}_appendChild(t){return this._insertChild(this.childCount,t)}_insertChild(t,n){this._fireChange("children",this,{index:t});let r=0;const i=Vl(this.document,n);for(const o of i)o.parent!==null&&o._remove(),o.parent=this,o.document=this.document,this._children.splice(t,0,o),t++,r++;return r}_removeChildren(t,n=1){this._fireChange("children",this,{index:t});for(let r=t;r<t+n;r++)this._children[r].parent=null;return this._children.splice(t,n)}_setAttribute(t,n,r=!0){if(this._fireChange("attributes",this),pt(this.name,t)||Et(this.name,t)){let i=this._attrs.get(t);i||(i=pt(this.name,t)?new ge(this.document.stylesProcessor):new pe,this._attrs.set(t,i)),r?i.setTo(String(n)):pt(this.name,t)?Array.isArray(n)?i.set(n[0],n[1]):i.set(n):i.set(typeof n=="string"?n.split(/\s+/):n)}else this._attrs.set(t,String(n))}_removeAttribute(t,n){if(this._fireChange("attributes",this),n!==void 0&&(pt(this.name,t)||Et(this.name,t))){const r=this._attrs.get(t);return r?(Et(this.name,t)&&typeof n=="string"&&(n=n.split(/\s+/)),r.remove(n),r.isEmpty?this._attrs.delete(t):!1):!1}return this._attrs.delete(t)}_addClass(t){this._setAttribute("class",t,!1)}_removeClass(t){this._removeAttribute("class",t)}_setStyle(t,n){typeof t!="string"?this._setAttribute("style",t,!1):this._setAttribute("style",[t,n],!1)}_removeStyle(t){this._removeAttribute("style",t)}_collectAttributesMatch(t,n,r){for(const[i,o,a]of t){let l=!1,c=!1;for(const[u,f]of this._attrs)if(!(r&&r.includes(u)||!te(i,u)))if(l=!0,typeof f=="string"){if(te(o,f))n.push([u]),c=!0;else if(!(i instanceof RegExp))return!1}else{const d=f._getTokensMatch(o,a||!0);if(d){c=!0;for(const m of d)n.push([u,m])}else if(!(i instanceof RegExp))return!1}if(!l||!c)return!1}return!0}_getConsumables(t,n){const r=[];if(t){const i=this._attrs.get(t);if(i!==void 0)if(typeof i=="string")r.push([t]);else for(const o of i._getConsumables(n))r.push([t,o])}else for(const[i,o]of this._attrs)if(typeof o=="string")r.push([i]);else for(const a of o._getConsumables())r.push([i,a]);return{name:!t,attributes:r}}_canMergeAttributesFrom(t){if(this.name!=t.name)return!1;for(const[n,r]of t._attrs){const i=this._attrs.get(n);if(i!==void 0){if(typeof i=="string"||typeof r=="string"){if(i!==r)return!1}else if(!i._canMergeFrom(r))return!1}}return!0}_mergeAttributesFrom(t){this._fireChange("attributes",this);for(const[n,r]of t._attrs){const i=this._attrs.get(n);i===void 0||typeof i=="string"||typeof r=="string"?this._setAttribute(n,r):i._mergeFrom(r)}}_canSubtractAttributesOf(t){if(this.name!=t.name)return!1;for(const[n,r]of t._attrs){const i=this._attrs.get(n);if(i===void 0)return!1;if(typeof i=="string"||typeof r=="string"){if(i!==r)return!1}else if(!i._isMatching(r))return!1}return!0}_subtractAttributesOf(t){this._fireChange("attributes",this);for(const[n,r]of t._attrs){const i=this._attrs.get(n);typeof i=="string"||typeof r=="string"?this._attrs.delete(n):(i.remove(r.keys()),i.isEmpty&&this._attrs.delete(n))}}_setCustomProperty(t,n){this._customProperties.set(t,n)}_removeCustomProperty(t){return this._customProperties.delete(t)}_parseAttributes(t){const n=Vt(t);for(const[r,i]of n)if(i===null)n.delete(r);else if(pt(this.name,r)){const o=i instanceof ge?i._clone():new ge(this.document.stylesProcessor).setTo(String(i));n.set(r,o)}else if(Et(this.name,r)){const o=i instanceof pe?i._clone():new pe().setTo(String(i));n.set(r,o)}else typeof i!="string"&&n.set(r,String(i));return n}};At.prototype.is=function(e,s){return s?s===this.name&&(e==="element"||e==="view:element"):e==="element"||e==="view:element"||e==="node"||e==="view:node"};function Vl(e,s){if(typeof s=="string")return[new lt(e,s)];X(s)||(s=[s]);const t=[];for(const n of s)typeof n=="string"?t.push(new lt(e,n)):n instanceof W?t.push(new lt(e,n.data)):t.push(n);return t}function Et(e,s){return s=="class"||e=="a"&&s=="rel"}function pt(e,s){return s=="style"}class Ts extends At{constructor(s,t,n,r){super(s,t,n,r),this.getFillerOffset=ql}}Ts.prototype.is=function(e,s){return s?s===this.name&&(e==="containerElement"||e==="view:containerElement"||e==="element"||e==="view:element"):e==="containerElement"||e==="view:containerElement"||e==="element"||e==="view:element"||e==="node"||e==="view:node"};function ql(){const e=[...this.getChildren()],s=e[this.childCount-1];if(s&&s.is("element","br"))return this.childCount;for(const t of e)if(!t.is("uiElement"))return null;return this.childCount}class Je extends qe(Ts){constructor(s,t,n,r){super(s,t,n,r),this.set("isReadOnly",!1),this.set("isFocused",!1),this.set("placeholder",void 0),this.bind("isReadOnly").to(s),this.bind("isFocused").to(s,"isFocused",i=>i&&s.selection.editableElement==this),this.listenTo(s.selection,"change",()=>{this.isFocused=s.isFocused&&s.selection.editableElement==this})}destroy(){this.stopListening()}}Je.prototype.is=function(e,s){return s?s===this.name&&(e==="editableElement"||e==="view:editableElement"||e==="containerElement"||e==="view:containerElement"||e==="element"||e==="view:element"):e==="editableElement"||e==="view:editableElement"||e==="containerElement"||e==="view:containerElement"||e==="element"||e==="view:element"||e==="node"||e==="view:node"};const kn=Symbol("rootName");class jl extends Je{constructor(s,t){super(s,t),this.rootName="main"}get rootName(){return this.getCustomProperty(kn)}set rootName(s){this._setCustomProperty(kn,s)}set _name(s){this.name=s}}jl.prototype.is=function(e,s){return s?s===this.name&&(e==="rootElement"||e==="view:rootElement"||e==="editableElement"||e==="view:editableElement"||e==="containerElement"||e==="view:containerElement"||e==="element"||e==="view:element"):e==="rootElement"||e==="view:rootElement"||e==="editableElement"||e==="view:editableElement"||e==="containerElement"||e==="view:containerElement"||e==="element"||e==="view:element"||e==="node"||e==="view:node"};let yt=class{constructor(s={}){h(this,"direction");h(this,"boundaries");h(this,"singleCharacters");h(this,"shallow");h(this,"ignoreElementEnd");h(this,"_position");h(this,"_boundaryStartParent");h(this,"_boundaryEndParent");if(!s.boundaries&&!s.startPosition)throw new g("view-tree-walker-no-start-position",null);if(s.direction&&s.direction!="forward"&&s.direction!="backward")throw new g("view-tree-walker-unknown-direction",s.startPosition,{direction:s.direction});this.boundaries=s.boundaries||null,s.startPosition?this._position=v._createAt(s.startPosition):this._position=v._createAt(s.boundaries[s.direction=="backward"?"end":"start"]),this.direction=s.direction||"forward",this.singleCharacters=!!s.singleCharacters,this.shallow=!!s.shallow,this.ignoreElementEnd=!!s.ignoreElementEnd,this._boundaryStartParent=this.boundaries?this.boundaries.start.parent:null,this._boundaryEndParent=this.boundaries?this.boundaries.end.parent:null}[Symbol.iterator](){return this}get position(){return this._position}skip(s){let t,n;do n=this.position,t=this.next();while(!t.done&&s(t.value));t.done||(this._position=n)}jumpTo(s){this._boundaryStartParent&&s.isBefore(this.boundaries.start)?s=this.boundaries.start:this._boundaryEndParent&&s.isAfter(this.boundaries.end)&&(s=this.boundaries.end),this._position=s.clone()}next(){return this.direction=="forward"?this._next():this._previous()}_next(){let s=this.position.clone();const t=this.position,n=s.parent;if(n.parent===null&&s.offset===n.childCount)return{done:!0,value:void 0};if(n===this._boundaryEndParent&&s.offset==this.boundaries.end.offset)return{done:!0,value:void 0};let r;if(n&&n.is("view:$text")){if(s.isAtEnd)return this._position=v._createAfter(n),this._next();r=n.data[s.offset]}else r=n.getChild(s.offset);if(typeof r=="string"){let i;this.singleCharacters?i=1:i=(n===this._boundaryEndParent?this.boundaries.end.offset:n.data.length)-s.offset;const o=new W(n,s.offset,i);return s.offset+=i,this._position=s,this._formatReturnValue("text",o,t,s,i)}if(r&&r.is("view:element")){if(!this.shallow)s=new v(r,0);else{if(this.boundaries&&this.boundaries.end.isBefore(s))return{done:!0,value:void 0};s.offset++}return this._position=s,this._formatReturnValue("elementStart",r,t,s,1)}if(r&&r.is("view:$text")){if(this.singleCharacters)return s=new v(r,0),this._position=s,this._next();let i=r.data.length,o;return r==this._boundaryEndParent?(i=this.boundaries.end.offset,o=new W(r,0,i),s=v._createAfter(o)):(o=new W(r,0,r.data.length),s.offset++),this._position=s,this._formatReturnValue("text",o,t,s,i)}return s=v._createAfter(n),this._position=s,this.ignoreElementEnd?this._next():this._formatReturnValue("elementEnd",n,t,s)}_previous(){let s=this.position.clone();const t=this.position,n=s.parent;if(n.parent===null&&s.offset===0)return{done:!0,value:void 0};if(n==this._boundaryStartParent&&s.offset==this.boundaries.start.offset)return{done:!0,value:void 0};let r;if(n.is("view:$text")){if(s.isAtStart)return this._position=v._createBefore(n),this._previous();r=n.data[s.offset-1]}else r=n.getChild(s.offset-1);if(typeof r=="string"){let i;if(this.singleCharacters)i=1;else{const a=n===this._boundaryStartParent?this.boundaries.start.offset:0;i=s.offset-a}s.offset-=i;const o=new W(n,s.offset,i);return this._position=s,this._formatReturnValue("text",o,t,s,i)}if(r&&r.is("view:element"))return this.shallow?(s.offset--,this._position=s,this._formatReturnValue("elementStart",r,t,s,1)):(s=new v(r,r.childCount),this._position=s,this.ignoreElementEnd?this._previous():this._formatReturnValue("elementEnd",r,t,s));if(r&&r.is("view:$text")){if(this.singleCharacters)return s=new v(r,r.data.length),this._position=s,this._previous();let i=r.data.length,o;if(r==this._boundaryStartParent){const a=this.boundaries.start.offset;o=new W(r,a,r.data.length-a),i=o.data.length,s=v._createBefore(o)}else o=new W(r,0,r.data.length),s.offset--;return this._position=s,this._formatReturnValue("text",o,t,s,i)}return s=v._createBefore(n),this._position=s,this._formatReturnValue("elementStart",n,t,s,1)}_formatReturnValue(s,t,n,r,i){return t.is("view:$textProxy")&&(t.offsetInText+t.data.length==t.textNode.data.length&&(this.direction=="forward"&&!(this.boundaries&&this.boundaries.end.isEqual(this.position))?(r=v._createAfter(t.textNode),this._position=r):n=v._createAfter(t.textNode)),t.offsetInText===0&&(this.direction=="backward"&&!(this.boundaries&&this.boundaries.start.isEqual(this.position))?(r=v._createBefore(t.textNode),this._position=r):n=v._createBefore(t.textNode))),{done:!1,value:{type:s,item:t,previousPosition:n,nextPosition:r,length:i}}}},v=class U extends dt{constructor(t,n){super();h(this,"parent");h(this,"offset");this.parent=t,this.offset=n}get nodeAfter(){return this.parent.is("$text")?null:this.parent.getChild(this.offset)||null}get nodeBefore(){return this.parent.is("$text")?null:this.parent.getChild(this.offset-1)||null}get isAtStart(){return this.offset===0}get isAtEnd(){const t=this.parent.is("$text")?this.parent.data.length:this.parent.childCount;return this.offset===t}get root(){return this.parent.root}get editableElement(){let t=this.parent;for(;!(t instanceof Je);)if(t.parent)t=t.parent;else return null;return t}getShiftedBy(t){const n=U._createAt(this),r=n.offset+t;return n.offset=r<0?0:r,n}getLastMatchingPosition(t,n={}){n.startPosition=this;const r=new yt(n);return r.skip(t),r.position}getAncestors(){return this.parent.is("documentFragment")?[this.parent]:this.parent.getAncestors({includeSelf:!0})}getCommonAncestor(t){const n=this.getAncestors(),r=t.getAncestors();let i=0;for(;n[i]==r[i]&&n[i];)i++;return i===0?null:n[i-1]}isEqual(t){return this.parent==t.parent&&this.offset==t.offset}isBefore(t){return this.compareWith(t)=="before"}isAfter(t){return this.compareWith(t)=="after"}compareWith(t){if(this.root!==t.root)return"different";if(this.isEqual(t))return"same";const n=this.parent.is("node")?this.parent.getPath():[],r=t.parent.is("node")?t.parent.getPath():[];n.push(this.offset),r.push(t.offset);const i=B(n,r);switch(i){case"prefix":return"before";case"extension":return"after";default:return n[i]<r[i]?"before":"after"}}getWalker(t={}){return t.startPosition=this,new yt(t)}clone(){return new U(this.parent,this.offset)}static _createAt(t,n){if(t instanceof U)return new this(t.parent,t.offset);{const r=t;if(n=="end")n=r.is("$text")?r.data.length:r.childCount;else{if(n=="before")return this._createBefore(r);if(n=="after")return this._createAfter(r);if(n!==0&&!n)throw new g("view-createpositionat-offset-required",r)}return new U(r,n)}}static _createAfter(t){if(t.is("$textProxy"))return new U(t.textNode,t.offsetInText+t.data.length);if(!t.parent)throw new g("view-position-after-root",t,{root:t});return new U(t.parent,t.index+1)}static _createBefore(t){if(t.is("$textProxy"))return new U(t.textNode,t.offsetInText);if(!t.parent)throw new g("view-position-before-root",t,{root:t});return new U(t.parent,t.index)}};v.prototype.is=function(e){return e==="position"||e==="view:position"};let q=class Z extends dt{constructor(t,n=null){super();h(this,"start");h(this,"end");this.start=t.clone(),this.end=n?n.clone():t.clone()}*[Symbol.iterator](){yield*new yt({boundaries:this,ignoreElementEnd:!0})}get isCollapsed(){return this.start.isEqual(this.end)}get isFlat(){return this.start.parent===this.end.parent}get root(){return this.start.root}getEnlarged(){let t=this.start.getLastMatchingPosition(Kt,{direction:"backward"}),n=this.end.getLastMatchingPosition(Kt);return t.parent.is("$text")&&t.isAtStart&&(t=v._createBefore(t.parent)),n.parent.is("$text")&&n.isAtEnd&&(n=v._createAfter(n.parent)),new Z(t,n)}getTrimmed(){let t=this.start.getLastMatchingPosition(Kt);if(t.isAfter(this.end)||t.isEqual(this.end))return new Z(t,t);let n=this.end.getLastMatchingPosition(Kt,{direction:"backward"});const r=t.nodeAfter,i=n.nodeBefore;return r&&r.is("$text")&&(t=new v(r,0)),i&&i.is("$text")&&(n=new v(i,i.data.length)),new Z(t,n)}isEqual(t){return this==t||this.start.isEqual(t.start)&&this.end.isEqual(t.end)}containsPosition(t){return t.isAfter(this.start)&&t.isBefore(this.end)}containsRange(t,n=!1){t.isCollapsed&&(n=!1);const r=this.containsPosition(t.start)||n&&this.start.isEqual(t.start),i=this.containsPosition(t.end)||n&&this.end.isEqual(t.end);return r&&i}getDifference(t){const n=[];return this.isIntersecting(t)?(this.containsPosition(t.start)&&n.push(new Z(this.start,t.start)),this.containsPosition(t.end)&&n.push(new Z(t.end,this.end))):n.push(this.clone()),n}getIntersection(t){if(this.isIntersecting(t)){let n=this.start,r=this.end;return this.containsPosition(t.start)&&(n=t.start),this.containsPosition(t.end)&&(r=t.end),new Z(n,r)}return null}getWalker(t={}){return t.boundaries=this,new yt(t)}getCommonAncestor(){return this.start.getCommonAncestor(this.end)}getContainedElement(){if(this.isCollapsed)return null;let t=this.start.nodeAfter,n=this.end.nodeBefore;return this.start.parent.is("$text")&&this.start.isAtEnd&&this.start.parent.nextSibling&&(t=this.start.parent.nextSibling),this.end.parent.is("$text")&&this.end.isAtStart&&this.end.parent.previousSibling&&(n=this.end.parent.previousSibling),t&&t.is("element")&&t===n?t:null}clone(){return new Z(this.start,this.end)}*getItems(t={}){t.boundaries=this,t.ignoreElementEnd=!0;const n=new yt(t);for(const r of n)yield r.item}*getPositions(t={}){t.boundaries=this;const n=new yt(t);yield n.position;for(const r of n)yield r.nextPosition}isIntersecting(t){return this.start.isBefore(t.end)&&this.end.isAfter(t.start)}static _createFromParentsAndOffsets(t,n,r,i){return new this(new v(t,n),new v(r,i))}static _createFromPositionAndShift(t,n){const r=t,i=t.getShiftedBy(n);return n>0?new this(r,i):new this(i,r)}static _createIn(t){return this._createFromParentsAndOffsets(t,0,t,t.childCount)}static _createOn(t){const n=t.is("$textProxy")?t.offsetSize:1;return this._createFromPositionAndShift(v._createBefore(t),n)}};q.prototype.is=function(e){return e==="range"||e==="view:range"};function Kt(e){return!!(e.item.is("attributeElement")||e.item.is("uiElement"))}let Es=class xs extends O(dt){constructor(...t){super();h(this,"_ranges");h(this,"_lastRangeBackward");h(this,"_isFake");h(this,"_fakeSelectionLabel");this._ranges=[],this._lastRangeBackward=!1,this._isFake=!1,this._fakeSelectionLabel="",t.length&&this.setTo(...t)}get isFake(){return this._isFake}get fakeSelectionLabel(){return this._fakeSelectionLabel}get anchor(){if(!this._ranges.length)return null;const t=this._ranges[this._ranges.length-1];return(this._lastRangeBackward?t.end:t.start).clone()}get focus(){if(!this._ranges.length)return null;const t=this._ranges[this._ranges.length-1];return(this._lastRangeBackward?t.start:t.end).clone()}get isCollapsed(){return this.rangeCount===1&&this._ranges[0].isCollapsed}get rangeCount(){return this._ranges.length}get isBackward(){return!this.isCollapsed&&this._lastRangeBackward}get editableElement(){return this.anchor?this.anchor.editableElement:null}*getRanges(){for(const t of this._ranges)yield t.clone()}getFirstRange(){let t=null;for(const n of this._ranges)(!t||n.start.isBefore(t.start))&&(t=n);return t?t.clone():null}getLastRange(){let t=null;for(const n of this._ranges)(!t||n.end.isAfter(t.end))&&(t=n);return t?t.clone():null}getFirstPosition(){const t=this.getFirstRange();return t?t.start.clone():null}getLastPosition(){const t=this.getLastRange();return t?t.end.clone():null}isEqual(t){if(this.isFake!=t.isFake||this.isFake&&this.fakeSelectionLabel!=t.fakeSelectionLabel||this.rangeCount!=t.rangeCount)return!1;if(this.rangeCount===0)return!0;if(!this.anchor.isEqual(t.anchor)||!this.focus.isEqual(t.focus))return!1;for(const n of this._ranges){let r=!1;for(const i of t._ranges)if(n.isEqual(i)){r=!0;break}if(!r)return!1}return!0}isSimilar(t){if(this.isBackward!=t.isBackward)return!1;const n=xn(this.getRanges()),r=xn(t.getRanges());if(n!=r)return!1;if(n==0)return!0;for(let i of this.getRanges()){i=i.getTrimmed();let o=!1;for(let a of t.getRanges())if(a=a.getTrimmed(),i.start.isEqual(a.start)&&i.end.isEqual(a.end)){o=!0;break}if(!o)return!1}return!0}getSelectedElement(){return this.rangeCount!==1?null:this.getFirstRange().getContainedElement()}setTo(...t){let[n,r,i]=t;if(typeof r=="object"&&(i=r,r=void 0),n===null)this._setRanges([]),this._setFakeOptions(i);else if(n instanceof xs||n instanceof Os)this._setRanges(n.getRanges(),n.isBackward),this._setFakeOptions({fake:n.isFake,label:n.fakeSelectionLabel});else if(n instanceof q)this._setRanges([n],i&&i.backward),this._setFakeOptions(i);else if(n instanceof v)this._setRanges([new q(n)]),this._setFakeOptions(i);else if(n instanceof gt){const o=!!i&&!!i.backward;let a;if(r===void 0)throw new g("view-selection-setto-required-second-parameter",this);r=="in"?a=q._createIn(n):r=="on"?a=q._createOn(n):a=new q(v._createAt(n,r)),this._setRanges([a],o),this._setFakeOptions(i)}else if(X(n))this._setRanges(n,i&&i.backward),this._setFakeOptions(i);else throw new g("view-selection-setto-not-selectable",this);this.fire("change")}setFocus(t,n){if(this.anchor===null)throw new g("view-selection-setfocus-no-ranges",this);const r=v._createAt(t,n);if(r.compareWith(this.focus)=="same")return;const i=this.anchor;this._ranges.pop(),r.compareWith(i)=="before"?this._addRange(new q(r,i),!0):this._addRange(new q(i,r)),this.fire("change")}_setRanges(t,n=!1){t=Array.from(t),this._ranges=[];for(const r of t)this._addRange(r);this._lastRangeBackward=!!n}_setFakeOptions(t={}){this._isFake=!!t.fake,this._fakeSelectionLabel=t.fake&&t.label||""}_addRange(t,n=!1){if(!(t instanceof q))throw new g("view-selection-add-range-not-range",this);this._pushRange(t),this._lastRangeBackward=!!n}_pushRange(t){for(const n of this._ranges)if(t.isIntersecting(n))throw new g("view-selection-range-intersects",this,{addedRange:t,intersectingRange:n});this._ranges.push(new q(t.start,t.end))}};Es.prototype.is=function(e){return e==="selection"||e==="view:selection"};let Os=class extends O(dt){constructor(...t){super();h(this,"_selection");this._selection=new Es,this._selection.delegate("change").to(this),t.length&&this._selection.setTo(...t)}get isFake(){return this._selection.isFake}get fakeSelectionLabel(){return this._selection.fakeSelectionLabel}get anchor(){return this._selection.anchor}get focus(){return this._selection.focus}get isCollapsed(){return this._selection.isCollapsed}get rangeCount(){return this._selection.rangeCount}get isBackward(){return this._selection.isBackward}get editableElement(){return this._selection.editableElement}get _ranges(){return this._selection._ranges}*getRanges(){yield*this._selection.getRanges()}getFirstRange(){return this._selection.getFirstRange()}getLastRange(){return this._selection.getLastRange()}getFirstPosition(){return this._selection.getFirstPosition()}getLastPosition(){return this._selection.getLastPosition()}getSelectedElement(){return this._selection.getSelectedElement()}isEqual(t){return this._selection.isEqual(t)}isSimilar(t){return this._selection.isSimilar(t)}_setTo(...t){this._selection.setTo(...t)}_setFocus(t,n){this._selection.setFocus(t,n)}};Os.prototype.is=function(e){return e==="selection"||e=="documentSelection"||e=="view:selection"||e=="view:documentSelection"};class Jl extends vt{constructor(t,n,r){super(t,n);h(this,"startRange");h(this,"_eventPhase");h(this,"_currentTarget");this.startRange=r,this._eventPhase="none",this._currentTarget=null}get eventPhase(){return this._eventPhase}get currentTarget(){return this._currentTarget}}const me=Symbol("bubbling contexts");function Cn(e){class s extends e{fire(n,...r){try{const i=n instanceof vt?n:new vt(this,n),o=_e(this);if(!o.size)return;if(xt(i,"capturing",this),mt(o,"$capture",i,...r))return i.return;const a=i.startRange||this.selection.getFirstRange(),l=a?a.getContainedElement():null,c=l?!!Rs(o,l):!1;let u=l||zl(a);if(xt(i,"atTarget",u),!c){if(mt(o,"$text",i,...r))return i.return;xt(i,"bubbling",u)}for(;u;){if(u.is("rootElement")){if(mt(o,"$root",i,...r))return i.return}else if(u.is("element")&&mt(o,u.name,i,...r))return i.return;if(mt(o,u,i,...r))return i.return;u=u.parent,xt(i,"bubbling",u)}return xt(i,"bubbling",this),mt(o,"$document",i,...r),i.return}catch(i){/* istanbul ignore next -- @preserve */g.rethrowUnexpectedError(i,this)}}_addEventListener(n,r,i){const o=Qt(i.context||"$document"),a=_e(this);for(const l of o){let c=a.get(l);c||(c=new(O()),a.set(l,c)),this.listenTo(c,n,r,i)}}_removeEventListener(n,r){const i=_e(this);for(const o of i.values())this.stopListening(o,n,r)}}return s}{const e=Cn(Object);["fire","_addEventListener","_removeEventListener"].forEach(s=>{Cn[s]=e.prototype[s]})}function xt(e,s,t){e instanceof Jl&&(e._eventPhase=s,e._currentTarget=t)}function mt(e,s,t,...n){const r=typeof s=="string"?e.get(s):Rs(e,s);return r?(r.fire(t,...n),t.stop.called):!1}function Rs(e,s){for(const[t,n]of e)if(typeof t=="function"&&t(s))return n;return null}function _e(e){return e[me]||(e[me]=new Map),e[me]}function zl(e){if(!e)return null;const s=e.start.parent,t=e.end.parent,n=s.getPath(),r=t.getPath();return n.length>r.length?s:t}const Nn=10;class Ms extends At{constructor(t,n,r,i){super(t,n,r,i);h(this,"_priority",Nn);h(this,"_id",null);h(this,"_clonesGroup",null);this.getFillerOffset=Ul}get priority(){return this._priority}get id(){return this._id}getElementsWithSameId(){if(this.id===null)throw new g("attribute-element-get-elements-with-same-id-no-id",this);return new Set(this._clonesGroup)}isSimilar(t){return this.id!==null||t.id!==null?this.id===t.id:super.isSimilar(t)&&this.priority==t.priority}_clone(t=!1){const n=super._clone(t);return n._priority=this._priority,n._id=this._id,n}_canMergeAttributesFrom(t){return this.id!==null||t.id!==null||this.priority!==t.priority?!1:super._canMergeAttributesFrom(t)}_canSubtractAttributesOf(t){return this.id!==null||t.id!==null||this.priority!==t.priority?!1:super._canSubtractAttributesOf(t)}}h(Ms,"DEFAULT_PRIORITY",Nn);Ms.prototype.is=function(e,s){return s?s===this.name&&(e==="attributeElement"||e==="view:attributeElement"||e==="element"||e==="view:element"):e==="attributeElement"||e==="view:attributeElement"||e==="element"||e==="view:element"||e==="node"||e==="view:node"};function Ul(){if(ye(this))return null;let e=this.parent;for(;e&&e.is("attributeElement");){if(ye(e)>1)return null;e=e.parent}return!e||ye(e)>1?null:this.childCount}function ye(e){return Array.from(e.getChildren()).filter(s=>!s.is("uiElement")).length}class Wl extends At{constructor(s,t,n,r){super(s,t,n,r),this.getFillerOffset=Gl}_insertChild(s,t){if(t&&(t instanceof gt||Array.from(t).length>0))throw new g("view-emptyelement-cannot-add",[this,t]);return 0}}Wl.prototype.is=function(e,s){return s?s===this.name&&(e==="emptyElement"||e==="view:emptyElement"||e==="element"||e==="view:element"):e==="emptyElement"||e==="view:emptyElement"||e==="element"||e==="view:element"||e==="node"||e==="view:node"};function Gl(){return null}class Kl extends At{constructor(s,t,n,r){super(s,t,n,r),this.getFillerOffset=Hl}_insertChild(s,t){if(t&&(t instanceof gt||Array.from(t).length>0))throw new g("view-uielement-cannot-add",[this,t]);return 0}render(s,t){return this.toDomElement(s)}toDomElement(s){const t=s.createElement(this.name);for(const n of this.getAttributeKeys())t.setAttribute(n,this.getAttribute(n));return t}}Kl.prototype.is=function(e,s){return s?s===this.name&&(e==="uiElement"||e==="view:uiElement"||e==="element"||e==="view:element"):e==="uiElement"||e==="view:uiElement"||e==="element"||e==="view:element"||e==="node"||e==="view:node"};function Hl(){return null}class Yl extends At{constructor(s,t,n,r){super(s,t,n,r),this.getFillerOffset=Xl}_insertChild(s,t){if(t&&(t instanceof gt||Array.from(t).length>0))throw new g("view-rawelement-cannot-add",[this,t]);return 0}render(s,t){}}Yl.prototype.is=function(e,s){return s?s===this.name&&(e==="rawElement"||e==="view:rawElement"||e==="element"||e==="view:element"):e==="rawElement"||e==="view:rawElement"||e===this.name||e==="view:"+this.name||e==="element"||e==="view:element"||e==="node"||e==="view:node"};function Xl(){return null}let Zl=class extends O(dt){constructor(t,n){super();h(this,"document");h(this,"_children",[]);h(this,"_customProperties",new Map);this.document=t,n&&this._insertChild(0,n)}[Symbol.iterator](){return this._children[Symbol.iterator]()}get childCount(){return this._children.length}get isEmpty(){return this.childCount===0}get root(){return this}get parent(){return null}get name(){}get getFillerOffset(){}getCustomProperty(t){return this._customProperties.get(t)}*getCustomProperties(){yield*this._customProperties.entries()}_appendChild(t){return this._insertChild(this.childCount,t)}getChild(t){return this._children[t]}getChildIndex(t){return this._children.indexOf(t)}getChildren(){return this._children[Symbol.iterator]()}_insertChild(t,n){this._fireChange("children",this,{index:t});let r=0;const i=Ql(this.document,n);for(const o of i)o.parent!==null&&o._remove(),o.parent=this,this._children.splice(t,0,o),t++,r++;return r}_removeChildren(t,n=1){this._fireChange("children",this,{index:t});for(let r=t;r<t+n;r++)this._children[r].parent=null;return this._children.splice(t,n)}_fireChange(t,n,r){this.fire(`change:${t}`,n,r)}_setCustomProperty(t,n){this._customProperties.set(t,n)}_removeCustomProperty(t){return this._customProperties.delete(t)}};Zl.prototype.is=function(e){return e==="documentFragment"||e==="view:documentFragment"};function Ql(e,s){return typeof s=="string"?[new lt(e,s)]:(X(s)||(s=[s]),Array.from(s).map(t=>typeof t=="string"?new lt(e,t):t instanceof W?new lt(e,t.data):t))}const tc=e=>e.createTextNode(" "),ec=e=>{const s=e.createElement("span");return s.dataset.ckeFiller="true",s.innerText=" ",s},nc=e=>{const s=e.createElement("br");return s.dataset.ckeFiller="true",s};nc(Lt.document);tc(Lt.document);ec(Lt.document);/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */class rt{is(){throw new Error("is() method is abstract")}}class ut extends rt{constructor(t,n,r){super();h(this,"textNode");h(this,"data");h(this,"offsetInText");if(this.textNode=t,n<0||n>t.offsetSize)throw new g("model-textproxy-wrong-offsetintext",this);if(r<0||n+r>t.offsetSize)throw new g("model-textproxy-wrong-length",this);this.data=t.data.substring(n,n+r),this.offsetInText=n}get startOffset(){return this.textNode.startOffset!==null?this.textNode.startOffset+this.offsetInText:null}get offsetSize(){return this.data.length}get endOffset(){return this.startOffset!==null?this.startOffset+this.offsetSize:null}get isPartial(){return this.offsetSize!==this.textNode.offsetSize}get parent(){return this.textNode.parent}get root(){return this.textNode.root}getPath(){const t=this.textNode.getPath();return t.length>0&&(t[t.length-1]+=this.offsetInText),t}getAncestors(t={}){const n=[];let r=t.includeSelf?this:this.parent;for(;r;)n[t.parentFirst?"push":"unshift"](r),r=r.parent;return n}hasAttribute(t){return this.textNode.hasAttribute(t)}getAttribute(t){return this.textNode.getAttribute(t)}getAttributes(){return this.textNode.getAttributes()}getAttributeKeys(){return this.textNode.getAttributeKeys()}}ut.prototype.is=function(e){return e==="$textProxy"||e==="model:$textProxy"||e==="textProxy"||e==="model:textProxy"};class Rt{constructor(s){h(this,"direction");h(this,"boundaries");h(this,"singleCharacters");h(this,"shallow");h(this,"ignoreElementEnd");h(this,"_position");h(this,"_boundaryStartParent");h(this,"_boundaryEndParent");h(this,"_visitedParent");if(!s||!s.boundaries&&!s.startPosition)throw new g("model-tree-walker-no-start-position",null);const t=s.direction||"forward";if(t!="forward"&&t!="backward")throw new g("model-tree-walker-unknown-direction",s,{direction:t});this.direction=t,this.boundaries=s.boundaries||null,s.startPosition?this._position=s.startPosition.clone():this._position=_._createAt(this.boundaries[this.direction=="backward"?"end":"start"]),this.position.stickiness="toNone",this.singleCharacters=!!s.singleCharacters,this.shallow=!!s.shallow,this.ignoreElementEnd=!!s.ignoreElementEnd,this._boundaryStartParent=this.boundaries?this.boundaries.start.parent:null,this._boundaryEndParent=this.boundaries?this.boundaries.end.parent:null,this._visitedParent=this.position.parent}[Symbol.iterator](){return this}get position(){return this._position}skip(s){let t,n,r,i;do r=this.position,i=this._visitedParent,{done:t,value:n}=this.next();while(!t&&s(n));t||(this._position=r,this._visitedParent=i)}jumpTo(s){this._boundaryStartParent&&s.isBefore(this.boundaries.start)?s=this.boundaries.start:this._boundaryEndParent&&s.isAfter(this.boundaries.end)&&(s=this.boundaries.end),this._position=s.clone(),this._visitedParent=s.parent}next(){return this.direction=="forward"?this._next():this._previous()}_next(){const s=this.position,t=this.position.clone(),n=this._visitedParent;if(n.parent===null&&t.offset===n.maxOffset)return{done:!0,value:void 0};if(n===this._boundaryEndParent&&t.offset==this.boundaries.end.offset)return{done:!0,value:void 0};const r=Bt(t,n),i=r||ks(t,n,r);if(i&&i.is("model:element")){if(!this.shallow)t.path.push(0),this._visitedParent=i;else{if(this.boundaries&&this.boundaries.end.isBefore(t))return{done:!0,value:void 0};t.offset++}return this._position=t,at("elementStart",i,s,t,1)}if(i&&i.is("model:$text")){let o;if(this.singleCharacters)o=1;else{let c=i.endOffset;this._boundaryEndParent==n&&this.boundaries.end.offset<c&&(c=this.boundaries.end.offset),o=c-t.offset}const a=t.offset-i.startOffset,l=new ut(i,a,o);return t.offset+=o,this._position=t,at("text",l,s,t,o)}return t.path.pop(),t.offset++,this._position=t,this._visitedParent=n.parent,this.ignoreElementEnd?this._next():at("elementEnd",n,s,t)}_previous(){const s=this.position,t=this.position.clone(),n=this._visitedParent;if(n.parent===null&&t.offset===0)return{done:!0,value:void 0};if(n==this._boundaryStartParent&&t.offset==this.boundaries.start.offset)return{done:!0,value:void 0};const r=t.parent,i=Bt(t,r),o=i||Cs(t,r,i);if(o&&o.is("model:element"))return t.offset--,this.shallow?(this._position=t,at("elementStart",o,s,t,1)):(t.path.push(o.maxOffset),this._position=t,this._visitedParent=o,this.ignoreElementEnd?this._previous():at("elementEnd",o,s,t));if(o&&o.is("model:$text")){let a;if(this.singleCharacters)a=1;else{let u=o.startOffset;this._boundaryStartParent==n&&this.boundaries.start.offset>u&&(u=this.boundaries.start.offset),a=t.offset-u}const l=t.offset-o.startOffset,c=new ut(o,l-a,a);return t.offset-=a,this._position=t,at("text",c,s,t,a)}return t.path.pop(),this._position=t,this._visitedParent=n.parent,at("elementStart",n,s,t,1)}}function at(e,s,t,n,r){return{done:!1,value:{type:e,item:s,previousPosition:t,nextPosition:n,length:r}}}class _ extends rt{constructor(t,n,r="toNone"){super();h(this,"root");h(this,"path");h(this,"stickiness");if(!t.is("element")&&!t.is("documentFragment"))throw new g("model-position-root-invalid",t);if(!Array.isArray(n)||n.length===0)throw new g("model-position-path-incorrect-format",t,{path:n});t.is("rootElement")?n=n.slice():(n=[...t.getPath(),...n],t=t.root),this.root=t,this.path=n,this.stickiness=r}get offset(){return this.path[this.path.length-1]}set offset(t){this.path[this.path.length-1]=t}get parent(){let t=this.root;for(let n=0;n<this.path.length-1;n++)if(t=t.getChildAtOffset(this.path[n]),!t)throw new g("model-position-path-incorrect",this,{position:this});if(t.is("$text"))throw new g("model-position-path-incorrect",this,{position:this});return t}get index(){return this.parent.offsetToIndex(this.offset)}get textNode(){return Bt(this,this.parent)}get nodeAfter(){const t=this.parent;return ks(this,t,Bt(this,t))}get nodeBefore(){const t=this.parent;return Cs(this,t,Bt(this,t))}get isAtStart(){return this.offset===0}get isAtEnd(){return this.offset==this.parent.maxOffset}isValid(){if(this.offset<0)return!1;let t=this.root;for(let n=0;n<this.path.length-1;n++)if(t=t.getChildAtOffset(this.path[n]),!t)return!1;return this.offset<=t.maxOffset}compareWith(t){if(this.root!=t.root)return"different";const n=B(this.path,t.path);switch(n){case"same":return"same";case"prefix":return"before";case"extension":return"after";default:return this.path[n]<t.path[n]?"before":"after"}}getLastMatchingPosition(t,n={}){n.startPosition=this;const r=new Rt(n);return r.skip(t),r.position}getParentPath(){return this.path.slice(0,-1)}getAncestors(){const t=this.parent;return t.is("documentFragment")?[t]:t.getAncestors({includeSelf:!0})}findAncestor(t){const n=this.parent;return n.is("element")?n.findAncestor(t,{includeSelf:!0}):null}getCommonPath(t){if(this.root!=t.root)return[];const n=B(this.path,t.path),r=typeof n=="string"?Math.min(this.path.length,t.path.length):n;return this.path.slice(0,r)}getCommonAncestor(t){const n=this.getAncestors(),r=t.getAncestors();let i=0;for(;n[i]==r[i]&&n[i];)i++;return i===0?null:n[i-1]}getShiftedBy(t){const n=this.clone(),r=n.offset+t;return n.offset=r<0?0:r,n}isAfter(t){return this.compareWith(t)=="after"}isBefore(t){return this.compareWith(t)=="before"}isEqual(t){return this.compareWith(t)=="same"}isTouching(t){if(this.root!==t.root)return!1;const n=Math.min(this.path.length,t.path.length);for(let r=0;r<n;r++){const i=this.path[r]-t.path[r];if(i<-1||i>1)return!1;if(i===1)return Bn(t,this,r);if(i===-1)return Bn(this,t,r)}return this.path.length===t.path.length?!0:this.path.length>t.path.length?Be(this.path,n):Be(t.path,n)}hasSameParentAs(t){if(this.root!==t.root)return!1;const n=this.getParentPath(),r=t.getParentPath();return B(n,r)=="same"}getTransformedByOperation(t){let n;switch(t.type){case"insert":n=this._getTransformedByInsertOperation(t);break;case"move":case"remove":case"reinsert":n=this._getTransformedByMoveOperation(t);break;case"split":n=this._getTransformedBySplitOperation(t);break;case"merge":n=this._getTransformedByMergeOperation(t);break;default:n=_._createAt(this);break}return n}_getTransformedByInsertOperation(t){return this._getTransformedByInsertion(t.position,t.howMany)}_getTransformedByMoveOperation(t){return this._getTransformedByMove(t.sourcePosition,t.targetPosition,t.howMany)}_getTransformedBySplitOperation(t){const n=t.movedRange;return n.containsPosition(this)||n.start.isEqual(this)&&this.stickiness=="toNext"?this._getCombined(t.splitPosition,t.moveTargetPosition):t.graveyardPosition?this._getTransformedByMove(t.graveyardPosition,t.insertionPosition,1):this._getTransformedByInsertion(t.insertionPosition,1)}_getTransformedByMergeOperation(t){const n=t.movedRange,r=n.containsPosition(this)||n.start.isEqual(this);let i;return r?(i=this._getCombined(t.sourcePosition,t.targetPosition),t.sourcePosition.isBefore(t.targetPosition)&&(i=i._getTransformedByDeletion(t.deletionPosition,1))):this.isEqual(t.deletionPosition)?i=_._createAt(t.deletionPosition):i=this._getTransformedByMove(t.deletionPosition,t.graveyardPosition,1),i}_getTransformedByDeletion(t,n){const r=_._createAt(this);if(this.root!=t.root)return r;if(B(t.getParentPath(),this.getParentPath())=="same"){if(t.offset<this.offset){if(t.offset+n>this.offset)return null;r.offset-=n}}else if(B(t.getParentPath(),this.getParentPath())=="prefix"){const i=t.path.length-1;if(t.offset<=this.path[i]){if(t.offset+n>this.path[i])return null;r.path[i]-=n}}return r}_getTransformedByInsertion(t,n){const r=_._createAt(this);if(this.root!=t.root)return r;if(B(t.getParentPath(),this.getParentPath())=="same")(t.offset<this.offset||t.offset==this.offset&&this.stickiness!="toPrevious")&&(r.offset+=n);else if(B(t.getParentPath(),this.getParentPath())=="prefix"){const i=t.path.length-1;t.offset<=this.path[i]&&(r.path[i]+=n)}return r}_getTransformedByMove(t,n,r){if(n=n._getTransformedByDeletion(t,r),t.isEqual(n))return _._createAt(this);const i=this._getTransformedByDeletion(t,r);return i===null||t.isEqual(this)&&this.stickiness=="toNext"||t.getShiftedBy(r).isEqual(this)&&this.stickiness=="toPrevious"?this._getCombined(t,n):i._getTransformedByInsertion(n,r)}_getCombined(t,n){const r=t.path.length-1,i=_._createAt(n);return i.stickiness=this.stickiness,i.offset=i.offset+this.path[r]-t.offset,i.path=[...i.path,...this.path.slice(r+1)],i}toJSON(){return{root:this.root.toJSON(),path:Array.from(this.path),stickiness:this.stickiness}}clone(){return new this.constructor(this.root,this.path,this.stickiness)}static _createAt(t,n,r="toNone"){if(t.is("model:position"))return new _(t.root,t.path,t.stickiness);{const i=t;if(n=="end")n=i.maxOffset;else{if(n=="before")return this._createBefore(i,r);if(n=="after")return this._createAfter(i,r);if(n!==0&&!n)throw new g("model-createpositionat-offset-required",[this,t])}if(!i.is("element")&&!i.is("documentFragment"))throw new g("model-position-parent-incorrect",[this,t]);const o=i.getPath();return o.push(n),new this(i.root,o,r)}}static _createAfter(t,n){if(!t.parent)throw new g("model-position-after-root",[this,t],{root:t});return this._createAt(t.parent,t.endOffset,n)}static _createBefore(t,n){if(!t.parent)throw new g("model-position-before-root",t,{root:t});return this._createAt(t.parent,t.startOffset,n)}static fromJSON(t,n){if(t.root==="$graveyard"){const r=new _(n.graveyard,t.path);return r.stickiness=t.stickiness,r}if(!n.getRoot(t.root))throw new g("model-position-fromjson-no-root",n,{rootName:t.root});return new _(n.getRoot(t.root),t.path,t.stickiness)}}_.prototype.is=function(e){return e==="position"||e==="model:position"};function Bt(e,s){const t=s.getChildAtOffset(e.offset);return t&&t.is("$text")&&t.startOffset<e.offset?t:null}function ks(e,s,t){return t!==null?null:s.getChildAtOffset(e.offset)}function Cs(e,s,t){return t!==null?null:s.getChild(s.offsetToIndex(e.offset)-1)}function Bn(e,s,t){return!(t+1===e.path.length||!Be(s.path,t+1)||!sc(e,t+1))}function Be(e,s){for(;s<e.length;){if(e[s]!==0)return!1;s++}return!0}function sc(e,s){let t=e.parent,n=e.path.length-1,r=0;for(;n>=s;){if(e.path[n]+r!==t.maxOffset)return!1;r=1,n--,t=t.parent}return!0}class p extends rt{constructor(t,n){super();h(this,"start");h(this,"end");this.start=_._createAt(t),this.end=n?_._createAt(n):_._createAt(t),this.start.stickiness=this.isCollapsed?"toNone":"toNext",this.end.stickiness=this.isCollapsed?"toNone":"toPrevious"}*[Symbol.iterator](){yield*new Rt({boundaries:this,ignoreElementEnd:!0})}get isCollapsed(){return this.start.isEqual(this.end)}get isFlat(){const t=this.start.getParentPath(),n=this.end.getParentPath();return B(t,n)=="same"}get root(){return this.start.root}containsPosition(t){return t.isAfter(this.start)&&t.isBefore(this.end)}containsRange(t,n=!1){t.isCollapsed&&(n=!1);const r=this.containsPosition(t.start)||n&&this.start.isEqual(t.start),i=this.containsPosition(t.end)||n&&this.end.isEqual(t.end);return r&&i}containsItem(t){const n=_._createBefore(t);return this.containsPosition(n)||this.start.isEqual(n)}isEqual(t){return this.start.isEqual(t.start)&&this.end.isEqual(t.end)}isIntersecting(t){return this.start.isBefore(t.end)&&this.end.isAfter(t.start)}getDifference(t){const n=[];return this.isIntersecting(t)?(this.containsPosition(t.start)&&n.push(new p(this.start,t.start)),this.containsPosition(t.end)&&n.push(new p(t.end,this.end))):n.push(new p(this.start,this.end)),n}getIntersection(t){if(this.isIntersecting(t)){let n=this.start,r=this.end;return this.containsPosition(t.start)&&(n=t.start),this.containsPosition(t.end)&&(r=t.end),new p(n,r)}return null}getJoined(t,n=!1){let r=this.isIntersecting(t);if(r||(this.start.isBefore(t.start)?r=n?this.end.isTouching(t.start):this.end.isEqual(t.start):r=n?t.end.isTouching(this.start):t.end.isEqual(this.start)),!r)return null;let i=this.start,o=this.end;return t.start.isBefore(i)&&(i=t.start),t.end.isAfter(o)&&(o=t.end),new p(i,o)}getMinimalFlatRanges(){const t=[],n=this.start.getCommonPath(this.end).length,r=_._createAt(this.start);let i=r.parent;for(;r.path.length>n+1;){const o=i.maxOffset-r.offset;o!==0&&t.push(new p(r,r.getShiftedBy(o))),r.path=r.path.slice(0,-1),r.offset++,i=i.parent}for(;r.path.length<=this.end.path.length;){const o=this.end.path[r.path.length-1],a=o-r.offset;a!==0&&t.push(new p(r,r.getShiftedBy(a))),r.offset=o,r.path.push(0)}return t}getWalker(t={}){return t.boundaries=this,new Rt(t)}*getItems(t={}){t.boundaries=this,t.ignoreElementEnd=!0;const n=new Rt(t);for(const r of n)yield r.item}*getPositions(t={}){t.boundaries=this;const n=new Rt(t);yield n.position;for(const r of n)yield r.nextPosition}getTransformedByOperation(t){switch(t.type){case"insert":return this._getTransformedByInsertOperation(t);case"move":case"remove":case"reinsert":return this._getTransformedByMoveOperation(t);case"split":return[this._getTransformedBySplitOperation(t)];case"merge":return[this._getTransformedByMergeOperation(t)]}return[new p(this.start,this.end)]}getTransformedByOperations(t){const n=[new p(this.start,this.end)];for(const r of t)for(let i=0;i<n.length;i++){const o=n[i].getTransformedByOperation(r);n.splice(i,1,...o),i+=o.length-1}for(let r=0;r<n.length;r++){const i=n[r];for(let o=r+1;o<n.length;o++){const a=n[o];(i.containsRange(a)||a.containsRange(i)||i.isEqual(a))&&n.splice(o,1)}}return n}getCommonAncestor(){return this.start.getCommonAncestor(this.end)}getContainedElement(){if(this.isCollapsed)return null;const t=this.start.nodeAfter,n=this.end.nodeBefore;return t&&t.is("element")&&t===n?t:null}toJSON(){return{start:this.start.toJSON(),end:this.end.toJSON()}}clone(){return new this.constructor(this.start,this.end)}_getTransformedByInsertOperation(t,n=!1){return this._getTransformedByInsertion(t.position,t.howMany,n)}_getTransformedByMoveOperation(t,n=!1){const r=t.sourcePosition,i=t.howMany,o=t.targetPosition;return this._getTransformedByMove(r,o,i,n)}_getTransformedBySplitOperation(t){const n=this.start._getTransformedBySplitOperation(t);let r=this.end._getTransformedBySplitOperation(t);return this.end.isEqual(t.insertionPosition)&&(r=this.end.getShiftedBy(1)),n.root!=r.root&&(r=this.end.getShiftedBy(-1)),new p(n,r)}_getTransformedByMergeOperation(t){if(this.start.isEqual(t.targetPosition)&&this.end.isEqual(t.deletionPosition))return new p(this.start);let n=this.start._getTransformedByMergeOperation(t),r=this.end._getTransformedByMergeOperation(t);return n.root!=r.root&&(r=this.end.getShiftedBy(-1)),n.isAfter(r)?(t.sourcePosition.isBefore(t.targetPosition)?(n=_._createAt(r),n.offset=0):(t.deletionPosition.isEqual(n)||(r=t.deletionPosition),n=t.targetPosition),new p(n,r)):new p(n,r)}_getTransformedByInsertion(t,n,r=!1){if(r&&this.containsPosition(t))return[new p(this.start,t),new p(t.getShiftedBy(n),this.end._getTransformedByInsertion(t,n))];{const i=new p(this.start,this.end);return i.start=i.start._getTransformedByInsertion(t,n),i.end=i.end._getTransformedByInsertion(t,n),[i]}}_getTransformedByMove(t,n,r,i=!1){if(this.isCollapsed){const d=this.start._getTransformedByMove(t,n,r);return[new p(d)]}const o=p._createFromPositionAndShift(t,r),a=n._getTransformedByDeletion(t,r);if(this.containsPosition(n)&&!i&&(o.containsPosition(this.start)||o.containsPosition(this.end))){const d=this.start._getTransformedByMove(t,n,r),m=this.end._getTransformedByMove(t,n,r);return[new p(d,m)]}let l;const c=this.getDifference(o);let u=null;const f=this.getIntersection(o);if(c.length==1?u=new p(c[0].start._getTransformedByDeletion(t,r),c[0].end._getTransformedByDeletion(t,r)):c.length==2&&(u=new p(this.start,this.end._getTransformedByDeletion(t,r))),u?l=u._getTransformedByInsertion(a,r,f!==null||i):l=[],f){const d=new p(f.start._getCombined(o.start,a),f.end._getCombined(o.start,a));l.length==2?l.splice(1,0,d):l.push(d)}return l}_getTransformedByDeletion(t,n){let r=this.start._getTransformedByDeletion(t,n),i=this.end._getTransformedByDeletion(t,n);return r==null&&i==null?null:(r==null&&(r=t),i==null&&(i=t),new p(r,i))}static _createFromPositionAndShift(t,n){const r=t,i=t.getShiftedBy(n);return n>0?new this(r,i):new this(i,r)}static _createIn(t){return new this(_._createAt(t,0),_._createAt(t,t.maxOffset))}static _createOn(t){return this._createFromPositionAndShift(_._createBefore(t),t.offsetSize)}static _createFromRanges(t){if(t.length===0)throw new g("range-create-from-ranges-empty-array",null);if(t.length==1)return t[0].clone();const n=t[0];t.sort((o,a)=>o.start.isAfter(a.start)?1:-1);const r=t.indexOf(n),i=new this(n.start,n.end);for(let o=r-1;o>=0&&t[o].end.isEqual(i.start);o--)i.start=_._createAt(t[o].start);for(let o=r+1;o<t.length&&t[o].start.isEqual(i.end);o++)i.end=_._createAt(t[o].end);return i}static fromJSON(t,n){return new this(_.fromJSON(t.start,n),_.fromJSON(t.end,n))}}p.prototype.is=function(e){return e==="range"||e==="model:range"};let St=class extends rt{constructor(t){super();h(this,"parent",null);h(this,"_attrs");h(this,"_index",null);h(this,"_startOffset",null);this._attrs=Vt(t)}get document(){return null}get index(){return this._index}get startOffset(){return this._startOffset}get offsetSize(){return 1}get endOffset(){return this.startOffset===null?null:this.startOffset+this.offsetSize}get nextSibling(){const t=this.index;return t!==null&&this.parent.getChild(t+1)||null}get previousSibling(){const t=this.index;return t!==null&&this.parent.getChild(t-1)||null}get root(){let t=this;for(;t.parent;)t=t.parent;return t}isAttached(){return this.parent===null?!1:this.root.isAttached()}getPath(){const t=[];let n=this;for(;n.parent;)t.unshift(n.startOffset),n=n.parent;return t}getAncestors(t={}){const n=[];let r=t.includeSelf?this:this.parent;for(;r;)n[t.parentFirst?"push":"unshift"](r),r=r.parent;return n}getCommonAncestor(t,n={}){const r=this.getAncestors(n),i=t.getAncestors(n);let o=0;for(;r[o]==i[o]&&r[o];)o++;return o===0?null:r[o-1]}isBefore(t){if(this==t||this.root!==t.root)return!1;const n=this.getPath(),r=t.getPath(),i=B(n,r);switch(i){case"prefix":return!0;case"extension":return!1;default:return n[i]<r[i]}}isAfter(t){return this==t||this.root!==t.root?!1:!this.isBefore(t)}hasAttribute(t){return this._attrs.has(t)}getAttribute(t){return this._attrs.get(t)}getAttributes(){return this._attrs.entries()}getAttributeKeys(){return this._attrs.keys()}toJSON(){const t={};return this._attrs.size&&(t.attributes=Array.from(this._attrs).reduce((n,r)=>(n[r[0]]=r[1],n),{})),t}_clone(t){return new this.constructor(this._attrs)}_remove(){this.parent._removeChildren(this.index)}_setAttribute(t,n){this._attrs.set(t,n)}_setAttributesTo(t){this._attrs=Vt(t)}_removeAttribute(t){return this._attrs.delete(t)}_clearAttributes(){this._attrs.clear()}};St.prototype.is=function(e){return e==="node"||e==="model:node"};class ie extends O(rt){constructor(...t){super();h(this,"_lastRangeBackward",!1);h(this,"_attrs",new Map);h(this,"_ranges",[]);t.length&&this.setTo(...t)}get anchor(){if(this._ranges.length>0){const t=this._ranges[this._ranges.length-1];return this._lastRangeBackward?t.end:t.start}return null}get focus(){if(this._ranges.length>0){const t=this._ranges[this._ranges.length-1];return this._lastRangeBackward?t.start:t.end}return null}get isCollapsed(){return this._ranges.length===1?this._ranges[0].isCollapsed:!1}get rangeCount(){return this._ranges.length}get isBackward(){return!this.isCollapsed&&this._lastRangeBackward}isEqual(t){if(this.rangeCount!=t.rangeCount)return!1;if(this.rangeCount===0)return!0;if(!this.anchor.isEqual(t.anchor)||!this.focus.isEqual(t.focus))return!1;for(const n of this._ranges){let r=!1;for(const i of t._ranges)if(n.isEqual(i)){r=!0;break}if(!r)return!1}return!0}*getRanges(){for(const t of this._ranges)yield new p(t.start,t.end)}getFirstRange(){let t=null;for(const n of this._ranges)(!t||n.start.isBefore(t.start))&&(t=n);return t?new p(t.start,t.end):null}getLastRange(){let t=null;for(const n of this._ranges)(!t||n.end.isAfter(t.end))&&(t=n);return t?new p(t.start,t.end):null}getFirstPosition(){const t=this.getFirstRange();return t?t.start.clone():null}getLastPosition(){const t=this.getLastRange();return t?t.end.clone():null}setTo(...t){let[n,r,i]=t;if(typeof r=="object"&&(i=r,r=void 0),n===null)this._setRanges([]);else if(n instanceof ie)this._setRanges(n.getRanges(),n.isBackward);else if(n&&typeof n.getRanges=="function")this._setRanges(n.getRanges(),n.isBackward);else if(n instanceof p)this._setRanges([n],!!i&&!!i.backward);else if(n instanceof _)this._setRanges([new p(n)]);else if(n instanceof St){const o=!!i&&!!i.backward;let a;if(r=="in")a=p._createIn(n);else if(r=="on")a=p._createOn(n);else if(r!==void 0)a=new p(_._createAt(n,r));else throw new g("model-selection-setto-required-second-parameter",[this,n]);this._setRanges([a],o)}else if(X(n))this._setRanges(n,i&&!!i.backward);else throw new g("model-selection-setto-not-selectable",[this,n])}_setRanges(t,n=!1){const r=Array.from(t),i=r.some(o=>{if(!(o instanceof p))throw new g("model-selection-set-ranges-not-range",[this,t]);return this._ranges.every(a=>!a.isEqual(o))});r.length===this._ranges.length&&!i||(this._replaceAllRanges(r),this._lastRangeBackward=!!n,this.fire("change:range",{directChange:!0}))}setFocus(t,n){if(this.anchor===null)throw new g("model-selection-setfocus-no-ranges",[this,t]);const r=_._createAt(t,n);if(r.compareWith(this.focus)=="same")return;const i=this.anchor;this._ranges.length&&this._popRange(),r.compareWith(i)=="before"?(this._pushRange(new p(r,i)),this._lastRangeBackward=!0):(this._pushRange(new p(i,r)),this._lastRangeBackward=!1),this.fire("change:range",{directChange:!0})}getAttribute(t){return this._attrs.get(t)}getAttributes(){return this._attrs.entries()}getAttributeKeys(){return this._attrs.keys()}hasAttribute(t){return this._attrs.has(t)}removeAttribute(t){this.hasAttribute(t)&&(this._attrs.delete(t),this.fire("change:attribute",{attributeKeys:[t],directChange:!0}))}setAttribute(t,n){this.getAttribute(t)!==n&&(this._attrs.set(t,n),this.fire("change:attribute",{attributeKeys:[t],directChange:!0}))}getSelectedElement(){return this.rangeCount!==1?null:this.getFirstRange().getContainedElement()}*getSelectedBlocks(){const t=new WeakSet;for(const n of this.getRanges()){const r=Fn(n.start,t);ic(r,n)&&(yield r);const i=n.getWalker();for(const a of i){const l=a.item;a.type=="elementEnd"&&rc(l,t,n)?yield l:a.type=="elementStart"&&l.is("model:element")&&l.root.document.model.schema.isBlock(l)&&i.jumpTo(_._createAt(l,"end"))}const o=Fn(n.end,t);oc(o,n)&&(yield o)}}containsEntireContent(t=this.anchor.root){const n=_._createAt(t,0),r=_._createAt(t,"end");return n.isTouching(this.getFirstPosition())&&r.isTouching(this.getLastPosition())}_pushRange(t){this._checkRange(t),this._ranges.push(new p(t.start,t.end))}_checkRange(t){for(let n=0;n<this._ranges.length;n++)if(t.isIntersecting(this._ranges[n]))throw new g("model-selection-range-intersects",[this,t],{addedRange:t,intersectingRange:this._ranges[n]})}_replaceAllRanges(t){this._removeAllRanges();for(const n of t)this._pushRange(n)}_removeAllRanges(){for(;this._ranges.length>0;)this._popRange()}_popRange(){this._ranges.pop()}}ie.prototype.is=function(e){return e==="selection"||e==="model:selection"};function Ns(e,s){return s.has(e)?!1:(s.add(e),e.root.document.model.schema.isBlock(e)&&!!e.parent)}function rc(e,s,t){return Ns(e,s)&&ze(e,t)}function Fn(e,s){const n=e.parent.root.document.model.schema,r=e.parent.getAncestors({parentFirst:!0,includeSelf:!0});let i=!1;const o=r.find(a=>i?!1:(i=n.isLimit(a),!i&&Ns(a,s)));return r.forEach(a=>s.add(a)),o}function ze(e,s){const t=ac(e);return t?!s.containsRange(p._createOn(t),!0):!0}function ic(e,s){return e?s.isCollapsed||e.isEmpty?!0:s.start.isTouching(_._createAt(e,e.maxOffset))?!1:ze(e,s):!1}function oc(e,s){return e?s.isCollapsed||e.isEmpty?!0:s.end.isTouching(_._createAt(e,0))?!1:ze(e,s):!1}function ac(e){const s=e.root.document.model.schema;let t=e.parent;for(;t;){if(s.isBlock(t))return t;t=t.parent}}class oe extends O(p){constructor(s,t){super(s,t),lc.call(this)}detach(){this.stopListening()}toRange(){return new p(this.start,this.end)}static fromRange(s){return new oe(s.start,s.end)}}oe.prototype.is=function(e){return e==="liveRange"||e==="model:liveRange"||e=="range"||e==="model:range"};function lc(){this.listenTo(this.root.document.model,"applyOperation",(e,s)=>{const t=s[0];t.isDocumentOperation&&cc.call(this,t)},{priority:"low"})}function cc(e){const s=this.getTransformedByOperation(e),t=p._createFromRanges(s),n=!t.isEqual(this),r=uc(this,e);let i=null;if(n){t.root.rootName=="$graveyard"&&(e.type=="remove"?i=e.sourcePosition:i=e.deletionPosition);const o=this.toRange();this.start=t.start,this.end=t.end,this.fire("change:range",o,{deletionPosition:i})}else r&&this.fire("change:content",this.toRange(),{deletionPosition:i})}function uc(e,s){switch(s.type){case"insert":return e.containsPosition(s.position);case"move":case"remove":case"reinsert":case"merge":return e.containsPosition(s.sourcePosition)||e.start.isEqual(s.sourcePosition)||e.containsPosition(s.targetPosition);case"split":return e.containsPosition(s.splitPosition)||e.containsPosition(s.insertionPosition)}return!1}class E extends St{constructor(t,n){super(n);h(this,"_data");this._data=t||""}get offsetSize(){return this.data.length}get data(){return this._data}toJSON(){const t=super.toJSON();return t.data=this.data,t}_clone(){return new E(this.data,this.getAttributes())}static fromJSON(t){return new E(t.data,t.attributes)}}E.prototype.is=function(e){return e==="$text"||e==="model:$text"||e==="text"||e==="model:text"||e==="node"||e==="model:node"};const qt="selection:";class hc extends O(rt){constructor(t){super();h(this,"_selection");this._selection=new fc(t),this._selection.delegate("change:range").to(this),this._selection.delegate("change:attribute").to(this),this._selection.delegate("change:marker").to(this)}get isCollapsed(){return this._selection.isCollapsed}get anchor(){return this._selection.anchor}get focus(){return this._selection.focus}get rangeCount(){return this._selection.rangeCount}get hasOwnRange(){return this._selection.hasOwnRange}get isBackward(){return this._selection.isBackward}get isGravityOverridden(){return this._selection.isGravityOverridden}get markers(){return this._selection.markers}get _ranges(){return this._selection._ranges}getRanges(){return this._selection.getRanges()}getFirstPosition(){return this._selection.getFirstPosition()}getLastPosition(){return this._selection.getLastPosition()}getFirstRange(){return this._selection.getFirstRange()}getLastRange(){return this._selection.getLastRange()}getSelectedBlocks(){return this._selection.getSelectedBlocks()}getSelectedElement(){return this._selection.getSelectedElement()}containsEntireContent(t){return this._selection.containsEntireContent(t)}destroy(){this._selection.destroy()}getAttributeKeys(){return this._selection.getAttributeKeys()}getAttributes(){return this._selection.getAttributes()}getAttribute(t){return this._selection.getAttribute(t)}hasAttribute(t){return this._selection.hasAttribute(t)}refresh(){this._selection.updateMarkers(),this._selection._updateAttributes(!1)}observeMarkers(t){this._selection.observeMarkers(t)}_setFocus(t,n){this._selection.setFocus(t,n)}_setTo(...t){this._selection.setTo(...t)}_setAttribute(t,n){this._selection.setAttribute(t,n)}_removeAttribute(t){this._selection.removeAttribute(t)}_getStoredAttributes(){return this._selection.getStoredAttributes()}_overrideGravity(){return this._selection.overrideGravity()}_restoreGravity(t){this._selection.restoreGravity(t)}static _getStoreAttributeKey(t){return qt+t}static _isStoreAttributeKey(t){return t.startsWith(qt)}}hc.prototype.is=function(e){return e==="selection"||e=="model:selection"||e=="documentSelection"||e=="model:documentSelection"};class fc extends ie{constructor(t){super();h(this,"markers",new Ml({idProperty:"name"}));h(this,"_model");h(this,"_document");h(this,"_attributePriority",new Map);h(this,"_selectionRestorePosition",null);h(this,"_hasChangedRange",!1);h(this,"_overriddenGravityRegister",new Set);h(this,"_observedMarkers",new Set);this._model=t.model,this._document=t,this.listenTo(this._model,"applyOperation",(n,r)=>{const i=r[0];!i.isDocumentOperation||i.type=="marker"||i.type=="rename"||i.type=="noop"||(this._ranges.length==0&&this._selectionRestorePosition&&this._fixGraveyardSelection(this._selectionRestorePosition),this._selectionRestorePosition=null,this._hasChangedRange&&(this._hasChangedRange=!1,this.fire("change:range",{directChange:!1})))},{priority:"lowest"}),this.on("change:range",()=>{this._validateSelectionRanges(this.getRanges())}),this.listenTo(this._model.markers,"update",(n,r,i,o)=>{this._updateMarker(r,o)}),this.listenTo(this._document,"change",(n,r)=>{dc(this._model,r)})}get isCollapsed(){return this._ranges.length===0?this._document._getDefaultRange().isCollapsed:super.isCollapsed}get anchor(){return super.anchor||this._document._getDefaultRange().start}get focus(){return super.focus||this._document._getDefaultRange().end}get rangeCount(){return this._ranges.length?this._ranges.length:1}get hasOwnRange(){return this._ranges.length>0}get isGravityOverridden(){return!!this._overriddenGravityRegister.size}destroy(){for(let t=0;t<this._ranges.length;t++)this._ranges[t].detach();this.stopListening()}*getRanges(){this._ranges.length?yield*super.getRanges():yield this._document._getDefaultRange()}getFirstRange(){return super.getFirstRange()||this._document._getDefaultRange()}getLastRange(){return super.getLastRange()||this._document._getDefaultRange()}setTo(...t){super.setTo(...t),this._updateAttributes(!0),this.updateMarkers()}setFocus(t,n){super.setFocus(t,n),this._updateAttributes(!0),this.updateMarkers()}setAttribute(t,n){if(this._setAttribute(t,n)){const r=[t];this.fire("change:attribute",{attributeKeys:r,directChange:!0})}}removeAttribute(t){if(this._removeAttribute(t)){const n=[t];this.fire("change:attribute",{attributeKeys:n,directChange:!0})}}overrideGravity(){const t=re();return this._overriddenGravityRegister.add(t),this._overriddenGravityRegister.size===1&&this._updateAttributes(!0),t}restoreGravity(t){if(!this._overriddenGravityRegister.has(t))throw new g("document-selection-gravity-wrong-restore",this,{uid:t});this._overriddenGravityRegister.delete(t),this.isGravityOverridden||this._updateAttributes(!0)}observeMarkers(t){this._observedMarkers.add(t),this.updateMarkers()}_replaceAllRanges(t){this._validateSelectionRanges(t),super._replaceAllRanges(t)}_popRange(){this._ranges.pop().detach()}_pushRange(t){const n=this._prepareRange(t);n&&this._ranges.push(n)}_validateSelectionRanges(t){for(const n of t)if(!this._document._validateSelectionRange(n))throw new g("document-selection-wrong-position",this,{range:n})}_prepareRange(t){if(this._checkRange(t),t.root==this._document.graveyard)return;const n=oe.fromRange(t);return n.on("change:range",(r,i,o)=>{if(this._hasChangedRange=!0,n.root==this._document.graveyard){this._selectionRestorePosition=o.deletionPosition;const a=this._ranges.indexOf(n);this._ranges.splice(a,1),n.detach()}}),n}updateMarkers(){if(!this._observedMarkers.size)return;const t=[];let n=!1;for(const i of this._model.markers){const o=i.name.split(":",1)[0];if(!this._observedMarkers.has(o))continue;const a=i.getRange();for(const l of this.getRanges())a.containsRange(l,!l.isCollapsed)&&t.push(i)}const r=Array.from(this.markers);for(const i of t)this.markers.has(i)||(this.markers.add(i),n=!0);for(const i of Array.from(this.markers))t.includes(i)||(this.markers.remove(i),n=!0);n&&this.fire("change:marker",{oldMarkers:r,directChange:!1})}_updateMarker(t,n){const r=t.name.split(":",1)[0];if(!this._observedMarkers.has(r))return;let i=!1;const o=Array.from(this.markers),a=this.markers.has(t);if(!n)a&&(this.markers.remove(t),i=!0);else{let l=!1;for(const c of this.getRanges())if(n.containsRange(c,!c.isCollapsed)){l=!0;break}l&&!a?(this.markers.add(t),i=!0):!l&&a&&(this.markers.remove(t),i=!0)}i&&this.fire("change:marker",{oldMarkers:o,directChange:!1})}_updateAttributes(t){const n=Vt(this._getSurroundingAttributes()),r=Vt(this.getAttributes());if(t)this._attributePriority=new Map,this._attrs=new Map;else for(const[o,a]of this._attributePriority)a=="low"&&(this._attrs.delete(o),this._attributePriority.delete(o));this._setAttributesTo(n);const i=[];for(const[o,a]of this.getAttributes())(!r.has(o)||r.get(o)!==a)&&i.push(o);for(const[o]of r)this.hasAttribute(o)||i.push(o);i.length>0&&this.fire("change:attribute",{attributeKeys:i,directChange:!1})}_setAttribute(t,n,r=!0){const i=r?"normal":"low";return i=="low"&&this._attributePriority.get(t)=="normal"||super.getAttribute(t)===n?!1:(this._attrs.set(t,n),this._attributePriority.set(t,i),!0)}_removeAttribute(t,n=!0){const r=n?"normal":"low";return r=="low"&&this._attributePriority.get(t)=="normal"||(this._attributePriority.set(t,r),!super.hasAttribute(t))?!1:(this._attrs.delete(t),!0)}_setAttributesTo(t){const n=new Set;for(const[r,i]of this.getAttributes())t.get(r)!==i&&this._removeAttribute(r,!1);for(const[r,i]of t)this._setAttribute(r,i,!1)&&n.add(r);return n}*getStoredAttributes(){const t=this.getFirstPosition().parent;if(this.isCollapsed&&t.isEmpty)for(const n of t.getAttributeKeys())n.startsWith(qt)&&(yield[n.substr(qt.length),t.getAttribute(n)])}_getSurroundingAttributes(){const t=this.getFirstPosition(),n=this._model.schema;if(t.root.rootName=="$graveyard")return null;let r=null;if(this.isCollapsed){const i=t.textNode?t.textNode:t.nodeBefore,o=t.textNode?t.textNode:t.nodeAfter;if(this.isGravityOverridden||(r=Ot(i,n)),r||(r=Ot(o,n)),!this.isGravityOverridden&&!r){let a=i;for(;a&&!r;)a=a.previousSibling,r=Ot(a,n)}if(!r){let a=o;for(;a&&!r;)a=a.nextSibling,r=Ot(a,n)}r||(r=this.getStoredAttributes())}else{const i=this.getFirstRange();for(const o of i){if(o.item.is("element")&&n.isObject(o.item)){r=Ot(o.item,n);break}if(o.type=="text"){r=o.item.getAttributes();break}}}return r}_fixGraveyardSelection(t){const n=this._model.schema.getNearestSelectionRange(t);n&&this._pushRange(n)}}function Ot(e,s){if(!e)return null;if(e instanceof ut||e instanceof E)return e.getAttributes();if(!s.isInline(e))return null;if(!s.isObject(e))return[];const t=[];for(const[n,r]of e.getAttributes())s.checkAttribute("$text",n)&&s.getAttributeProperties(n).copyFromObject!==!1&&t.push([n,r]);return t}function dc(e,s){const t=e.document.differ;for(const n of t.getChanges()){if(n.type!="insert")continue;const r=n.position.parent;n.length===r.maxOffset&&e.enqueueChange(s,o=>{const a=Array.from(r.getAttributeKeys()).filter(l=>l.startsWith(qt));for(const l of a)o.removeAttribute(l,r)})}}class Ft{constructor(s){h(this,"_nodes",[]);h(this,"_offsetToNode",[]);s&&this._insertNodes(0,s)}[Symbol.iterator](){return this._nodes[Symbol.iterator]()}get length(){return this._nodes.length}get maxOffset(){return this._offsetToNode.length}getNode(s){return this._nodes[s]||null}getNodeAtOffset(s){return this._offsetToNode[s]||null}getNodeIndex(s){return s.index}getNodeStartOffset(s){return s.startOffset}indexToOffset(s){if(s==this._nodes.length)return this.maxOffset;const t=this._nodes[s];if(!t)throw new g("model-nodelist-index-out-of-bounds",this);return this.getNodeStartOffset(t)}offsetToIndex(s){if(s==this._offsetToNode.length)return this._nodes.length;const t=this._offsetToNode[s];if(!t)throw new g("model-nodelist-offset-out-of-bounds",this,{offset:s,nodeList:this});return this.getNodeIndex(t)}_insertNodes(s,t){const n=[];for(const i of t){if(!(i instanceof St))throw new g("model-nodelist-insertnodes-not-node",this);n.push(i)}let r=this.indexToOffset(s);Mn(this._nodes,n,s),Mn(this._offsetToNode,gc(n),r);for(let i=s;i<this._nodes.length;i++)this._nodes[i]._index=i,this._nodes[i]._startOffset=r,r+=this._nodes[i].offsetSize}_removeNodes(s,t=1){if(t==0)return[];let n=this.indexToOffset(s);const r=this._nodes.splice(s,t),i=r[r.length-1],o=i.startOffset+i.offsetSize-n;this._offsetToNode.splice(n,o);for(const a of r)a._index=null,a._startOffset=null;for(let a=s;a<this._nodes.length;a++)this._nodes[a]._index=a,this._nodes[a]._startOffset=n,n+=this._nodes[a].offsetSize;return r}_removeNodesArray(s){if(s.length==0)return;for(const n of s)n._index=null,n._startOffset=null;this._nodes=this._nodes.filter(n=>n.index!==null),this._offsetToNode=this._offsetToNode.filter(n=>n.index!==null);let t=0;for(let n=0;n<this._nodes.length;n++)this._nodes[n]._index=n,this._nodes[n]._startOffset=t,t+=this._nodes[n].offsetSize}toJSON(){return this._nodes.map(s=>s.toJSON())}}function gc(e){const s=[];let t=0;for(const n of e)for(let r=0;r<n.offsetSize;r++)s[t++]=n;return s}class K extends St{constructor(t,n,r){super(n);h(this,"name");h(this,"_children",new Ft);this.name=t,r&&this._insertChild(0,r)}get childCount(){return this._children.length}get maxOffset(){return this._children.maxOffset}get isEmpty(){return this.childCount===0}getChild(t){return this._children.getNode(t)}getChildAtOffset(t){return this._children.getNodeAtOffset(t)}getChildren(){return this._children[Symbol.iterator]()}getChildIndex(t){return this._children.getNodeIndex(t)}getChildStartOffset(t){return this._children.getNodeStartOffset(t)}offsetToIndex(t){return this._children.offsetToIndex(t)}getNodeByPath(t){let n=this;for(const r of t)n=n.getChildAtOffset(r);return n}findAncestor(t,n={}){let r=n.includeSelf?this:this.parent;for(;r;){if(r.name===t)return r;r=r.parent}return null}toJSON(){const t=super.toJSON();if(t.name=this.name,this._children.length>0){t.children=[];for(const n of this._children)t.children.push(n.toJSON())}return t}_clone(t=!1){const n=t?mc(this._children):void 0;return new K(this.name,this.getAttributes(),n)}_appendChild(t){this._insertChild(this.childCount,t)}_insertChild(t,n){const r=pc(n);for(const i of r)i.parent!==null&&i._remove(),i.parent=this;this._children._insertNodes(t,r)}_removeChildren(t,n=1){const r=this._children._removeNodes(t,n);for(const i of r)i.parent=null;return r}_removeChildrenArray(t){this._children._removeNodesArray(t);for(const n of t)n.parent=null}static fromJSON(t){let n;if(t.children){n=[];for(const r of t.children)r.name?n.push(K.fromJSON(r)):n.push(E.fromJSON(r))}return new K(t.name,t.attributes,n)}}K.prototype.is=function(e,s){return s?s===this.name&&(e==="element"||e==="model:element"):e==="element"||e==="model:element"||e==="node"||e==="model:node"};function pc(e){if(typeof e=="string")return[new E(e)];X(e)||(e=[e]);const s=[];for(const t of e)typeof t=="string"?s.push(new E(t)):t instanceof ut?s.push(new E(t.data,t.getAttributes())):s.push(t);return s}function mc(e){const s=[];for(const t of e)s.push(t._clone(!0));return s}/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */class ${constructor(s){h(this,"baseVersion");h(this,"isDocumentOperation");h(this,"batch");this.baseVersion=s,this.isDocumentOperation=this.baseVersion!==null,this.batch=null}_validate(){}toJSON(){const s=Object.assign({},this);return s.__className=this.constructor.className,delete s.batch,delete s.isDocumentOperation,s}static get className(){return"Operation"}static fromJSON(s,t){return new this(s.baseVersion)}}function Ue(e,s){const t=Bs(s),n=t.reduce((o,a)=>o+a.offsetSize,0),r=e.parent;zt(e);const i=e.index;return r._insertChild(i,t),Jt(r,i+t.length),Jt(r,i),new p(e,e.getShiftedBy(n))}function _c(e){if(!e.isFlat)throw new g("operation-utils-remove-range-not-flat",this);const s=e.start.parent;zt(e.start),zt(e.end);const t=s._removeChildren(e.start.index,e.end.index-e.start.index);return Jt(s,e.start.index),t}function jt(e,s){if(!e.isFlat)throw new g("operation-utils-move-range-not-flat",this);const t=_c(e);return s=s._getTransformedByDeletion(e.start,e.end.offset-e.start.offset),Ue(s,t)}function yc(e,s,t){zt(e.start),zt(e.end);for(const n of e.getItems({shallow:!0})){const r=n.is("$textProxy")?n.textNode:n;t!==null?r._setAttribute(s,t):r._removeAttribute(s),Jt(r.parent,r.index)}Jt(e.end.parent,e.end.index)}function Bs(e){const s=[];function t(n){if(typeof n=="string")s.push(new E(n));else if(n instanceof ut)s.push(new E(n.data,n.getAttributes()));else if(n instanceof St)s.push(n);else if(X(n))for(const r of n)t(r)}t(e);for(let n=1;n<s.length;n++){const r=s[n],i=s[n-1];r instanceof E&&i instanceof E&&Fs(r,i)&&(s.splice(n-1,2,new E(i.data+r.data,i.getAttributes())),n--)}return s}function Jt(e,s){const t=e.getChild(s-1),n=e.getChild(s);if(t&&n&&t.is("$text")&&n.is("$text")&&Fs(t,n)){const r=new E(t.data+n.data,t.getAttributes());e._removeChildren(s-1,2),e._insertChild(s-1,r)}}function zt(e){const s=e.textNode,t=e.parent;if(s){const n=e.offset-s.startOffset,r=s.index;t._removeChildren(r,1);const i=new E(s.data.substr(0,n),s.getAttributes()),o=new E(s.data.substr(n),s.getAttributes());t._insertChild(r,[i,o])}}function Fs(e,s){const t=e.getAttributes(),n=s.getAttributes();for(const r of t){if(r[1]!==s.getAttribute(r[0]))return!1;n.next()}return n.next().done}class A extends ${constructor(t,n,r,i){super(i);h(this,"sourcePosition");h(this,"howMany");h(this,"targetPosition");this.sourcePosition=t.clone(),this.sourcePosition.stickiness="toNext",this.howMany=n,this.targetPosition=r.clone(),this.targetPosition.stickiness="toNone"}get type(){return this.targetPosition.root.rootName=="$graveyard"?"remove":this.sourcePosition.root.rootName=="$graveyard"?"reinsert":"move"}get affectedSelectable(){return[p._createFromPositionAndShift(this.sourcePosition,this.howMany),p._createFromPositionAndShift(this.targetPosition,0)]}clone(){return new A(this.sourcePosition,this.howMany,this.targetPosition,this.baseVersion)}getMovedRangeStart(){return this.targetPosition._getTransformedByDeletion(this.sourcePosition,this.howMany)}getReversed(){const t=this.sourcePosition._getTransformedByInsertion(this.targetPosition,this.howMany);return new A(this.getMovedRangeStart(),this.howMany,t,this.baseVersion+1)}_validate(){const t=this.sourcePosition.parent,n=this.targetPosition.parent,r=this.sourcePosition.offset,i=this.targetPosition.offset;if(r+this.howMany>t.maxOffset)throw new g("move-operation-nodes-do-not-exist",this);if(t===n&&r<i&&i<r+this.howMany)throw new g("move-operation-range-into-itself",this);if(this.sourcePosition.root==this.targetPosition.root&&B(this.sourcePosition.getParentPath(),this.targetPosition.getParentPath())=="prefix"){const o=this.sourcePosition.path.length-1;if(this.targetPosition.path[o]>=r&&this.targetPosition.path[o]<r+this.howMany)throw new g("move-operation-node-into-itself",this)}}_execute(){jt(p._createFromPositionAndShift(this.sourcePosition,this.howMany),this.targetPosition)}toJSON(){const t=super.toJSON();return t.sourcePosition=this.sourcePosition.toJSON(),t.targetPosition=this.targetPosition.toJSON(),t}static get className(){return"MoveOperation"}static fromJSON(t,n){const r=_.fromJSON(t.sourcePosition,n),i=_.fromJSON(t.targetPosition,n);return new this(r,t.howMany,i,t.baseVersion)}}class M extends ${constructor(t,n,r){super(r);h(this,"position");h(this,"nodes");h(this,"shouldReceiveAttributes");this.position=t.clone(),this.position.stickiness="toNone",this.nodes=new Ft(Bs(n)),this.shouldReceiveAttributes=!1}get type(){return"insert"}get howMany(){return this.nodes.maxOffset}get affectedSelectable(){return this.position.clone()}clone(){const t=new Ft([...this.nodes].map(r=>r._clone(!0))),n=new M(this.position,t,this.baseVersion);return n.shouldReceiveAttributes=this.shouldReceiveAttributes,n}getReversed(){const t=this.position.root.document.graveyard,n=new _(t,[0]);return new A(this.position,this.nodes.maxOffset,n,this.baseVersion+1)}_validate(){const t=this.position.parent;if(!t||t.maxOffset<this.position.offset)throw new g("insert-operation-position-invalid",this)}_execute(){const t=this.nodes;this.nodes=new Ft([...t].map(n=>n._clone(!0))),Ue(this.position,t)}toJSON(){const t=super.toJSON();return t.position=this.position.toJSON(),t.nodes=this.nodes.toJSON(),t}static get className(){return"InsertOperation"}static fromJSON(t,n){const r=[];for(const o of t.nodes)o.name?r.push(K.fromJSON(o)):r.push(E.fromJSON(o));const i=new M(_.fromJSON(t.position,n),r,t.baseVersion);return i.shouldReceiveAttributes=t.shouldReceiveAttributes,i}}class T extends ${constructor(t,n,r,i,o){super(o);h(this,"splitPosition");h(this,"howMany");h(this,"insertionPosition");h(this,"graveyardPosition");this.splitPosition=t.clone(),this.splitPosition.stickiness="toNext",this.howMany=n,this.insertionPosition=r,this.graveyardPosition=i?i.clone():null,this.graveyardPosition&&(this.graveyardPosition.stickiness="toNext")}get type(){return"split"}get moveTargetPosition(){const t=this.insertionPosition.path.slice();return t.push(0),new _(this.insertionPosition.root,t)}get movedRange(){const t=this.splitPosition.getShiftedBy(Number.POSITIVE_INFINITY);return new p(this.splitPosition,t)}get affectedSelectable(){const t=[p._createFromPositionAndShift(this.splitPosition,0),p._createFromPositionAndShift(this.insertionPosition,0)];return this.graveyardPosition&&t.push(p._createFromPositionAndShift(this.graveyardPosition,0)),t}clone(){return new T(this.splitPosition,this.howMany,this.insertionPosition,this.graveyardPosition,this.baseVersion)}getReversed(){const t=this.splitPosition.root.document.graveyard,n=new _(t,[0]);return new N(this.moveTargetPosition,this.howMany,this.splitPosition,n,this.baseVersion+1)}_validate(){const t=this.splitPosition.parent,n=this.splitPosition.offset;if(!t||t.maxOffset<n)throw new g("split-operation-position-invalid",this);if(t.parent){if(this.howMany!=t.maxOffset-this.splitPosition.offset)throw new g("split-operation-how-many-invalid",this);if(this.graveyardPosition&&!this.graveyardPosition.nodeAfter)throw new g("split-operation-graveyard-position-invalid",this)}else throw new g("split-operation-split-in-root",this)}_execute(){const t=this.splitPosition.parent;if(this.graveyardPosition)jt(p._createFromPositionAndShift(this.graveyardPosition,1),this.insertionPosition);else{const r=t._clone();Ue(this.insertionPosition,r)}const n=new p(_._createAt(t,this.splitPosition.offset),_._createAt(t,t.maxOffset));jt(n,this.moveTargetPosition)}toJSON(){const t=super.toJSON();return t.splitPosition=this.splitPosition.toJSON(),t.insertionPosition=this.insertionPosition.toJSON(),this.graveyardPosition&&(t.graveyardPosition=this.graveyardPosition.toJSON()),t}static get className(){return"SplitOperation"}static getInsertionPosition(t){const n=t.path.slice(0,-1);return n[n.length-1]++,new _(t.root,n,"toPrevious")}static fromJSON(t,n){const r=_.fromJSON(t.splitPosition,n),i=_.fromJSON(t.insertionPosition,n),o=t.graveyardPosition?_.fromJSON(t.graveyardPosition,n):null;return new this(r,t.howMany,i,o,t.baseVersion)}}class N extends ${constructor(t,n,r,i,o){super(o);h(this,"sourcePosition");h(this,"howMany");h(this,"targetPosition");h(this,"graveyardPosition");this.sourcePosition=t.clone(),this.sourcePosition.stickiness="toPrevious",this.howMany=n,this.targetPosition=r.clone(),this.targetPosition.stickiness="toNext",this.graveyardPosition=i.clone()}get type(){return"merge"}get deletionPosition(){return new _(this.sourcePosition.root,this.sourcePosition.path.slice(0,-1))}get movedRange(){const t=this.sourcePosition.getShiftedBy(Number.POSITIVE_INFINITY);return new p(this.sourcePosition,t)}get affectedSelectable(){const t=this.sourcePosition.parent;return[p._createOn(t),p._createFromPositionAndShift(this.targetPosition,0),p._createFromPositionAndShift(this.graveyardPosition,0)]}clone(){return new N(this.sourcePosition,this.howMany,this.targetPosition,this.graveyardPosition,this.baseVersion)}getReversed(){const t=this.targetPosition._getTransformedByMergeOperation(this),n=this.sourcePosition.path.slice(0,-1),r=new _(this.sourcePosition.root,n)._getTransformedByMergeOperation(this);return new T(t,this.howMany,r,this.graveyardPosition,this.baseVersion+1)}_validate(){const t=this.sourcePosition.parent,n=this.targetPosition.parent;if(t.parent)if(n.parent){if(this.howMany!=t.maxOffset)throw new g("merge-operation-how-many-invalid",this)}else throw new g("merge-operation-target-position-invalid",this);else throw new g("merge-operation-source-position-invalid",this)}_execute(){const t=this.sourcePosition.parent,n=p._createIn(t);jt(n,this.targetPosition),jt(p._createOn(t),this.graveyardPosition)}toJSON(){const t=super.toJSON();return t.sourcePosition=t.sourcePosition.toJSON(),t.targetPosition=t.targetPosition.toJSON(),t.graveyardPosition=t.graveyardPosition.toJSON(),t}static get className(){return"MergeOperation"}static fromJSON(t,n){const r=_.fromJSON(t.sourcePosition,n),i=_.fromJSON(t.targetPosition,n),o=_.fromJSON(t.graveyardPosition,n);return new this(r,t.howMany,i,o,t.baseVersion)}}class I extends ${constructor(t,n,r,i,o,a){super(a);h(this,"name");h(this,"oldRange");h(this,"newRange");h(this,"affectsData");h(this,"_markers");this.name=t,this.oldRange=n?n.clone():null,this.newRange=r?r.clone():null,this.affectsData=o,this._markers=i}get type(){return"marker"}get affectedSelectable(){const t=[];return this.oldRange&&t.push(this.oldRange.clone()),this.newRange&&(this.oldRange?t.push(...this.newRange.getDifference(this.oldRange)):t.push(this.newRange.clone())),t}clone(){return new I(this.name,this.oldRange,this.newRange,this._markers,this.affectsData,this.baseVersion)}getReversed(){return new I(this.name,this.newRange,this.oldRange,this._markers,this.affectsData,this.baseVersion+1)}_execute(){this.newRange?this._markers._set(this.name,this.newRange,!0,this.affectsData):this._markers._remove(this.name)}toJSON(){const t=super.toJSON();return this.oldRange&&(t.oldRange=this.oldRange.toJSON()),this.newRange&&(t.newRange=this.newRange.toJSON()),delete t._markers,t}static get className(){return"MarkerOperation"}static fromJSON(t,n){return new I(t.name,t.oldRange?p.fromJSON(t.oldRange,n):null,t.newRange?p.fromJSON(t.newRange,n):null,n.model.markers,t.affectsData,t.baseVersion)}}class x extends ${constructor(t,n,r,i,o){super(o);h(this,"range");h(this,"key");h(this,"oldValue");h(this,"newValue");this.range=t.clone(),this.key=n,this.oldValue=r===void 0?null:r,this.newValue=i===void 0?null:i}get type(){return this.oldValue===null?"addAttribute":this.newValue===null?"removeAttribute":"changeAttribute"}get affectedSelectable(){return this.range.clone()}clone(){return new x(this.range,this.key,this.oldValue,this.newValue,this.baseVersion)}getReversed(){return new x(this.range,this.key,this.newValue,this.oldValue,this.baseVersion+1)}toJSON(){const t=super.toJSON();return t.range=this.range.toJSON(),t}_validate(){if(!this.range.isFlat)throw new g("attribute-operation-range-not-flat",this);for(const t of this.range.getItems({shallow:!0})){if(this.oldValue!==null&&!bn(t.getAttribute(this.key),this.oldValue))throw new g("attribute-operation-wrong-old-value",this,{item:t,key:this.key,value:this.oldValue});if(this.oldValue===null&&this.newValue!==null&&t.hasAttribute(this.key))throw new g("attribute-operation-attribute-exists",this,{node:t,key:this.key})}}_execute(){bn(this.oldValue,this.newValue)||yc(this.range,this.key,this.newValue)}static get className(){return"AttributeOperation"}static fromJSON(t,n){return new x(p.fromJSON(t.range,n),t.key,t.oldValue,t.newValue,t.baseVersion)}}class R extends ${get type(){return"noop"}get affectedSelectable(){return null}clone(){return new R(this.baseVersion)}getReversed(){return new R(this.baseVersion+1)}_execute(){}static get className(){return"NoOperation"}}class F extends ${constructor(t,n,r,i){super(i);h(this,"position");h(this,"oldName");h(this,"newName");this.position=t,this.position.stickiness="toNext",this.oldName=n,this.newName=r}get type(){return"rename"}get affectedSelectable(){return this.position.nodeAfter}clone(){return new F(this.position.clone(),this.oldName,this.newName,this.baseVersion)}getReversed(){return new F(this.position.clone(),this.newName,this.oldName,this.baseVersion+1)}_validate(){const t=this.position.nodeAfter;if(t instanceof K){if(t.name!==this.oldName)throw new g("rename-operation-wrong-name",this)}else throw new g("rename-operation-wrong-position",this)}_execute(){const t=this.position.nodeAfter;t.name=this.newName}toJSON(){const t=super.toJSON();return t.position=this.position.toJSON(),t}static get className(){return"RenameOperation"}static fromJSON(t,n){return new F(_.fromJSON(t.position,n),t.oldName,t.newName,t.baseVersion)}}class Q extends ${constructor(t,n,r,i,o){super(o);h(this,"root");h(this,"key");h(this,"oldValue");h(this,"newValue");this.root=t,this.key=n,this.oldValue=r===void 0?null:r,this.newValue=i===void 0?null:i}get type(){return this.oldValue===null?"addRootAttribute":this.newValue===null?"removeRootAttribute":"changeRootAttribute"}get affectedSelectable(){return this.root}clone(){return new Q(this.root,this.key,this.oldValue,this.newValue,this.baseVersion)}getReversed(){return new Q(this.root,this.key,this.newValue,this.oldValue,this.baseVersion+1)}_validate(){if(this.root!=this.root.root||this.root.is("documentFragment"))throw new g("rootattribute-operation-not-a-root",this,{root:this.root,key:this.key});if(this.oldValue!==null&&this.root.getAttribute(this.key)!==this.oldValue)throw new g("rootattribute-operation-wrong-old-value",this,{root:this.root,key:this.key});if(this.oldValue===null&&this.newValue!==null&&this.root.hasAttribute(this.key))throw new g("rootattribute-operation-attribute-exists",this,{root:this.root,key:this.key})}_execute(){this.newValue!==null?this.root._setAttribute(this.key,this.newValue):this.root._removeAttribute(this.key)}toJSON(){const t=super.toJSON();return t.root=this.root.toJSON(),t}static get className(){return"RootAttributeOperation"}static fromJSON(t,n){if(!n.getRoot(t.root))throw new g("rootattribute-operation-fromjson-no-root",this,{rootName:t.root});return new Q(n.getRoot(t.root),t.key,t.oldValue,t.newValue,t.baseVersion)}}class tt extends ${constructor(t,n,r,i,o){super(o);h(this,"rootName");h(this,"elementName");h(this,"isAdd");h(this,"_document");if(this.rootName=t,this.elementName=n,this.isAdd=r,this._document=i,!this._document.getRoot(this.rootName)){const a=this._document.createRoot(this.elementName,this.rootName);a._isAttached=!1}}get type(){return this.isAdd?"addRoot":"detachRoot"}get affectedSelectable(){return this._document.getRoot(this.rootName)}clone(){return new tt(this.rootName,this.elementName,this.isAdd,this._document,this.baseVersion)}getReversed(){return new tt(this.rootName,this.elementName,!this.isAdd,this._document,this.baseVersion+1)}_execute(){this._document.getRoot(this.rootName)._isAttached=this.isAdd}toJSON(){const t=super.toJSON();return delete t._document,t}static get className(){return"RootOperation"}static fromJSON(t,n){return new tt(t.rootName,t.elementName,t.isAdd,n,t.baseVersion)}}const D={};D[x.className]=x;D[M.className]=M;D[I.className]=I;D[A.className]=A;D[R.className]=R;D[$.className]=$;D[F.className]=F;D[Q.className]=Q;D[tt.className]=tt;D[T.className]=T;D[N.className]=N;const In=new Map;function P(e,s,t){let n=In.get(e);n||(n=new Map,In.set(e,n)),n.set(s,t)}P(x,x,(e,s,t)=>{if(e.key===s.key&&e.range.start.hasSameParentAs(s.range.start)){const n=e.range.getDifference(s.range).map(i=>new x(i,e.key,e.oldValue,e.newValue,0)),r=e.range.getIntersection(s.range);return r&&t.aIsStrong&&n.push(new x(r,s.key,s.newValue,e.newValue,0)),n.length==0?[new R(0)]:n}else return[e]});P(x,M,(e,s)=>{if(e.range.start.hasSameParentAs(s.position)&&e.range.containsPosition(s.position)){const n=e.range._getTransformedByInsertion(s.position,s.howMany,!s.shouldReceiveAttributes).map(r=>new x(r,e.key,e.oldValue,e.newValue,e.baseVersion));if(s.shouldReceiveAttributes){const r=Is(s,e.key,e.oldValue);r&&n.unshift(r)}return n}return e.range=e.range._getTransformedByInsertion(s.position,s.howMany,!1)[0],[e]});function Is(e,s,t){const r=e.nodes.getNode(0).getAttribute(s);if(r==t)return null;const i=new p(e.position,e.position.getShiftedBy(e.howMany));return new x(i,s,r,t,0)}P(x,N,(e,s)=>{const t=[];e.range.start.hasSameParentAs(s.deletionPosition)&&(e.range.containsPosition(s.deletionPosition)||e.range.start.isEqual(s.deletionPosition))&&t.push(p._createFromPositionAndShift(s.graveyardPosition,1));const n=e.range._getTransformedByMergeOperation(s);return n.isCollapsed||t.push(n),t.map(r=>new x(r,e.key,e.oldValue,e.newValue,e.baseVersion))});P(x,A,(e,s)=>wc(e.range,s).map(n=>new x(n,e.key,e.oldValue,e.newValue,e.baseVersion)));function wc(e,s){const t=p._createFromPositionAndShift(s.sourcePosition,s.howMany);let n=null,r=[];t.containsRange(e,!0)?n=e:e.start.hasSameParentAs(t.start)?(r=e.getDifference(t),n=e.getIntersection(t)):r=[e];const i=[];for(let o of r){o=o._getTransformedByDeletion(s.sourcePosition,s.howMany);const a=s.getMovedRangeStart(),l=o.start.hasSameParentAs(a),c=o._getTransformedByInsertion(a,s.howMany,l);i.push(...c)}return n&&i.push(n._getTransformedByMove(s.sourcePosition,s.targetPosition,s.howMany,!1)[0]),i}P(x,T,(e,s)=>{if(e.range.end.isEqual(s.insertionPosition))return s.graveyardPosition||e.range.end.offset++,[e];if(e.range.start.hasSameParentAs(s.splitPosition)&&e.range.containsPosition(s.splitPosition)){const t=e.clone();return t.range=new p(s.moveTargetPosition.clone(),e.range.end._getCombined(s.splitPosition,s.moveTargetPosition)),e.range.end=s.splitPosition.clone(),e.range.end.stickiness="toPrevious",[e,t]}return e.range=e.range._getTransformedBySplitOperation(s),[e]});P(M,x,(e,s)=>{const t=[e];if(e.shouldReceiveAttributes&&e.position.hasSameParentAs(s.range.start)&&s.range.containsPosition(e.position)){const n=Is(e,s.key,s.newValue);n&&t.push(n)}return t});P(M,M,(e,s,t)=>e.position.isEqual(s.position)&&t.aIsStrong?[e]:(e.position=e.position._getTransformedByInsertOperation(s),[e]));P(M,A,(e,s)=>(e.position=e.position._getTransformedByMoveOperation(s),[e]));P(M,T,(e,s)=>(e.position=e.position._getTransformedBySplitOperation(s),[e]));P(M,N,(e,s)=>(e.position=e.position._getTransformedByMergeOperation(s),[e]));P(I,M,(e,s)=>(e.oldRange&&(e.oldRange=e.oldRange._getTransformedByInsertOperation(s)[0]),e.newRange&&(e.newRange=e.newRange._getTransformedByInsertOperation(s)[0]),[e]));P(I,I,(e,s,t)=>{if(e.name==s.name)if(t.aIsStrong)e.oldRange=s.newRange?s.newRange.clone():null;else return[new R(0)];return[e]});P(I,N,(e,s)=>(e.oldRange&&(e.oldRange=e.oldRange._getTransformedByMergeOperation(s)),e.newRange&&(e.newRange=e.newRange._getTransformedByMergeOperation(s)),[e]));P(I,A,(e,s)=>{const t=[e];if(e.oldRange&&(e.oldRange=p._createFromRanges(e.oldRange._getTransformedByMoveOperation(s))),e.newRange){const n=e.newRange._getTransformedByMoveOperation(s);e.newRange=n[0];for(let r=1;r<n.length;r++){const i=e.clone();i.oldRange=null,i.newRange=n[r],i.baseVersion=-1,t.push(i)}}return t});P(I,T,(e,s,t)=>{if(e.oldRange&&(e.oldRange=e.oldRange._getTransformedBySplitOperation(s)),e.newRange){if(t.abRelation){const n=e.newRange._getTransformedBySplitOperation(s);return e.newRange.start.isEqual(s.splitPosition)&&t.abRelation.wasStartBeforeMergedElement?e.newRange.start=_._createAt(s.insertionPosition):e.newRange.start.isEqual(s.splitPosition)&&!t.abRelation.wasInLeftElement?e.newRange.start=_._createAt(s.moveTargetPosition):e.newRange.start=n.start,e.newRange.end.isEqual(s.splitPosition)&&t.abRelation.wasInRightElement?e.newRange.end=_._createAt(s.moveTargetPosition):e.newRange.end.isEqual(s.splitPosition)&&t.abRelation.wasEndBeforeMergedElement?e.newRange.end=_._createAt(s.insertionPosition):e.newRange.end=n.end,[e]}e.newRange=e.newRange._getTransformedBySplitOperation(s)}return[e]});P(N,M,(e,s)=>(e.sourcePosition.hasSameParentAs(s.position)&&(e.howMany+=s.howMany),e.sourcePosition=e.sourcePosition._getTransformedByInsertOperation(s),e.targetPosition=e.targetPosition._getTransformedByInsertOperation(s),[e]));P(N,N,(e,s,t)=>{if(e.sourcePosition.isEqual(s.sourcePosition)&&e.targetPosition.isEqual(s.targetPosition))if(t.bWasUndone){const n=s.graveyardPosition.path.slice();return n.push(0),e.sourcePosition=new _(s.graveyardPosition.root,n),e.howMany=0,[e]}else return[new R(0)];if(e.sourcePosition.isEqual(s.sourcePosition)&&!e.targetPosition.isEqual(s.targetPosition)&&!t.bWasUndone&&t.abRelation!="splitAtSource"){const n=e.targetPosition.root.rootName=="$graveyard",r=s.targetPosition.root.rootName=="$graveyard";if(r&&!n||!(n&&!r)&&t.aIsStrong){const l=s.targetPosition._getTransformedByMergeOperation(s),c=e.targetPosition._getTransformedByMergeOperation(s);return[new A(l,e.howMany,c,0)]}else return[new R(0)]}return e.sourcePosition.hasSameParentAs(s.targetPosition)&&(e.howMany+=s.howMany),e.sourcePosition=e.sourcePosition._getTransformedByMergeOperation(s),e.targetPosition=e.targetPosition._getTransformedByMergeOperation(s),(!e.graveyardPosition.isEqual(s.graveyardPosition)||!t.aIsStrong)&&(e.graveyardPosition=e.graveyardPosition._getTransformedByMergeOperation(s)),[e]});P(N,A,(e,s,t)=>{const n=p._createFromPositionAndShift(s.sourcePosition,s.howMany);return s.type=="remove"&&!t.bWasUndone&&e.deletionPosition.hasSameParentAs(s.sourcePosition)&&n.containsPosition(e.sourcePosition)?[new R(0)]:(s.sourcePosition.getShiftedBy(s.howMany).isEqual(e.sourcePosition)?e.sourcePosition.stickiness="toNone":s.targetPosition.isEqual(e.sourcePosition)&&t.abRelation=="mergeSourceAffected"?e.sourcePosition.stickiness="toNext":s.sourcePosition.isEqual(e.targetPosition)?(e.targetPosition.stickiness="toNone",e.howMany-=s.howMany):s.targetPosition.isEqual(e.targetPosition)&&t.abRelation=="mergeTargetWasBefore"?(e.targetPosition.stickiness="toPrevious",e.howMany+=s.howMany):(e.sourcePosition.hasSameParentAs(s.targetPosition)&&(e.howMany+=s.howMany),e.sourcePosition.hasSameParentAs(s.sourcePosition)&&(e.howMany-=s.howMany)),e.sourcePosition=e.sourcePosition._getTransformedByMoveOperation(s),e.targetPosition=e.targetPosition._getTransformedByMoveOperation(s),e.sourcePosition.stickiness="toPrevious",e.targetPosition.stickiness="toNext",e.graveyardPosition.isEqual(s.targetPosition)||(e.graveyardPosition=e.graveyardPosition._getTransformedByMoveOperation(s)),[e])});P(N,T,(e,s,t)=>{if(s.graveyardPosition&&(e.graveyardPosition=e.graveyardPosition._getTransformedByDeletion(s.graveyardPosition,1),e.deletionPosition.isEqual(s.graveyardPosition)&&(e.howMany=s.howMany)),e.targetPosition.isEqual(s.splitPosition)&&(s.graveyardPosition&&e.deletionPosition.isEqual(s.graveyardPosition)||t.abRelation=="mergeTargetNotMoved"))return e.sourcePosition=e.sourcePosition._getTransformedBySplitOperation(s),[e];if(e.sourcePosition.isEqual(s.splitPosition)){if(t.abRelation=="mergeSourceNotMoved")return e.howMany=0,e.targetPosition=e.targetPosition._getTransformedBySplitOperation(s),[e];if(t.abRelation=="mergeSameElement"||e.sourcePosition.offset>0)return e.sourcePosition=s.moveTargetPosition.clone(),e.targetPosition=e.targetPosition._getTransformedBySplitOperation(s),[e]}return e.sourcePosition.hasSameParentAs(s.splitPosition)&&(e.howMany=s.splitPosition.offset),e.sourcePosition=e.sourcePosition._getTransformedBySplitOperation(s),e.targetPosition=e.targetPosition._getTransformedBySplitOperation(s),[e]});P(A,M,(e,s)=>{const n=p._createFromPositionAndShift(e.sourcePosition,e.howMany)._getTransformedByInsertOperation(s,!1)[0];return e.sourcePosition=n.start,e.howMany=n.end.offset-n.start.offset,e.targetPosition.isEqual(s.position)||(e.targetPosition=e.targetPosition._getTransformedByInsertOperation(s)),[e]});P(A,A,(e,s,t)=>{const n=p._createFromPositionAndShift(e.sourcePosition,e.howMany),r=p._createFromPositionAndShift(s.sourcePosition,s.howMany);let i=t.aIsStrong,o=!t.aIsStrong;t.abRelation=="insertBefore"||t.baRelation=="insertAfter"?o=!0:(t.abRelation=="insertAfter"||t.baRelation=="insertBefore")&&(o=!1);let a;if(e.targetPosition.isEqual(s.targetPosition)&&o?a=e.targetPosition._getTransformedByDeletion(s.sourcePosition,s.howMany):a=e.targetPosition._getTransformedByMove(s.sourcePosition,s.targetPosition,s.howMany),$n(e,s)&&$n(s,e))return[s.getReversed()];if(n.containsPosition(s.targetPosition)&&n.containsRange(r,!0))return n.start=n.start._getTransformedByMove(s.sourcePosition,s.targetPosition,s.howMany),n.end=n.end._getTransformedByMove(s.sourcePosition,s.targetPosition,s.howMany),wt([n],a);if(r.containsPosition(e.targetPosition)&&r.containsRange(n,!0))return n.start=n.start._getCombined(s.sourcePosition,s.getMovedRangeStart()),n.end=n.end._getCombined(s.sourcePosition,s.getMovedRangeStart()),wt([n],a);const u=B(e.sourcePosition.getParentPath(),s.sourcePosition.getParentPath());if(u=="prefix"||u=="extension")return n.start=n.start._getTransformedByMove(s.sourcePosition,s.targetPosition,s.howMany),n.end=n.end._getTransformedByMove(s.sourcePosition,s.targetPosition,s.howMany),wt([n],a);e.type=="remove"&&s.type!="remove"&&!t.aWasUndone&&!t.forceWeakRemove?i=!0:e.type!="remove"&&s.type=="remove"&&!t.bWasUndone&&!t.forceWeakRemove&&(i=!1);const f=[],d=n.getDifference(r);for(const y of d){y.start=y.start._getTransformedByDeletion(s.sourcePosition,s.howMany),y.end=y.end._getTransformedByDeletion(s.sourcePosition,s.howMany);const w=B(y.start.getParentPath(),s.getMovedRangeStart().getParentPath())=="same",k=y._getTransformedByInsertion(s.getMovedRangeStart(),s.howMany,w);f.push(...k)}const m=n.getIntersection(r);return m!==null&&i&&(m.start=m.start._getCombined(s.sourcePosition,s.getMovedRangeStart()),m.end=m.end._getCombined(s.sourcePosition,s.getMovedRangeStart()),f.length===0?f.push(m):f.length==1?r.start.isBefore(n.start)||r.start.isEqual(n.start)?f.unshift(m):f.push(m):f.splice(1,0,m)),f.length===0?[new R(e.baseVersion)]:wt(f,a)});P(A,T,(e,s,t)=>{let n=e.targetPosition.clone();(!e.targetPosition.isEqual(s.insertionPosition)||!s.graveyardPosition||t.abRelation=="moveTargetAfter")&&(n=e.targetPosition._getTransformedBySplitOperation(s));const r=p._createFromPositionAndShift(e.sourcePosition,e.howMany);if(r.end.isEqual(s.insertionPosition))return s.graveyardPosition||e.howMany++,e.targetPosition=n,[e];if(r.start.hasSameParentAs(s.splitPosition)&&r.containsPosition(s.splitPosition)){let a=new p(s.splitPosition,r.end);a=a._getTransformedBySplitOperation(s);const l=[new p(r.start,s.splitPosition),a];return wt(l,n)}e.targetPosition.isEqual(s.splitPosition)&&t.abRelation=="insertAtSource"&&(n=s.moveTargetPosition),e.targetPosition.isEqual(s.insertionPosition)&&t.abRelation=="insertBetween"&&(n=e.targetPosition);const o=[r._getTransformedBySplitOperation(s)];if(s.graveyardPosition){const a=r.start.isEqual(s.graveyardPosition)||r.containsPosition(s.graveyardPosition);e.howMany>1&&a&&!t.aWasUndone&&o.push(p._createFromPositionAndShift(s.insertionPosition,1))}return wt(o,n)});P(A,N,(e,s,t)=>{const n=p._createFromPositionAndShift(e.sourcePosition,e.howMany);if(s.deletionPosition.hasSameParentAs(e.sourcePosition)&&n.containsPosition(s.sourcePosition)){if(e.type=="remove"&&!t.forceWeakRemove){if(!t.aWasUndone){const o=[];let a=s.graveyardPosition.clone(),l=s.targetPosition._getTransformedByMergeOperation(s);const c=e.targetPosition.getTransformedByOperation(s);e.howMany>1&&(o.push(new A(e.sourcePosition,e.howMany-1,c,0)),a=a._getTransformedByMove(e.sourcePosition,c,e.howMany-1),l=l._getTransformedByMove(e.sourcePosition,c,e.howMany-1));const u=s.deletionPosition._getCombined(e.sourcePosition,c),f=new A(a,1,u,0),d=f.getMovedRangeStart().path.slice();d.push(0);const m=new _(f.targetPosition.root,d);l=l._getTransformedByMove(a,u,1);const y=new A(l,s.howMany,m,0);return o.push(f),o.push(y),o}}else if(e.howMany==1)return t.bWasUndone?(e.sourcePosition=s.graveyardPosition.clone(),e.targetPosition=e.targetPosition._getTransformedByMergeOperation(s),[e]):[new R(0)]}const i=p._createFromPositionAndShift(e.sourcePosition,e.howMany)._getTransformedByMergeOperation(s);return e.sourcePosition=i.start,e.howMany=i.end.offset-i.start.offset,e.targetPosition=e.targetPosition._getTransformedByMergeOperation(s),[e]});P(F,M,(e,s)=>(e.position=e.position._getTransformedByInsertOperation(s),[e]));P(F,N,(e,s)=>e.position.isEqual(s.deletionPosition)?(e.position=s.graveyardPosition.clone(),e.position.stickiness="toNext",[e]):(e.position=e.position._getTransformedByMergeOperation(s),[e]));P(F,A,(e,s)=>(e.position=e.position._getTransformedByMoveOperation(s),[e]));P(F,F,(e,s,t)=>{if(e.position.isEqual(s.position))if(t.aIsStrong)e.oldName=s.newName;else return[new R(0)];return[e]});P(F,T,(e,s)=>{const t=e.position.path,n=s.splitPosition.getParentPath();if(B(t,n)=="same"&&!s.graveyardPosition){const r=new F(e.position.getShiftedBy(1),e.oldName,e.newName,0);return[e,r]}return e.position=e.position._getTransformedBySplitOperation(s),[e]});P(Q,Q,(e,s,t)=>{if(e.root===s.root&&e.key===s.key){if(!t.aIsStrong||e.newValue===s.newValue)return[new R(0)];e.oldValue=s.newValue}return[e]});P(tt,tt,(e,s)=>e.rootName===s.rootName&&e.isAdd===s.isAdd?[new R(0)]:[e]);P(T,M,(e,s)=>(e.splitPosition.hasSameParentAs(s.position)&&e.splitPosition.offset<s.position.offset&&(e.howMany+=s.howMany),e.splitPosition=e.splitPosition._getTransformedByInsertOperation(s),e.insertionPosition=e.insertionPosition._getTransformedByInsertOperation(s),[e]));P(T,N,(e,s,t)=>{if(!e.graveyardPosition&&!t.bWasUndone&&e.splitPosition.hasSameParentAs(s.sourcePosition)){const n=s.graveyardPosition.path.slice();n.push(0);const r=new _(s.graveyardPosition.root,n),i=T.getInsertionPosition(new _(s.graveyardPosition.root,n)),o=new T(r,0,i,null,0);return e.splitPosition=e.splitPosition._getTransformedByMergeOperation(s),e.insertionPosition=T.getInsertionPosition(e.splitPosition),e.graveyardPosition=o.insertionPosition.clone(),e.graveyardPosition.stickiness="toNext",[o,e]}return e.splitPosition.hasSameParentAs(s.deletionPosition)&&!e.splitPosition.isAfter(s.deletionPosition)&&e.howMany--,e.splitPosition.hasSameParentAs(s.targetPosition)&&(e.howMany+=s.howMany),e.splitPosition=e.splitPosition._getTransformedByMergeOperation(s),e.insertionPosition=T.getInsertionPosition(e.splitPosition),e.graveyardPosition&&(e.graveyardPosition=e.graveyardPosition._getTransformedByMergeOperation(s)),[e]});P(T,A,(e,s,t)=>{const n=p._createFromPositionAndShift(s.sourcePosition,s.howMany);if(e.graveyardPosition){const i=n.start.isEqual(e.graveyardPosition)||n.containsPosition(e.graveyardPosition);if(!t.bWasUndone&&i){const o=e.splitPosition._getTransformedByMoveOperation(s),a=e.graveyardPosition._getTransformedByMoveOperation(s),l=a.path.slice();l.push(0);const c=new _(a.root,l);return[new A(o,e.howMany,c,0)]}e.graveyardPosition=e.graveyardPosition._getTransformedByMoveOperation(s)}const r=e.splitPosition.isEqual(s.targetPosition);if(r&&(t.baRelation=="insertAtSource"||t.abRelation=="splitBefore"))return e.howMany+=s.howMany,e.splitPosition=e.splitPosition._getTransformedByDeletion(s.sourcePosition,s.howMany),e.insertionPosition=T.getInsertionPosition(e.splitPosition),[e];if(r&&t.abRelation&&t.abRelation.howMany){const{howMany:i,offset:o}=t.abRelation;return e.howMany+=i,e.splitPosition=e.splitPosition.getShiftedBy(o),[e]}if(e.splitPosition.hasSameParentAs(s.sourcePosition)&&n.containsPosition(e.splitPosition)){const i=s.howMany-(e.splitPosition.offset-s.sourcePosition.offset);return e.howMany-=i,e.splitPosition.hasSameParentAs(s.targetPosition)&&e.splitPosition.offset<s.targetPosition.offset&&(e.howMany+=s.howMany),e.splitPosition=s.sourcePosition.clone(),e.insertionPosition=T.getInsertionPosition(e.splitPosition),[e]}return s.sourcePosition.isEqual(s.targetPosition)||(e.splitPosition.hasSameParentAs(s.sourcePosition)&&e.splitPosition.offset<=s.sourcePosition.offset&&(e.howMany-=s.howMany),e.splitPosition.hasSameParentAs(s.targetPosition)&&e.splitPosition.offset<s.targetPosition.offset&&(e.howMany+=s.howMany)),e.splitPosition.stickiness="toNone",e.splitPosition=e.splitPosition._getTransformedByMoveOperation(s),e.splitPosition.stickiness="toNext",e.graveyardPosition?e.insertionPosition=e.insertionPosition._getTransformedByMoveOperation(s):e.insertionPosition=T.getInsertionPosition(e.splitPosition),[e]});P(T,T,(e,s,t)=>{if(e.splitPosition.isEqual(s.splitPosition)){if(!e.graveyardPosition&&!s.graveyardPosition)return[new R(0)];if(e.graveyardPosition&&s.graveyardPosition&&e.graveyardPosition.isEqual(s.graveyardPosition))return[new R(0)];if(t.abRelation=="splitBefore")return e.howMany=0,e.graveyardPosition=e.graveyardPosition._getTransformedBySplitOperation(s),[e]}if(e.graveyardPosition&&s.graveyardPosition&&e.graveyardPosition.isEqual(s.graveyardPosition)){const n=e.splitPosition.root.rootName=="$graveyard",r=s.splitPosition.root.rootName=="$graveyard";if(r&&!n||!(n&&!r)&&t.aIsStrong){const l=[];return s.howMany&&l.push(new A(s.moveTargetPosition,s.howMany,s.splitPosition,0)),e.howMany&&l.push(new A(e.splitPosition,e.howMany,e.moveTargetPosition,0)),l}else return[new R(0)]}if(e.graveyardPosition&&(e.graveyardPosition=e.graveyardPosition._getTransformedBySplitOperation(s)),e.splitPosition.isEqual(s.insertionPosition)&&t.abRelation=="splitBefore")return e.howMany++,[e];if(s.splitPosition.isEqual(e.insertionPosition)&&t.baRelation=="splitBefore"){const n=s.insertionPosition.path.slice();n.push(0);const r=new _(s.insertionPosition.root,n),i=new A(e.insertionPosition,1,r,0);return[e,i]}return e.splitPosition.hasSameParentAs(s.splitPosition)&&e.splitPosition.offset<s.splitPosition.offset&&(e.howMany-=s.howMany),e.splitPosition=e.splitPosition._getTransformedBySplitOperation(s),e.insertionPosition=T.getInsertionPosition(e.splitPosition),[e]});function $n(e,s){return e.targetPosition._getTransformedByDeletion(s.sourcePosition,s.howMany)===null}function wt(e,s){const t=[];for(let n=0;n<e.length;n++){const r=e[n],i=new A(r.start,r.end.offset-r.start.offset,s,0);t.push(i);for(let o=n+1;o<e.length;o++)e[o]=e[o]._getTransformedByMove(i.sourcePosition,i.targetPosition,i.howMany)[0];s=s._getTransformedByMove(i.sourcePosition,i.targetPosition,i.howMany)}return t}class Pc extends O(_){constructor(s,t,n="toNone"){if(super(s,t,n),!this.root.is("rootElement"))throw new g("model-liveposition-root-not-rootelement",s);vc.call(this)}detach(){this.stopListening()}toPosition(){return new _(this.root,this.path.slice(),this.stickiness)}static fromPosition(s,t){return new this(s.root,s.path.slice(),t||s.stickiness)}}Pc.prototype.is=function(e){return e==="livePosition"||e==="model:livePosition"||e=="position"||e==="model:position"};function vc(){this.listenTo(this.root.document.model,"applyOperation",(e,s)=>{const t=s[0];t.isDocumentOperation&&bc.call(this,t)},{priority:"low"})}function bc(e){const s=this.getTransformedByOperation(e);if(!this.isEqual(s)){const t=this.toPosition();this.path=s.path,this.root=s.root,this.fire("change",t)}}class Ac extends K{constructor(t,n,r="main"){super(n);h(this,"rootName");h(this,"_document");h(this,"_isAttached",!0);h(this,"_isLoaded",!0);this._document=t,this.rootName=r}get document(){return this._document}isAttached(){return this._isAttached}toJSON(){return this.rootName}}Ac.prototype.is=function(e,s){return s?s===this.name&&(e==="rootElement"||e==="model:rootElement"||e==="element"||e==="model:element"):e==="rootElement"||e==="model:rootElement"||e==="element"||e==="model:element"||e==="node"||e==="model:node"};class Sc extends O(rt){constructor(t,n,r,i){super();h(this,"name");h(this,"_managedUsingOperations");h(this,"_affectsData");h(this,"_liveRange");this.name=t,this._liveRange=this._attachLiveRange(n),this._managedUsingOperations=r,this._affectsData=i}get managedUsingOperations(){if(!this._liveRange)throw new g("marker-destroyed",this);return this._managedUsingOperations}get affectsData(){if(!this._liveRange)throw new g("marker-destroyed",this);return this._affectsData}getData(){return{range:this.getRange(),affectsData:this.affectsData,managedUsingOperations:this.managedUsingOperations}}getStart(){if(!this._liveRange)throw new g("marker-destroyed",this);return this._liveRange.start.clone()}getEnd(){if(!this._liveRange)throw new g("marker-destroyed",this);return this._liveRange.end.clone()}getRange(){if(!this._liveRange)throw new g("marker-destroyed",this);return this._liveRange.toRange()}_attachLiveRange(t){return this._liveRange&&this._detachLiveRange(),t.delegate("change:range").to(this),t.delegate("change:content").to(this),this._liveRange=t,t}_detachLiveRange(){this._liveRange.stopDelegating("change:range",this),this._liveRange.stopDelegating("change:content",this),this._liveRange.detach(),this._liveRange=null}}Sc.prototype.is=function(e){return e==="marker"||e==="model:marker"};class We extends rt{constructor(t){super();h(this,"markers",new Map);h(this,"_children",new Ft);t&&this._insertChild(0,t)}[Symbol.iterator](){return this.getChildren()}get childCount(){return this._children.length}get maxOffset(){return this._children.maxOffset}get isEmpty(){return this.childCount===0}get nextSibling(){return null}get previousSibling(){return null}get root(){return this}get parent(){return null}get document(){return null}isAttached(){return!1}getAncestors(){return[]}getChild(t){return this._children.getNode(t)}getChildAtOffset(t){return this._children.getNodeAtOffset(t)}getChildren(){return this._children[Symbol.iterator]()}getChildIndex(t){return this._children.getNodeIndex(t)}getChildStartOffset(t){return this._children.getNodeStartOffset(t)}getPath(){return[]}getNodeByPath(t){let n=this;for(const r of t)n=n.getChildAtOffset(r);return n}offsetToIndex(t){return this._children.offsetToIndex(t)}toJSON(){const t=[];for(const n of this._children)t.push(n.toJSON());return t}static fromJSON(t){const n=[];for(const r of t)r.name?n.push(K.fromJSON(r)):n.push(E.fromJSON(r));return new We(n)}_appendChild(t){this._insertChild(this.childCount,t)}_insertChild(t,n){const r=Tc(n);for(const i of r)i.parent!==null&&i._remove(),i.parent=this;this._children._insertNodes(t,r)}_removeChildren(t,n=1){const r=this._children._removeNodes(t,n);for(const i of r)i.parent=null;return r}_removeChildrenArray(t){this._children._removeNodesArray(t);for(const n of t)n.parent=null}}We.prototype.is=function(e){return e==="documentFragment"||e==="model:documentFragment"};function Tc(e){return typeof e=="string"?[new E(e)]:(X(e)||(e=[e]),Array.from(e).map(s=>typeof s=="string"?new E(s):s instanceof ut?new E(s.data,s.getAttributes()):s))}var we,Ln;function $s(){return Ln||(Ln=1,we={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}),we}$s();var Pe,Dn;function Ls(){if(Dn)return Pe;Dn=1;const e=$s(),s={};for(const r of Object.keys(e))s[e[r]]=r;const t={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};Pe=t;for(const r of Object.keys(t)){if(!("channels"in t[r]))throw new Error("missing channels property: "+r);if(!("labels"in t[r]))throw new Error("missing channel labels property: "+r);if(t[r].labels.length!==t[r].channels)throw new Error("channel and label counts mismatch: "+r);const{channels:i,labels:o}=t[r];delete t[r].channels,delete t[r].labels,Object.defineProperty(t[r],"channels",{value:i}),Object.defineProperty(t[r],"labels",{value:o})}t.rgb.hsl=function(r){const i=r[0]/255,o=r[1]/255,a=r[2]/255,l=Math.min(i,o,a),c=Math.max(i,o,a),u=c-l;let f,d;c===l?f=0:i===c?f=(o-a)/u:o===c?f=2+(a-i)/u:a===c&&(f=4+(i-o)/u),f=Math.min(f*60,360),f<0&&(f+=360);const m=(l+c)/2;return c===l?d=0:m<=.5?d=u/(c+l):d=u/(2-c-l),[f,d*100,m*100]},t.rgb.hsv=function(r){let i,o,a,l,c;const u=r[0]/255,f=r[1]/255,d=r[2]/255,m=Math.max(u,f,d),y=m-Math.min(u,f,d),w=function(k){return(m-k)/6/y+1/2};return y===0?(l=0,c=0):(c=y/m,i=w(u),o=w(f),a=w(d),u===m?l=a-o:f===m?l=1/3+i-a:d===m&&(l=2/3+o-i),l<0?l+=1:l>1&&(l-=1)),[l*360,c*100,m*100]},t.rgb.hwb=function(r){const i=r[0],o=r[1];let a=r[2];const l=t.rgb.hsl(r)[0],c=1/255*Math.min(i,Math.min(o,a));return a=1-1/255*Math.max(i,Math.max(o,a)),[l,c*100,a*100]},t.rgb.cmyk=function(r){const i=r[0]/255,o=r[1]/255,a=r[2]/255,l=Math.min(1-i,1-o,1-a),c=(1-i-l)/(1-l)||0,u=(1-o-l)/(1-l)||0,f=(1-a-l)/(1-l)||0;return[c*100,u*100,f*100,l*100]};function n(r,i){return(r[0]-i[0])**2+(r[1]-i[1])**2+(r[2]-i[2])**2}return t.rgb.keyword=function(r){const i=s[r];if(i)return i;let o=1/0,a;for(const l of Object.keys(e)){const c=e[l],u=n(r,c);u<o&&(o=u,a=l)}return a},t.keyword.rgb=function(r){return e[r]},t.rgb.xyz=function(r){let i=r[0]/255,o=r[1]/255,a=r[2]/255;i=i>.04045?((i+.055)/1.055)**2.4:i/12.92,o=o>.04045?((o+.055)/1.055)**2.4:o/12.92,a=a>.04045?((a+.055)/1.055)**2.4:a/12.92;const l=i*.4124+o*.3576+a*.1805,c=i*.2126+o*.7152+a*.0722,u=i*.0193+o*.1192+a*.9505;return[l*100,c*100,u*100]},t.rgb.lab=function(r){const i=t.rgb.xyz(r);let o=i[0],a=i[1],l=i[2];o/=95.047,a/=100,l/=108.883,o=o>.008856?o**(1/3):7.787*o+16/116,a=a>.008856?a**(1/3):7.787*a+16/116,l=l>.008856?l**(1/3):7.787*l+16/116;const c=116*a-16,u=500*(o-a),f=200*(a-l);return[c,u,f]},t.hsl.rgb=function(r){const i=r[0]/360,o=r[1]/100,a=r[2]/100;let l,c,u;if(o===0)return u=a*255,[u,u,u];a<.5?l=a*(1+o):l=a+o-a*o;const f=2*a-l,d=[0,0,0];for(let m=0;m<3;m++)c=i+1/3*-(m-1),c<0&&c++,c>1&&c--,6*c<1?u=f+(l-f)*6*c:2*c<1?u=l:3*c<2?u=f+(l-f)*(2/3-c)*6:u=f,d[m]=u*255;return d},t.hsl.hsv=function(r){const i=r[0];let o=r[1]/100,a=r[2]/100,l=o;const c=Math.max(a,.01);a*=2,o*=a<=1?a:2-a,l*=c<=1?c:2-c;const u=(a+o)/2,f=a===0?2*l/(c+l):2*o/(a+o);return[i,f*100,u*100]},t.hsv.rgb=function(r){const i=r[0]/60,o=r[1]/100;let a=r[2]/100;const l=Math.floor(i)%6,c=i-Math.floor(i),u=255*a*(1-o),f=255*a*(1-o*c),d=255*a*(1-o*(1-c));switch(a*=255,l){case 0:return[a,d,u];case 1:return[f,a,u];case 2:return[u,a,d];case 3:return[u,f,a];case 4:return[d,u,a];case 5:return[a,u,f]}},t.hsv.hsl=function(r){const i=r[0],o=r[1]/100,a=r[2]/100,l=Math.max(a,.01);let c,u;u=(2-o)*a;const f=(2-o)*l;return c=o*l,c/=f<=1?f:2-f,c=c||0,u/=2,[i,c*100,u*100]},t.hwb.rgb=function(r){const i=r[0]/360;let o=r[1]/100,a=r[2]/100;const l=o+a;let c;l>1&&(o/=l,a/=l);const u=Math.floor(6*i),f=1-a;c=6*i-u,(u&1)!==0&&(c=1-c);const d=o+c*(f-o);let m,y,w;switch(u){default:case 6:case 0:m=f,y=d,w=o;break;case 1:m=d,y=f,w=o;break;case 2:m=o,y=f,w=d;break;case 3:m=o,y=d,w=f;break;case 4:m=d,y=o,w=f;break;case 5:m=f,y=o,w=d;break}return[m*255,y*255,w*255]},t.cmyk.rgb=function(r){const i=r[0]/100,o=r[1]/100,a=r[2]/100,l=r[3]/100,c=1-Math.min(1,i*(1-l)+l),u=1-Math.min(1,o*(1-l)+l),f=1-Math.min(1,a*(1-l)+l);return[c*255,u*255,f*255]},t.xyz.rgb=function(r){const i=r[0]/100,o=r[1]/100,a=r[2]/100;let l,c,u;return l=i*3.2406+o*-1.5372+a*-.4986,c=i*-.9689+o*1.8758+a*.0415,u=i*.0557+o*-.204+a*1.057,l=l>.0031308?1.055*l**(1/2.4)-.055:l*12.92,c=c>.0031308?1.055*c**(1/2.4)-.055:c*12.92,u=u>.0031308?1.055*u**(1/2.4)-.055:u*12.92,l=Math.min(Math.max(0,l),1),c=Math.min(Math.max(0,c),1),u=Math.min(Math.max(0,u),1),[l*255,c*255,u*255]},t.xyz.lab=function(r){let i=r[0],o=r[1],a=r[2];i/=95.047,o/=100,a/=108.883,i=i>.008856?i**(1/3):7.787*i+16/116,o=o>.008856?o**(1/3):7.787*o+16/116,a=a>.008856?a**(1/3):7.787*a+16/116;const l=116*o-16,c=500*(i-o),u=200*(o-a);return[l,c,u]},t.lab.xyz=function(r){const i=r[0],o=r[1],a=r[2];let l,c,u;c=(i+16)/116,l=o/500+c,u=c-a/200;const f=c**3,d=l**3,m=u**3;return c=f>.008856?f:(c-16/116)/7.787,l=d>.008856?d:(l-16/116)/7.787,u=m>.008856?m:(u-16/116)/7.787,l*=95.047,c*=100,u*=108.883,[l,c,u]},t.lab.lch=function(r){const i=r[0],o=r[1],a=r[2];let l;l=Math.atan2(a,o)*360/2/Math.PI,l<0&&(l+=360);const u=Math.sqrt(o*o+a*a);return[i,u,l]},t.lch.lab=function(r){const i=r[0],o=r[1],l=r[2]/360*2*Math.PI,c=o*Math.cos(l),u=o*Math.sin(l);return[i,c,u]},t.rgb.ansi16=function(r,i=null){const[o,a,l]=r;let c=i===null?t.rgb.hsv(r)[2]:i;if(c=Math.round(c/50),c===0)return 30;let u=30+(Math.round(l/255)<<2|Math.round(a/255)<<1|Math.round(o/255));return c===2&&(u+=60),u},t.hsv.ansi16=function(r){return t.rgb.ansi16(t.hsv.rgb(r),r[2])},t.rgb.ansi256=function(r){const i=r[0],o=r[1],a=r[2];return i===o&&o===a?i<8?16:i>248?231:Math.round((i-8)/247*24)+232:16+36*Math.round(i/255*5)+6*Math.round(o/255*5)+Math.round(a/255*5)},t.ansi16.rgb=function(r){let i=r%10;if(i===0||i===7)return r>50&&(i+=3.5),i=i/10.5*255,[i,i,i];const o=(~~(r>50)+1)*.5,a=(i&1)*o*255,l=(i>>1&1)*o*255,c=(i>>2&1)*o*255;return[a,l,c]},t.ansi256.rgb=function(r){if(r>=232){const c=(r-232)*10+8;return[c,c,c]}r-=16;let i;const o=Math.floor(r/36)/5*255,a=Math.floor((i=r%36)/6)/5*255,l=i%6/5*255;return[o,a,l]},t.rgb.hex=function(r){const o=(((Math.round(r[0])&255)<<16)+((Math.round(r[1])&255)<<8)+(Math.round(r[2])&255)).toString(16).toUpperCase();return"000000".substring(o.length)+o},t.hex.rgb=function(r){const i=r.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!i)return[0,0,0];let o=i[0];i[0].length===3&&(o=o.split("").map(f=>f+f).join(""));const a=parseInt(o,16),l=a>>16&255,c=a>>8&255,u=a&255;return[l,c,u]},t.rgb.hcg=function(r){const i=r[0]/255,o=r[1]/255,a=r[2]/255,l=Math.max(Math.max(i,o),a),c=Math.min(Math.min(i,o),a),u=l-c;let f,d;return u<1?f=c/(1-u):f=0,u<=0?d=0:l===i?d=(o-a)/u%6:l===o?d=2+(a-i)/u:d=4+(i-o)/u,d/=6,d%=1,[d*360,u*100,f*100]},t.hsl.hcg=function(r){const i=r[1]/100,o=r[2]/100,a=o<.5?2*i*o:2*i*(1-o);let l=0;return a<1&&(l=(o-.5*a)/(1-a)),[r[0],a*100,l*100]},t.hsv.hcg=function(r){const i=r[1]/100,o=r[2]/100,a=i*o;let l=0;return a<1&&(l=(o-a)/(1-a)),[r[0],a*100,l*100]},t.hcg.rgb=function(r){const i=r[0]/360,o=r[1]/100,a=r[2]/100;if(o===0)return[a*255,a*255,a*255];const l=[0,0,0],c=i%1*6,u=c%1,f=1-u;let d=0;switch(Math.floor(c)){case 0:l[0]=1,l[1]=u,l[2]=0;break;case 1:l[0]=f,l[1]=1,l[2]=0;break;case 2:l[0]=0,l[1]=1,l[2]=u;break;case 3:l[0]=0,l[1]=f,l[2]=1;break;case 4:l[0]=u,l[1]=0,l[2]=1;break;default:l[0]=1,l[1]=0,l[2]=f}return d=(1-o)*a,[(o*l[0]+d)*255,(o*l[1]+d)*255,(o*l[2]+d)*255]},t.hcg.hsv=function(r){const i=r[1]/100,o=r[2]/100,a=i+o*(1-i);let l=0;return a>0&&(l=i/a),[r[0],l*100,a*100]},t.hcg.hsl=function(r){const i=r[1]/100,a=r[2]/100*(1-i)+.5*i;let l=0;return a>0&&a<.5?l=i/(2*a):a>=.5&&a<1&&(l=i/(2*(1-a))),[r[0],l*100,a*100]},t.hcg.hwb=function(r){const i=r[1]/100,o=r[2]/100,a=i+o*(1-i);return[r[0],(a-i)*100,(1-a)*100]},t.hwb.hcg=function(r){const i=r[1]/100,a=1-r[2]/100,l=a-i;let c=0;return l<1&&(c=(a-l)/(1-l)),[r[0],l*100,c*100]},t.apple.rgb=function(r){return[r[0]/65535*255,r[1]/65535*255,r[2]/65535*255]},t.rgb.apple=function(r){return[r[0]/255*65535,r[1]/255*65535,r[2]/255*65535]},t.gray.rgb=function(r){return[r[0]/100*255,r[0]/100*255,r[0]/100*255]},t.gray.hsl=function(r){return[0,0,r[0]]},t.gray.hsv=t.gray.hsl,t.gray.hwb=function(r){return[0,100,r[0]]},t.gray.cmyk=function(r){return[0,0,0,r[0]]},t.gray.lab=function(r){return[r[0],0,0]},t.gray.hex=function(r){const i=Math.round(r[0]/100*255)&255,a=((i<<16)+(i<<8)+i).toString(16).toUpperCase();return"000000".substring(a.length)+a},t.rgb.gray=function(r){return[(r[0]+r[1]+r[2])/3/255*100]},Pe}var ve,Vn;function Ec(){if(Vn)return ve;Vn=1;const e=Ls();function s(){const i={},o=Object.keys(e);for(let a=o.length,l=0;l<a;l++)i[o[l]]={distance:-1,parent:null};return i}function t(i){const o=s(),a=[i];for(o[i].distance=0;a.length;){const l=a.pop(),c=Object.keys(e[l]);for(let u=c.length,f=0;f<u;f++){const d=c[f],m=o[d];m.distance===-1&&(m.distance=o[l].distance+1,m.parent=l,a.unshift(d))}}return o}function n(i,o){return function(a){return o(i(a))}}function r(i,o){const a=[o[i].parent,i];let l=e[o[i].parent][i],c=o[i].parent;for(;o[c].parent;)a.unshift(o[c].parent),l=n(e[o[c].parent][c],l),c=o[c].parent;return l.conversion=a,l}return ve=function(i){const o=t(i),a={},l=Object.keys(o);for(let c=l.length,u=0;u<c;u++){const f=l[u];o[f].parent!==null&&(a[f]=r(f,o))}return a},ve}var be,qn;function xc(){if(qn)return be;qn=1;const e=Ls(),s=Ec(),t={},n=Object.keys(e);function r(o){const a=function(...l){const c=l[0];return c==null?c:(c.length>1&&(l=c),o(l))};return"conversion"in o&&(a.conversion=o.conversion),a}function i(o){const a=function(...l){const c=l[0];if(c==null)return c;c.length>1&&(l=c);const u=o(l);if(typeof u=="object")for(let f=u.length,d=0;d<f;d++)u[d]=Math.round(u[d]);return u};return"conversion"in o&&(a.conversion=o.conversion),a}return n.forEach(o=>{t[o]={},Object.defineProperty(t[o],"channels",{value:e[o].channels}),Object.defineProperty(t[o],"labels",{value:e[o].labels});const a=s(o);Object.keys(a).forEach(c=>{const u=a[c];t[o][c]=i(u),t[o][c].raw=r(u)})}),be=t,be}xc();/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */var Oc='<svg viewBox="0 0 10 8" xmlns="http://www.w3.org/2000/svg"><path d="M9.055.263v3.972h-6.77M1 4.216l2-2.038m-2 2 2 2.038"/></svg>';new DOMParser().parseFromString(Oc,"image/svg+xml").firstChild;/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */const Rc=[{listStyle:"disc",typeAttribute:"disc",listType:"bulleted"},{listStyle:"circle",typeAttribute:"circle",listType:"bulleted"},{listStyle:"square",typeAttribute:"square",listType:"bulleted"},{listStyle:"decimal",typeAttribute:"1",listType:"numbered"},{listStyle:"decimal-leading-zero",typeAttribute:null,listType:"numbered"},{listStyle:"lower-roman",typeAttribute:"i",listType:"numbered"},{listStyle:"upper-roman",typeAttribute:"I",listType:"numbered"},{listStyle:"lower-alpha",typeAttribute:"a",listType:"numbered"},{listStyle:"upper-alpha",typeAttribute:"A",listType:"numbered"},{listStyle:"lower-latin",typeAttribute:"a",listType:"numbered"},{listStyle:"upper-latin",typeAttribute:"A",listType:"numbered"}];for(const{listStyle:e,typeAttribute:s,listType:t}of Rc);/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */Nt.arrowup,Nt.arrowdown,Nt.esc;Nt.enter,Nt.tab;window.CKEDITOR.editorConfig=function(e){e.contentsLangDirection="rtl",e.language="fa",e.filebrowserImageUploadUrl="/file-upload",e.toolbar="MyToolbar",e.toolbar_MyToolbar=[{name:"document",items:["Source","-","Save","NewPage","DocProps","Preview","Print","-","Templates"]},{name:"clipboard",items:["Cut","Copy","Paste","PasteText","PasteFromWord","-","Undo","Redo"]},{name:"editing",items:["Find","Replace","-","SelectAll","-","SpellChecker","Scayt"]},{name:"forms",items:["Form","Checkbox","Radio","TextField","Textarea","Select","Button","ImageButton","HiddenField"]},{name:"basicstyles",items:["Bold","Italic","Underline","Strike","Subscript","Superscript","-","RemoveFormat"]},{name:"links",items:["Link","Unlink","Anchor"]},{name:"colors",items:["TextColor","BGColor"]},"/",{name:"insert",items:["Image","Flash","Table","HorizontalRule","Smiley","SpecialChar","PageBreak","Iframe"]},{name:"paragraph",items:["NumberedList","BulletedList","-","Outdent","Indent","-","Blockquote","CreateDiv","-","JustifyLeft","JustifyCenter","JustifyRight","JustifyBlock","-","BidiLtr","BidiRtl"]},{name:"styles",items:["Styles","Format","Font","FontSize"]}]};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

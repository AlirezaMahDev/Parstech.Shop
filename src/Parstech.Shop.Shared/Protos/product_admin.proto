syntax = "proto3";

package Shop.Application.DTOs.Product;

option csharp_namespace = "Parstech.Shop.Shared.Protos.ProductAdmin";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

service ProductAdminService {
  // Product management operations
  rpc GetProductsForAdmin (ProductParameterRequest) returns (ProductPageingDto);
  rpc GetProduct (ProductRequest) returns (ProductDto);
  rpc CreateProduct (ProductDto) returns (ResponseDto);
  rpc UpdateProduct (ProductDto) returns (ResponseDto);
  rpc UpdateProductQuickEdit (ProductQuickEditDto) returns (ResponseDto);
  rpc DuplicateProduct (ProductDuplicateRequest) returns (ResponseDto);
  rpc DuplicateProductForStore (ProductDuplicateForStoreRequest) returns (ResponseDto);
  rpc DeleteProduct (ProductRequest) returns (ResponseDto);
  
  // Gallery operations
  rpc GetGalleriesOfProduct (ProductRequest) returns (GalleriesResponse);
  rpc GetGallery (GalleryRequest) returns (ProductGalleryDto);
  rpc CreateGallery (ProductGalleryDto) returns (ResponseDto);
  rpc UpdateGallery (ProductGalleryDto) returns (ResponseDto);
  
  // Property operations
  rpc GetPropertiesOfProduct (ProductRequest) returns (PropertiesResponse);
  rpc GetProperty (PropertyRequest) returns (ProductPropertyDto);
  rpc CreateProperty (ProductPropertyDto) returns (ResponseDto);
  rpc UpdateProperty (ProductPropertyDto) returns (ResponseDto);
  
  // Category operations
  rpc GetCategoriesOfProduct (ProductRequest) returns (CategoriesResponse);
  rpc GetCategory (CategoryRequest) returns (ProductCateguryDto);
  rpc CreateCategory (ProductCateguryDto) returns (ResponseDto);
  rpc UpdateCategory (ProductCateguryDto) returns (ResponseDto);
  rpc DeleteCategory (ProductCateguryDto) returns (ResponseDto);
  rpc GetAllCategories (EmptyRequest) returns (CategoriesResponse);
  
  // Representation operations
  rpc GetProductRepresentation (ProductRequest) returns (ProductRepresentationDto);
  
  // Product Parents
  rpc GetProductParents (ProductParentsRequest) returns (ProductParentsResponse);
  
  // Supplementary data
  rpc GetProductTypes (EmptyRequest) returns (ProductTypesResponse);
  rpc GetTaxes (EmptyRequest) returns (TaxesResponse);
  rpc GetBrands (EmptyRequest) returns (BrandsResponse);
  rpc GetUserStores (EmptyRequest) returns (UserStoresResponse);
}

// Request messages
message ProductParameterRequest {
  int32 current_page = 1;
  int32 take_page = 2;
  string search_key = 3;
  string filter_cat = 4;
  string filter = 5;
}

message ProductRequest {
  int32 product_id = 1;
}

message GalleryRequest {
  int32 gallery_id = 1;
}

message PropertyRequest {
  int32 property_id = 1;
}

message CategoryRequest {
  int32 category_id = 1;
}

message ProductDuplicateRequest {
  int32 product_id = 1;
}

message ProductDuplicateForStoreRequest {
  int32 product_id = 1;
  int32 store_id = 2;
}

message ProductParentsRequest {
  string filter = 1;
  int32 type = 2;
}

message EmptyRequest {
}

// Response messages
message ProductPageingDto {
  int32 current_page = 1;
  int32 page_count = 2;
  int32 row_count = 3;
  repeated ProductDto list = 4;
}

message ProductDto {
  int32 id = 1;
  string name = 2;
  string latin_name = 3;
  string code = 4;
  int64 price = 5;
  int64 sale_price = 6;
  int64 discount_price = 7;
  google.protobuf.Timestamp discount_date = 8;
  int64 base_price = 9;
  bool stock_status = 10;
  int32 quantity = 11;
  int32 maximum_sale_in_order = 12;
  int32 score = 13;
  string description = 14;
  string short_description = 15;
  string short_link = 16;
  int32 type_id = 17;
  string type_name = 18;
  string variation_name = 19;
  int32 store_id = 20;
  string store_name = 21;
  string latin_store_name = 22;
  string image = 23;
  int32 parent_id = 24;
  string parent_product_name = 25;
  int32 brand_id = 26;
  string brand_name = 27;
  string latin_brand_name = 28;
  int32 tax_id = 29;
  int32 rep_id = 30;
  string rep_name = 31;
  google.protobuf.Timestamp create_date = 32;
  string create_date_shamsi = 33;
  int32 visit = 34;
  int32 categury_id = 35;
  string categury_name = 36;
  string categury_latin_name = 37;
  int32 count_sale = 38;
  bool single_sale = 39;
  int32 quantity_per_bundle = 40;
  string keywords = 41;
  bool is_active = 42;
  bool show_in_discount_panels = 43;
}

message ProductQuickEditDto {
  int32 id = 1;
  int32 product_id = 2;
  string code = 3;
  string name = 4;
  string latin_name = 5;
  int32 type_id = 6;
  string variation_name = 7;
  int32 store_id = 8;
  int32 parent_id = 9;
  int32 brand_id = 10;
  int32 tax_id = 11;
  int32 score = 12;
  int32 quantity_per_bundle = 13;
}

message ResponseDto {
  bool is_successed = 1;
  string message = 2;
  google.protobuf.Any object = 3;
  google.protobuf.Any object2 = 4;
}

message GalleriesResponse {
  repeated ProductGalleryDto galleries = 1;
}

message ProductGalleryDto {
  int32 id = 1;
  int32 product_id = 2;
  string title = 3;
  string image = 4;
  int32 order = 5;
}

message PropertiesResponse {
  repeated ProductPropertyDto properties = 1;
}

message ProductPropertyDto {
  int32 id = 1;
  int32 product_id = 2;
  int32 property_id = 3;
  string property_name = 4;
  string value = 5;
  int32 order = 6;
}

message CategoriesResponse {
  repeated ProductCateguryDto categories = 1;
}

message ProductCateguryDto {
  int32 id = 1;
  int32 product_id = 2;
  int32 categury_id = 3;
  string categury_name = 4;
}

message ProductRepresentationDto {
  int32 id = 1;
  int32 product_id = 2;
  int32 representation_id = 3;
  string representation_name = 4;
}

message ProductParentsResponse {
  repeated ProductDto parents = 1;
}

message ProductTypesResponse {
  repeated ProductTypeDto types = 1;
}

message ProductTypeDto {
  int32 id = 1;
  string name = 2;
}

message TaxesResponse {
  repeated TaxDto taxes = 1;
}

message TaxDto {
  int32 id = 1;
  string title = 2;
  int32 percent = 3;
  string code = 4;
}

message BrandsResponse {
  repeated BrandDto brands = 1;
}

message BrandDto {
  int32 id = 1;
  string name = 2;
  string latin_name = 3;
  bool is_active = 4;
  string logo = 5;
}

message UserStoresResponse {
  repeated UserStoreDto stores = 1;
}

message UserStoreDto {
  int32 id = 1;
  string user_id = 2;
  string name = 3;
  string latin_name = 4;
  string mobile = 5;
  string logo = 6;
  string address = 7;
  bool is_active = 8;
} 
syntax = "proto3";

option csharp_namespace = "Parstech.Shop.Shared.Protos";

package parstech;

import "Common.proto";

// ORDER SERVICE DEFINITIONS

// Order Service for client-side order management
service OrderService {
  // Basic order operations
  rpc GetOrder (OrderRequest) returns (OrderResponse);
  rpc GetOrdersByUser (UserOrdersRequest) returns (UserOrdersResponse);
  rpc GetOrderHistory (OrderHistoryRequest) returns (OrderHistoryResponse);
  rpc GetOrderDetails (OrderRequest) returns (OrderDetailsResponse);
  rpc TrackOrder (TrackOrderRequest) returns (TrackOrderResponse);
  rpc CancelOrder (CancelOrderRequest) returns (CancelOrderResponse);
  rpc ReturnOrder (ReturnOrderRequest) returns (ReturnOrderResponse);
}

// Order Checkout Service for checkout process
service OrderCheckoutService {
  // Checkout operations
  rpc InitiateCheckout (InitiateCheckoutRequest) returns (CheckoutResponse);
  rpc UpdateCheckoutAddress (CheckoutAddressRequest) returns (CheckoutResponse);
  rpc UpdateCheckoutShipping (CheckoutShippingRequest) returns (CheckoutResponse);
  rpc UpdateCheckoutPayment (CheckoutPaymentRequest) returns (CheckoutResponse);
  rpc ApplyCoupon (CouponRequest) returns (CouponResponse);
  rpc RemoveCoupon (RemoveCouponRequest) returns (CheckoutResponse);
  rpc CalculateOrderTotal (CalculateTotalRequest) returns (OrderTotalResponse);
  rpc CompleteCheckout (CompleteCheckoutRequest) returns (OrderConfirmationResponse);
}

// Order Admin Service for administration
service OrderAdminService {
  // Admin operations
  rpc GetOrdersForAdmin (OrdersAdminRequest) returns (OrdersAdminResponse);
  rpc GetOrderForAdmin (OrderAdminRequest) returns (OrderAdminResponse);
  rpc UpdateOrderStatus (UpdateOrderStatusRequest) returns (ResponseDto);
  rpc AddOrderNote (AddOrderNoteRequest) returns (ResponseDto);
  rpc GetOrderStatistics (OrderStatisticsRequest) returns (OrderStatisticsResponse);
  rpc ExportOrders (ExportOrdersRequest) returns (ExportOrdersResponse);
  rpc RefundOrder (RefundOrderRequest) returns (RefundOrderResponse);
  rpc ResendOrderConfirmation (ResendOrderConfirmationRequest) returns (ResponseDto);
}

// Order Shipping Service
service OrderShippingService {
  // Shipping operations
  rpc GetShippingMethods (ShippingMethodsRequest) returns (ShippingMethodsResponse);
  rpc CalculateShipping (CalculateShippingRequest) returns (CalculateShippingResponse);
  rpc CreateShipment (CreateShipmentRequest) returns (ShipmentResponse);
  rpc UpdateShipment (UpdateShipmentRequest) returns (ShipmentResponse);
  rpc GetShipmentDetails (ShipmentRequest) returns (ShipmentDetailsResponse);
  rpc GenerateShippingLabel (ShippingLabelRequest) returns (ShippingLabelResponse);
  rpc TrackShipment (TrackShipmentRequest) returns (TrackShipmentResponse);
}

// Payment Service
service PaymentService {
  // Payment operations
  rpc GetPaymentMethods (PaymentMethodsRequest) returns (PaymentMethodsResponse);
  rpc InitiatePayment (InitiatePaymentRequest) returns (InitiatePaymentResponse);
  rpc ProcessPayment (ProcessPaymentRequest) returns (ProcessPaymentResponse);
  rpc VerifyPayment (VerifyPaymentRequest) returns (VerifyPaymentResponse);
  rpc RefundPayment (RefundPaymentRequest) returns (RefundPaymentResponse);
  rpc GetTransactionDetails (TransactionDetailsRequest) returns (TransactionDetailsResponse);
}
